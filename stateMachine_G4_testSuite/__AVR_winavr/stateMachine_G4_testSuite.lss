
stateMachine_G4_testSuite.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000708  00800060  00002e62  00002ef6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006e  00800768  00800768  000035fe  2**0
                  ALLOC
  3 .stab         00003bdc  00000000  00000000  00003600  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000365f  00000000  00000000  000071dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	17 e0       	ldi	r17, 0x07	; 7
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e6       	ldi	r30, 0x62	; 98
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	17 e0       	ldi	r17, 0x07	; 7
      78:	a8 e6       	ldi	r26, 0x68	; 104
      7a:	b7 e0       	ldi	r27, 0x07	; 7
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3d       	cpi	r26, 0xD6	; 214
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 2f 17 	jmp	0x2e5e	; 0x2e5e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#if defined(__TS7800__) || defined(__cygwin__) || defined(__AVR_ARCH__)
int main()
#else
void main(	void)
#endif
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	28 97       	sbiw	r28, 0x08	; 8
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	0f be       	out	0x3f, r0	; 63
      a4:	cd bf       	out	0x3d, r28	; 61
#if defined(__TS7800__) || defined(__cygwin__)
	int				rc ;
	pthread_t		ISR_threadHandle ;
	void*			ISR_threadStatus ;
#endif
	bool			ok = true ;
      a6:	81 e0       	ldi	r24, 0x01	; 1
      a8:	8d 83       	std	Y+5, r24	; 0x05
	stateMachine_t*	bomb ;
	stateMachine_t*	calculator ;
	static int iterationMax = 10 ;

	puts("4th Generation state machine test started.") ;
      aa:	82 e6       	ldi	r24, 0x62	; 98
      ac:	90 e0       	ldi	r25, 0x00	; 0
      ae:	0e 94 46 14 	call	0x288c	; 0x288c <puts>
	task_UART_init(0) ;

	portENABLE_INTERRUPTS() ;
#endif

	puts("Generating timebomb") ;
      b2:	8d e8       	ldi	r24, 0x8D	; 141
      b4:	90 e0       	ldi	r25, 0x00	; 0
      b6:	0e 94 46 14 	call	0x288c	; 0x288c <puts>

	bomb = STATE_MACHINE_CREATE_INSTANCE_OF(timeBomb) ;
      ba:	0e 94 de 05 	call	0xbbc	; 0xbbc <timeBomb_getEventQueueDepth>
      be:	27 ee       	ldi	r18, 0xE7	; 231
      c0:	35 e0       	ldi	r19, 0x05	; 5
      c2:	b9 01       	movw	r22, r18
      c4:	0e 94 2e 0c 	call	0x185c	; 0x185c <allocateStateMachineMemory>
      c8:	9c 83       	std	Y+4, r25	; 0x04
      ca:	8b 83       	std	Y+3, r24	; 0x03
	if(bomb)
	{
//		REGISTER_STATE_MACHINE(bomb) ;
	}

	puts("Generating calculator") ;
      cc:	81 ea       	ldi	r24, 0xA1	; 161
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	0e 94 46 14 	call	0x288c	; 0x288c <puts>

	calculator = STATE_MACHINE_CREATE_INSTANCE_OF(calculator) ;
      d4:	0e 94 d6 00 	call	0x1ac	; 0x1ac <calculator_getEventQueueDepth>
      d8:	2f ed       	ldi	r18, 0xDF	; 223
      da:	30 e0       	ldi	r19, 0x00	; 0
      dc:	b9 01       	movw	r22, r18
      de:	0e 94 2e 0c 	call	0x185c	; 0x185c <allocateStateMachineMemory>
      e2:	9a 83       	std	Y+2, r25	; 0x02
      e4:	89 83       	std	Y+1, r24	; 0x01

	if(calculator)
      e6:	89 81       	ldd	r24, Y+1	; 0x01
      e8:	9a 81       	ldd	r25, Y+2	; 0x02
      ea:	00 97       	sbiw	r24, 0x00	; 0
      ec:	41 f0       	breq	.+16     	; 0xfe <main+0x6c>
	{
		puts("Registering calculator") ;
      ee:	87 eb       	ldi	r24, 0xB7	; 183
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	0e 94 46 14 	call	0x288c	; 0x288c <puts>

		REGISTER_STATE_MACHINE(calculator) ;
      f6:	89 81       	ldd	r24, Y+1	; 0x01
      f8:	9a 81       	ldd	r25, Y+2	; 0x02
      fa:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <registerStateMachine>
	}

	puts("Iterating state machines") ;
      fe:	8e ec       	ldi	r24, 0xCE	; 206
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	0e 94 46 14 	call	0x288c	; 0x288c <puts>
     106:	1e c0       	rjmp	.+60     	; 0x144 <main+0xb2>

	while(ok)
	{
		if(iterationMax-- == 0)
     108:	80 91 60 00 	lds	r24, 0x0060
     10c:	90 91 61 00 	lds	r25, 0x0061
     110:	98 87       	std	Y+8, r25	; 0x08
     112:	8f 83       	std	Y+7, r24	; 0x07
     114:	1e 82       	std	Y+6, r1	; 0x06
     116:	8f 81       	ldd	r24, Y+7	; 0x07
     118:	98 85       	ldd	r25, Y+8	; 0x08
     11a:	00 97       	sbiw	r24, 0x00	; 0
     11c:	11 f4       	brne	.+4      	; 0x122 <main+0x90>
     11e:	91 e0       	ldi	r25, 0x01	; 1
     120:	9e 83       	std	Y+6, r25	; 0x06
     122:	8f 81       	ldd	r24, Y+7	; 0x07
     124:	98 85       	ldd	r25, Y+8	; 0x08
     126:	01 97       	sbiw	r24, 0x01	; 1
     128:	90 93 61 00 	sts	0x0061, r25
     12c:	80 93 60 00 	sts	0x0060, r24
     130:	8e 81       	ldd	r24, Y+6	; 0x06
     132:	88 23       	and	r24, r24
     134:	09 f0       	breq	.+2      	; 0x138 <main+0xa6>
		{
			ok = false ;
     136:	1d 82       	std	Y+5, r1	; 0x05
		}

		puts("loop") ;
     138:	87 ee       	ldi	r24, 0xE7	; 231
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	0e 94 46 14 	call	0x288c	; 0x288c <puts>

		ITERATE_ALL_STATE_MACHINES() ;
     140:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <iterateAllStateMachines>
		REGISTER_STATE_MACHINE(calculator) ;
	}

	puts("Iterating state machines") ;

	while(ok)
     144:	8d 81       	ldd	r24, Y+5	; 0x05
     146:	88 23       	and	r24, r24
     148:	f9 f6       	brne	.-66     	; 0x108 <main+0x76>

#if defined(__TS7800__) || defined(__cygwin__)
	pthread_join(ISR_threadHandle, &ISR_threadStatus) ;
#endif

	if(calculator)
     14a:	89 81       	ldd	r24, Y+1	; 0x01
     14c:	9a 81       	ldd	r25, Y+2	; 0x02
     14e:	00 97       	sbiw	r24, 0x00	; 0
     150:	69 f0       	breq	.+26     	; 0x16c <main+0xda>
	{
		UNREGISTER_STATE_MACHINE(calculator) ;
     152:	89 81       	ldd	r24, Y+1	; 0x01
     154:	9a 81       	ldd	r25, Y+2	; 0x02
     156:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <unregisterStateMachine>

		STATE_MACHINE_DESTROY_INSTANCE_OF(calculator, calculator) ;
     15a:	89 81       	ldd	r24, Y+1	; 0x01
     15c:	9a 81       	ldd	r25, Y+2	; 0x02
     15e:	23 e0       	ldi	r18, 0x03	; 3
     160:	31 e0       	ldi	r19, 0x01	; 1
     162:	b9 01       	movw	r22, r18
     164:	0e 94 bb 0c 	call	0x1976	; 0x1976 <deallocateStateMachineMemory>

		calculator = 0 ;
     168:	1a 82       	std	Y+2, r1	; 0x02
     16a:	19 82       	std	Y+1, r1	; 0x01
	}

	if(bomb)
     16c:	8b 81       	ldd	r24, Y+3	; 0x03
     16e:	9c 81       	ldd	r25, Y+4	; 0x04
     170:	00 97       	sbiw	r24, 0x00	; 0
     172:	69 f0       	breq	.+26     	; 0x18e <main+0xfc>
	{
		UNREGISTER_STATE_MACHINE(bomb) ;
     174:	8b 81       	ldd	r24, Y+3	; 0x03
     176:	9c 81       	ldd	r25, Y+4	; 0x04
     178:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <unregisterStateMachine>

		STATE_MACHINE_DESTROY_INSTANCE_OF(timeBomb, bomb) ;
     17c:	8b 81       	ldd	r24, Y+3	; 0x03
     17e:	9c 81       	ldd	r25, Y+4	; 0x04
     180:	2b e0       	ldi	r18, 0x0B	; 11
     182:	36 e0       	ldi	r19, 0x06	; 6
     184:	b9 01       	movw	r22, r18
     186:	0e 94 bb 0c 	call	0x1976	; 0x1976 <deallocateStateMachineMemory>

		bomb = 0 ;
     18a:	1c 82       	std	Y+4, r1	; 0x04
     18c:	1b 82       	std	Y+3, r1	; 0x03
	}
#endif
	puts("\n4th Generation state machine test done.") ;
     18e:	8c ee       	ldi	r24, 0xEC	; 236
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	0e 94 46 14 	call	0x288c	; 0x288c <puts>

#if defined(__TS7800__) || defined(__cygwin__) || defined(__AVR_ARCH__)
	return EXIT_SUCCESS ;
     196:	80 e0       	ldi	r24, 0x00	; 0
     198:	90 e0       	ldi	r25, 0x00	; 0
#endif
}
     19a:	28 96       	adiw	r28, 0x08	; 8
     19c:	0f b6       	in	r0, 0x3f	; 63
     19e:	f8 94       	cli
     1a0:	de bf       	out	0x3e, r29	; 62
     1a2:	0f be       	out	0x3f, r0	; 63
     1a4:	cd bf       	out	0x3d, r28	; 61
     1a6:	cf 91       	pop	r28
     1a8:	df 91       	pop	r29
     1aa:	08 95       	ret

000001ac <calculator_getEventQueueDepth>:
DEFINE_STATE_MACHINE() ;
	DECLARE_STATE_MACHINE_VARIABLES() ;
		uint32_t	result ;
	END_STATE_MACHINE_VARIABLES() ;

	SET_EVENT_QUEUE_DEPTH(config_CalcEVENT_QUEUE_DEPTH) ;
     1ac:	df 93       	push	r29
     1ae:	cf 93       	push	r28
     1b0:	cd b7       	in	r28, 0x3d	; 61
     1b2:	de b7       	in	r29, 0x3e	; 62
     1b4:	80 e1       	ldi	r24, 0x10	; 16
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	cf 91       	pop	r28
     1ba:	df 91       	pop	r29
     1bc:	08 95       	ret

000001be <calculator_constructor>:

		ADD_SUB_STATE(operand2, PARENT_STATE(on)) ;
			ADD_SUB_STATE(zero2, PARENT_STATE(operand2)) ;
			ADD_SUB_STATE(int2, PARENT_STATE(operand2)) ;
			ADD_SUB_STATE(frac2, PARENT_STATE(operand2)) ;
END_STATE_MACHINE_DEFINITION() ;
     1be:	df 93       	push	r29
     1c0:	cf 93       	push	r28
     1c2:	00 d0       	rcall	.+0      	; 0x1c4 <calculator_constructor+0x6>
     1c4:	cd b7       	in	r28, 0x3d	; 61
     1c6:	de b7       	in	r29, 0x3e	; 62
     1c8:	9a 83       	std	Y+2, r25	; 0x02
     1ca:	89 83       	std	Y+1, r24	; 0x01
     1cc:	e9 81       	ldd	r30, Y+1	; 0x01
     1ce:	fa 81       	ldd	r31, Y+2	; 0x02
     1d0:	81 e3       	ldi	r24, 0x31	; 49
     1d2:	91 e0       	ldi	r25, 0x01	; 1
     1d4:	91 83       	std	Z+1, r25	; 0x01
     1d6:	80 83       	st	Z, r24
     1d8:	e9 81       	ldd	r30, Y+1	; 0x01
     1da:	fa 81       	ldd	r31, Y+2	; 0x02
     1dc:	81 e3       	ldi	r24, 0x31	; 49
     1de:	91 e0       	ldi	r25, 0x01	; 1
     1e0:	95 83       	std	Z+5, r25	; 0x05
     1e2:	84 83       	std	Z+4, r24	; 0x04
     1e4:	80 91 20 01 	lds	r24, 0x0120
     1e8:	90 91 21 01 	lds	r25, 0x0121
     1ec:	e9 81       	ldd	r30, Y+1	; 0x01
     1ee:	fa 81       	ldd	r31, Y+2	; 0x02
     1f0:	93 83       	std	Z+3, r25	; 0x03
     1f2:	82 83       	std	Z+2, r24	; 0x02
     1f4:	89 81       	ldd	r24, Y+1	; 0x01
     1f6:	9a 81       	ldd	r25, Y+2	; 0x02
     1f8:	0e 94 25 01 	call	0x24a	; 0x24a <calculator_constructor2>
     1fc:	0f 90       	pop	r0
     1fe:	0f 90       	pop	r0
     200:	cf 91       	pop	r28
     202:	df 91       	pop	r29
     204:	08 95       	ret

00000206 <calculator_destructor>:
     206:	df 93       	push	r29
     208:	cf 93       	push	r28
     20a:	00 d0       	rcall	.+0      	; 0x20c <calculator_destructor+0x6>
     20c:	cd b7       	in	r28, 0x3d	; 61
     20e:	de b7       	in	r29, 0x3e	; 62
     210:	9a 83       	std	Y+2, r25	; 0x02
     212:	89 83       	std	Y+1, r24	; 0x01
     214:	89 81       	ldd	r24, Y+1	; 0x01
     216:	9a 81       	ldd	r25, Y+2	; 0x02
     218:	0e 94 37 01 	call	0x26e	; 0x26e <calculator_destructor2>
     21c:	0f 90       	pop	r0
     21e:	0f 90       	pop	r0
     220:	cf 91       	pop	r28
     222:	df 91       	pop	r29
     224:	08 95       	ret

00000226 <calculator_getHistoryQueueDepth>:
     226:	df 93       	push	r29
     228:	cf 93       	push	r28
     22a:	cd b7       	in	r28, 0x3d	; 61
     22c:	de b7       	in	r29, 0x3e	; 62
     22e:	84 e3       	ldi	r24, 0x34	; 52
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	cf 91       	pop	r28
     234:	df 91       	pop	r29
     236:	08 95       	ret

00000238 <calculator_getMachineSize>:
     238:	df 93       	push	r29
     23a:	cf 93       	push	r28
     23c:	cd b7       	in	r28, 0x3d	; 61
     23e:	de b7       	in	r29, 0x3e	; 62
     240:	86 e2       	ldi	r24, 0x26	; 38
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	cf 91       	pop	r28
     246:	df 91       	pop	r29
     248:	08 95       	ret

0000024a <calculator_constructor2>:


STATE_MACHINE_CONSTRUCTOR()
{
     24a:	df 93       	push	r29
     24c:	cf 93       	push	r28
     24e:	00 d0       	rcall	.+0      	; 0x250 <calculator_constructor2+0x6>
     250:	cd b7       	in	r28, 0x3d	; 61
     252:	de b7       	in	r29, 0x3e	; 62
     254:	9a 83       	std	Y+2, r25	; 0x02
     256:	89 83       	std	Y+1, r24	; 0x01
	self->result = 0 ;
     258:	e9 81       	ldd	r30, Y+1	; 0x01
     25a:	fa 81       	ldd	r31, Y+2	; 0x02
     25c:	12 a2       	std	Z+34, r1	; 0x22
     25e:	13 a2       	std	Z+35, r1	; 0x23
     260:	14 a2       	std	Z+36, r1	; 0x24
     262:	15 a2       	std	Z+37, r1	; 0x25
}
     264:	0f 90       	pop	r0
     266:	0f 90       	pop	r0
     268:	cf 91       	pop	r28
     26a:	df 91       	pop	r29
     26c:	08 95       	ret

0000026e <calculator_destructor2>:


STATE_MACHINE_DESTRUCTOR()
{
     26e:	df 93       	push	r29
     270:	cf 93       	push	r28
     272:	00 d0       	rcall	.+0      	; 0x274 <calculator_destructor2+0x6>
     274:	cd b7       	in	r28, 0x3d	; 61
     276:	de b7       	in	r29, 0x3e	; 62
     278:	9a 83       	std	Y+2, r25	; 0x02
     27a:	89 83       	std	Y+1, r24	; 0x01
	(void)self ;	/* Nothing to do here */
}
     27c:	0f 90       	pop	r0
     27e:	0f 90       	pop	r0
     280:	cf 91       	pop	r28
     282:	df 91       	pop	r29
     284:	08 95       	ret

00000286 <calculator_TOP_handler>:


DEFINE_TOP_STATE()
     286:	df 93       	push	r29
     288:	cf 93       	push	r28
     28a:	00 d0       	rcall	.+0      	; 0x28c <calculator_TOP_handler+0x6>
     28c:	00 d0       	rcall	.+0      	; 0x28e <calculator_TOP_handler+0x8>
     28e:	00 d0       	rcall	.+0      	; 0x290 <calculator_TOP_handler+0xa>
     290:	cd b7       	in	r28, 0x3d	; 61
     292:	de b7       	in	r29, 0x3e	; 62
     294:	9b 83       	std	Y+3, r25	; 0x03
     296:	8a 83       	std	Y+2, r24	; 0x02
     298:	7d 83       	std	Y+5, r23	; 0x05
     29a:	6c 83       	std	Y+4, r22	; 0x04
     29c:	19 82       	std	Y+1, r1	; 0x01
{
	INITIAL_TRANSITION(TO(begin),																	NO_ACTION) ;
     29e:	ec 81       	ldd	r30, Y+4	; 0x04
     2a0:	fd 81       	ldd	r31, Y+5	; 0x05
     2a2:	80 81       	ld	r24, Z
     2a4:	82 30       	cpi	r24, 0x02	; 2
     2a6:	49 f4       	brne	.+18     	; 0x2ba <calculator_TOP_handler+0x34>
     2a8:	ea 81       	ldd	r30, Y+2	; 0x02
     2aa:	fb 81       	ldd	r31, Y+3	; 0x03
     2ac:	8f e8       	ldi	r24, 0x8F	; 143
     2ae:	91 e0       	ldi	r25, 0x01	; 1
     2b0:	97 83       	std	Z+7, r25	; 0x07
     2b2:	86 83       	std	Z+6, r24	; 0x06
     2b4:	82 e0       	ldi	r24, 0x02	; 2
     2b6:	8e 83       	std	Y+6, r24	; 0x06
     2b8:	02 c0       	rjmp	.+4      	; 0x2be <calculator_TOP_handler+0x38>
}
END_DEFINE_STATE()
     2ba:	89 81       	ldd	r24, Y+1	; 0x01
     2bc:	8e 83       	std	Y+6, r24	; 0x06
     2be:	8e 81       	ldd	r24, Y+6	; 0x06
     2c0:	26 96       	adiw	r28, 0x06	; 6
     2c2:	0f b6       	in	r0, 0x3f	; 63
     2c4:	f8 94       	cli
     2c6:	de bf       	out	0x3e, r29	; 62
     2c8:	0f be       	out	0x3f, r0	; 63
     2ca:	cd bf       	out	0x3d, r28	; 61
     2cc:	cf 91       	pop	r28
     2ce:	df 91       	pop	r29
     2d0:	08 95       	ret

000002d2 <calculator_on_handler>:


DEFINE_STATE(on)
     2d2:	df 93       	push	r29
     2d4:	cf 93       	push	r28
     2d6:	cd b7       	in	r28, 0x3d	; 61
     2d8:	de b7       	in	r29, 0x3e	; 62
     2da:	28 97       	sbiw	r28, 0x08	; 8
     2dc:	0f b6       	in	r0, 0x3f	; 63
     2de:	f8 94       	cli
     2e0:	de bf       	out	0x3e, r29	; 62
     2e2:	0f be       	out	0x3f, r0	; 63
     2e4:	cd bf       	out	0x3d, r28	; 61
     2e6:	9d 83       	std	Y+5, r25	; 0x05
     2e8:	8c 83       	std	Y+4, r24	; 0x04
     2ea:	7f 83       	std	Y+7, r23	; 0x07
     2ec:	6e 83       	std	Y+6, r22	; 0x06
     2ee:	1b 82       	std	Y+3, r1	; 0x03
{
	INITIAL_TRANSITION(TO(ready),																NO_ACTION) ;
     2f0:	ee 81       	ldd	r30, Y+6	; 0x06
     2f2:	ff 81       	ldd	r31, Y+7	; 0x07
     2f4:	80 81       	ld	r24, Z
     2f6:	82 30       	cpi	r24, 0x02	; 2
     2f8:	49 f4       	brne	.+18     	; 0x30c <calculator_on_handler+0x3a>
     2fa:	ec 81       	ldd	r30, Y+4	; 0x04
     2fc:	fd 81       	ldd	r31, Y+5	; 0x05
     2fe:	8e e5       	ldi	r24, 0x5E	; 94
     300:	91 e0       	ldi	r25, 0x01	; 1
     302:	97 83       	std	Z+7, r25	; 0x07
     304:	86 83       	std	Z+6, r24	; 0x06
     306:	82 e0       	ldi	r24, 0x02	; 2
     308:	88 87       	std	Y+8, r24	; 0x08
     30a:	22 c0       	rjmp	.+68     	; 0x350 <calculator_on_handler+0x7e>

	TRANSITION_ON(CLEAR,												TO(on),					NO_ACTION) ;
     30c:	ee 81       	ldd	r30, Y+6	; 0x06
     30e:	ff 81       	ldd	r31, Y+7	; 0x07
     310:	80 81       	ld	r24, Z
     312:	86 30       	cpi	r24, 0x06	; 6
     314:	59 f4       	brne	.+22     	; 0x32c <calculator_on_handler+0x5a>
     316:	82 e0       	ldi	r24, 0x02	; 2
     318:	8a 83       	std	Y+2, r24	; 0x02
     31a:	ec 81       	ldd	r30, Y+4	; 0x04
     31c:	fd 81       	ldd	r31, Y+5	; 0x05
     31e:	86 e4       	ldi	r24, 0x46	; 70
     320:	91 e0       	ldi	r25, 0x01	; 1
     322:	97 83       	std	Z+7, r25	; 0x07
     324:	86 83       	std	Z+6, r24	; 0x06
     326:	8a 81       	ldd	r24, Y+2	; 0x02
     328:	88 87       	std	Y+8, r24	; 0x08
     32a:	12 c0       	rjmp	.+36     	; 0x350 <calculator_on_handler+0x7e>
	TRANSITION_ON(OFF,													TO(STATE_MACHINE_EXIT),	NO_ACTION) ;
     32c:	ee 81       	ldd	r30, Y+6	; 0x06
     32e:	ff 81       	ldd	r31, Y+7	; 0x07
     330:	80 81       	ld	r24, Z
     332:	8d 30       	cpi	r24, 0x0D	; 13
     334:	59 f4       	brne	.+22     	; 0x34c <calculator_on_handler+0x7a>
     336:	82 e0       	ldi	r24, 0x02	; 2
     338:	89 83       	std	Y+1, r24	; 0x01
     33a:	ec 81       	ldd	r30, Y+4	; 0x04
     33c:	fd 81       	ldd	r31, Y+5	; 0x05
     33e:	81 e3       	ldi	r24, 0x31	; 49
     340:	91 e0       	ldi	r25, 0x01	; 1
     342:	97 83       	std	Z+7, r25	; 0x07
     344:	86 83       	std	Z+6, r24	; 0x06
     346:	89 81       	ldd	r24, Y+1	; 0x01
     348:	88 87       	std	Y+8, r24	; 0x08
     34a:	02 c0       	rjmp	.+4      	; 0x350 <calculator_on_handler+0x7e>
}
END_DEFINE_STATE()
     34c:	8b 81       	ldd	r24, Y+3	; 0x03
     34e:	88 87       	std	Y+8, r24	; 0x08
     350:	88 85       	ldd	r24, Y+8	; 0x08
     352:	28 96       	adiw	r28, 0x08	; 8
     354:	0f b6       	in	r0, 0x3f	; 63
     356:	f8 94       	cli
     358:	de bf       	out	0x3e, r29	; 62
     35a:	0f be       	out	0x3f, r0	; 63
     35c:	cd bf       	out	0x3d, r28	; 61
     35e:	cf 91       	pop	r28
     360:	df 91       	pop	r29
     362:	08 95       	ret

00000364 <calculator_ready_handler>:


DEFINE_STATE(ready)
     364:	df 93       	push	r29
     366:	cf 93       	push	r28
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	27 97       	sbiw	r28, 0x07	; 7
     36e:	0f b6       	in	r0, 0x3f	; 63
     370:	f8 94       	cli
     372:	de bf       	out	0x3e, r29	; 62
     374:	0f be       	out	0x3f, r0	; 63
     376:	cd bf       	out	0x3d, r28	; 61
     378:	9c 83       	std	Y+4, r25	; 0x04
     37a:	8b 83       	std	Y+3, r24	; 0x03
     37c:	7e 83       	std	Y+6, r23	; 0x06
     37e:	6d 83       	std	Y+5, r22	; 0x05
     380:	1a 82       	std	Y+2, r1	; 0x02
{
	INITIAL_TRANSITION(TO(zero1),																NO_ACTION) ;
     382:	ed 81       	ldd	r30, Y+5	; 0x05
     384:	fe 81       	ldd	r31, Y+6	; 0x06
     386:	80 81       	ld	r24, Z
     388:	82 30       	cpi	r24, 0x02	; 2
     38a:	49 f4       	brne	.+18     	; 0x39e <calculator_ready_handler+0x3a>
     38c:	eb 81       	ldd	r30, Y+3	; 0x03
     38e:	fc 81       	ldd	r31, Y+4	; 0x04
     390:	8d ed       	ldi	r24, 0xDD	; 221
     392:	91 e0       	ldi	r25, 0x01	; 1
     394:	97 83       	std	Z+7, r25	; 0x07
     396:	86 83       	std	Z+6, r24	; 0x06
     398:	82 e0       	ldi	r24, 0x02	; 2
     39a:	8f 83       	std	Y+7, r24	; 0x07
     39c:	12 c0       	rjmp	.+36     	; 0x3c2 <calculator_ready_handler+0x5e>

	TRANSITION_ON(OPERATION,											TO(opEntered),			NO_ACTION) ;
     39e:	ed 81       	ldd	r30, Y+5	; 0x05
     3a0:	fe 81       	ldd	r31, Y+6	; 0x06
     3a2:	80 81       	ld	r24, Z
     3a4:	8b 30       	cpi	r24, 0x0B	; 11
     3a6:	59 f4       	brne	.+22     	; 0x3be <calculator_ready_handler+0x5a>
     3a8:	82 e0       	ldi	r24, 0x02	; 2
     3aa:	89 83       	std	Y+1, r24	; 0x01
     3ac:	eb 81       	ldd	r30, Y+3	; 0x03
     3ae:	fc 81       	ldd	r31, Y+4	; 0x04
     3b0:	80 e4       	ldi	r24, 0x40	; 64
     3b2:	92 e0       	ldi	r25, 0x02	; 2
     3b4:	97 83       	std	Z+7, r25	; 0x07
     3b6:	86 83       	std	Z+6, r24	; 0x06
     3b8:	89 81       	ldd	r24, Y+1	; 0x01
     3ba:	8f 83       	std	Y+7, r24	; 0x07
     3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <calculator_ready_handler+0x5e>
}
END_DEFINE_STATE()
     3be:	8a 81       	ldd	r24, Y+2	; 0x02
     3c0:	8f 83       	std	Y+7, r24	; 0x07
     3c2:	8f 81       	ldd	r24, Y+7	; 0x07
     3c4:	27 96       	adiw	r28, 0x07	; 7
     3c6:	0f b6       	in	r0, 0x3f	; 63
     3c8:	f8 94       	cli
     3ca:	de bf       	out	0x3e, r29	; 62
     3cc:	0f be       	out	0x3f, r0	; 63
     3ce:	cd bf       	out	0x3d, r28	; 61
     3d0:	cf 91       	pop	r28
     3d2:	df 91       	pop	r29
     3d4:	08 95       	ret

000003d6 <calculator_result_handler>:


DEFINE_STATE(result)
     3d6:	df 93       	push	r29
     3d8:	cf 93       	push	r28
     3da:	00 d0       	rcall	.+0      	; 0x3dc <calculator_result_handler+0x6>
     3dc:	00 d0       	rcall	.+0      	; 0x3de <calculator_result_handler+0x8>
     3de:	0f 92       	push	r0
     3e0:	cd b7       	in	r28, 0x3d	; 61
     3e2:	de b7       	in	r29, 0x3e	; 62
     3e4:	9b 83       	std	Y+3, r25	; 0x03
     3e6:	8a 83       	std	Y+2, r24	; 0x02
     3e8:	7d 83       	std	Y+5, r23	; 0x05
     3ea:	6c 83       	std	Y+4, r22	; 0x04
     3ec:	19 82       	std	Y+1, r1	; 0x01
{
}
END_DEFINE_STATE()
     3ee:	89 81       	ldd	r24, Y+1	; 0x01
     3f0:	0f 90       	pop	r0
     3f2:	0f 90       	pop	r0
     3f4:	0f 90       	pop	r0
     3f6:	0f 90       	pop	r0
     3f8:	0f 90       	pop	r0
     3fa:	cf 91       	pop	r28
     3fc:	df 91       	pop	r29
     3fe:	08 95       	ret

00000400 <calculator_begin_handler>:


DEFINE_STATE(begin)
     400:	df 93       	push	r29
     402:	cf 93       	push	r28
     404:	cd b7       	in	r28, 0x3d	; 61
     406:	de b7       	in	r29, 0x3e	; 62
     408:	2a 97       	sbiw	r28, 0x0a	; 10
     40a:	0f b6       	in	r0, 0x3f	; 63
     40c:	f8 94       	cli
     40e:	de bf       	out	0x3e, r29	; 62
     410:	0f be       	out	0x3f, r0	; 63
     412:	cd bf       	out	0x3d, r28	; 61
     414:	9f 83       	std	Y+7, r25	; 0x07
     416:	8e 83       	std	Y+6, r24	; 0x06
     418:	79 87       	std	Y+9, r23	; 0x09
     41a:	68 87       	std	Y+8, r22	; 0x08
     41c:	1d 82       	std	Y+5, r1	; 0x05
{
	/* This will cause a loop in the state machine, but for testing purposes, it tests a couple of cases */
	INITIAL_TRANSITION(TO(on),																	NO_ACTION) ;
     41e:	e8 85       	ldd	r30, Y+8	; 0x08
     420:	f9 85       	ldd	r31, Y+9	; 0x09
     422:	80 81       	ld	r24, Z
     424:	82 30       	cpi	r24, 0x02	; 2
     426:	49 f4       	brne	.+18     	; 0x43a <calculator_begin_handler+0x3a>
     428:	ee 81       	ldd	r30, Y+6	; 0x06
     42a:	ff 81       	ldd	r31, Y+7	; 0x07
     42c:	86 e4       	ldi	r24, 0x46	; 70
     42e:	91 e0       	ldi	r25, 0x01	; 1
     430:	97 83       	std	Z+7, r25	; 0x07
     432:	86 83       	std	Z+6, r24	; 0x06
     434:	82 e0       	ldi	r24, 0x02	; 2
     436:	8a 87       	std	Y+10, r24	; 0x0a
     438:	47 c0       	rjmp	.+142    	; 0x4c8 <__stack+0x69>

	TRANSITION_ON_IF(OPERATION,	IF(CAST_EVENT(keyEvent_t)->key == '-'),	TO(negated1),			NO_ACTION) ;
     43a:	e8 85       	ldd	r30, Y+8	; 0x08
     43c:	f9 85       	ldd	r31, Y+9	; 0x09
     43e:	80 81       	ld	r24, Z
     440:	8b 30       	cpi	r24, 0x0B	; 11
     442:	81 f4       	brne	.+32     	; 0x464 <__stack+0x5>
     444:	e8 85       	ldd	r30, Y+8	; 0x08
     446:	f9 85       	ldd	r31, Y+9	; 0x09
     448:	81 81       	ldd	r24, Z+1	; 0x01
     44a:	8d 32       	cpi	r24, 0x2D	; 45
     44c:	59 f4       	brne	.+22     	; 0x464 <__stack+0x5>
     44e:	82 e0       	ldi	r24, 0x02	; 2
     450:	8c 83       	std	Y+4, r24	; 0x04
     452:	ee 81       	ldd	r30, Y+6	; 0x06
     454:	ff 81       	ldd	r31, Y+7	; 0x07
     456:	8a ea       	ldi	r24, 0xAA	; 170
     458:	91 e0       	ldi	r25, 0x01	; 1
     45a:	97 83       	std	Z+7, r25	; 0x07
     45c:	86 83       	std	Z+6, r24	; 0x06
     45e:	8c 81       	ldd	r24, Y+4	; 0x04
     460:	8a 87       	std	Y+10, r24	; 0x0a
     462:	32 c0       	rjmp	.+100    	; 0x4c8 <__stack+0x69>
	TRANSITION_ON(DIGIT_0,												TO(zero1),				NO_ACTION) ;
     464:	e8 85       	ldd	r30, Y+8	; 0x08
     466:	f9 85       	ldd	r31, Y+9	; 0x09
     468:	80 81       	ld	r24, Z
     46a:	88 30       	cpi	r24, 0x08	; 8
     46c:	59 f4       	brne	.+22     	; 0x484 <__stack+0x25>
     46e:	82 e0       	ldi	r24, 0x02	; 2
     470:	8b 83       	std	Y+3, r24	; 0x03
     472:	ee 81       	ldd	r30, Y+6	; 0x06
     474:	ff 81       	ldd	r31, Y+7	; 0x07
     476:	8d ed       	ldi	r24, 0xDD	; 221
     478:	91 e0       	ldi	r25, 0x01	; 1
     47a:	97 83       	std	Z+7, r25	; 0x07
     47c:	86 83       	std	Z+6, r24	; 0x06
     47e:	8b 81       	ldd	r24, Y+3	; 0x03
     480:	8a 87       	std	Y+10, r24	; 0x0a
     482:	22 c0       	rjmp	.+68     	; 0x4c8 <__stack+0x69>
	TRANSITION_ON(DIGIT_1_9,											TO(int1),				NO_ACTION) ;
     484:	e8 85       	ldd	r30, Y+8	; 0x08
     486:	f9 85       	ldd	r31, Y+9	; 0x09
     488:	80 81       	ld	r24, Z
     48a:	89 30       	cpi	r24, 0x09	; 9
     48c:	59 f4       	brne	.+22     	; 0x4a4 <__stack+0x45>
     48e:	82 e0       	ldi	r24, 0x02	; 2
     490:	8a 83       	std	Y+2, r24	; 0x02
     492:	ee 81       	ldd	r30, Y+6	; 0x06
     494:	ff 81       	ldd	r31, Y+7	; 0x07
     496:	84 ef       	ldi	r24, 0xF4	; 244
     498:	91 e0       	ldi	r25, 0x01	; 1
     49a:	97 83       	std	Z+7, r25	; 0x07
     49c:	86 83       	std	Z+6, r24	; 0x06
     49e:	8a 81       	ldd	r24, Y+2	; 0x02
     4a0:	8a 87       	std	Y+10, r24	; 0x0a
     4a2:	12 c0       	rjmp	.+36     	; 0x4c8 <__stack+0x69>
	TRANSITION_ON(POINT,												TO(frac1),				NO_ACTION) ;
     4a4:	e8 85       	ldd	r30, Y+8	; 0x08
     4a6:	f9 85       	ldd	r31, Y+9	; 0x09
     4a8:	80 81       	ld	r24, Z
     4aa:	8a 30       	cpi	r24, 0x0A	; 10
     4ac:	59 f4       	brne	.+22     	; 0x4c4 <__stack+0x65>
     4ae:	82 e0       	ldi	r24, 0x02	; 2
     4b0:	89 83       	std	Y+1, r24	; 0x01
     4b2:	ee 81       	ldd	r30, Y+6	; 0x06
     4b4:	ff 81       	ldd	r31, Y+7	; 0x07
     4b6:	8c e0       	ldi	r24, 0x0C	; 12
     4b8:	92 e0       	ldi	r25, 0x02	; 2
     4ba:	97 83       	std	Z+7, r25	; 0x07
     4bc:	86 83       	std	Z+6, r24	; 0x06
     4be:	89 81       	ldd	r24, Y+1	; 0x01
     4c0:	8a 87       	std	Y+10, r24	; 0x0a
     4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <__stack+0x69>
}
END_DEFINE_STATE()
     4c4:	8d 81       	ldd	r24, Y+5	; 0x05
     4c6:	8a 87       	std	Y+10, r24	; 0x0a
     4c8:	8a 85       	ldd	r24, Y+10	; 0x0a
     4ca:	2a 96       	adiw	r28, 0x0a	; 10
     4cc:	0f b6       	in	r0, 0x3f	; 63
     4ce:	f8 94       	cli
     4d0:	de bf       	out	0x3e, r29	; 62
     4d2:	0f be       	out	0x3f, r0	; 63
     4d4:	cd bf       	out	0x3d, r28	; 61
     4d6:	cf 91       	pop	r28
     4d8:	df 91       	pop	r29
     4da:	08 95       	ret

000004dc <calculator_negated1_handler>:


DEFINE_STATE(negated1)
     4dc:	df 93       	push	r29
     4de:	cf 93       	push	r28
     4e0:	cd b7       	in	r28, 0x3d	; 61
     4e2:	de b7       	in	r29, 0x3e	; 62
     4e4:	2a 97       	sbiw	r28, 0x0a	; 10
     4e6:	0f b6       	in	r0, 0x3f	; 63
     4e8:	f8 94       	cli
     4ea:	de bf       	out	0x3e, r29	; 62
     4ec:	0f be       	out	0x3f, r0	; 63
     4ee:	cd bf       	out	0x3d, r28	; 61
     4f0:	9f 83       	std	Y+7, r25	; 0x07
     4f2:	8e 83       	std	Y+6, r24	; 0x06
     4f4:	79 87       	std	Y+9, r23	; 0x09
     4f6:	68 87       	std	Y+8, r22	; 0x08
     4f8:	1d 82       	std	Y+5, r1	; 0x05
{
	TRANSITION_ON(CLEAR_ENTRY,											TO(begin),				NO_ACTION) ;
     4fa:	e8 85       	ldd	r30, Y+8	; 0x08
     4fc:	f9 85       	ldd	r31, Y+9	; 0x09
     4fe:	80 81       	ld	r24, Z
     500:	87 30       	cpi	r24, 0x07	; 7
     502:	59 f4       	brne	.+22     	; 0x51a <calculator_negated1_handler+0x3e>
     504:	82 e0       	ldi	r24, 0x02	; 2
     506:	8c 83       	std	Y+4, r24	; 0x04
     508:	ee 81       	ldd	r30, Y+6	; 0x06
     50a:	ff 81       	ldd	r31, Y+7	; 0x07
     50c:	8f e8       	ldi	r24, 0x8F	; 143
     50e:	91 e0       	ldi	r25, 0x01	; 1
     510:	97 83       	std	Z+7, r25	; 0x07
     512:	86 83       	std	Z+6, r24	; 0x06
     514:	8c 81       	ldd	r24, Y+4	; 0x04
     516:	8a 87       	std	Y+10, r24	; 0x0a
     518:	3f c0       	rjmp	.+126    	; 0x598 <calculator_negated1_handler+0xbc>
	TRANSITION_ON(DIGIT_0,												TO(zero1),				NO_ACTION) ;
     51a:	e8 85       	ldd	r30, Y+8	; 0x08
     51c:	f9 85       	ldd	r31, Y+9	; 0x09
     51e:	80 81       	ld	r24, Z
     520:	88 30       	cpi	r24, 0x08	; 8
     522:	59 f4       	brne	.+22     	; 0x53a <calculator_negated1_handler+0x5e>
     524:	82 e0       	ldi	r24, 0x02	; 2
     526:	8b 83       	std	Y+3, r24	; 0x03
     528:	ee 81       	ldd	r30, Y+6	; 0x06
     52a:	ff 81       	ldd	r31, Y+7	; 0x07
     52c:	8d ed       	ldi	r24, 0xDD	; 221
     52e:	91 e0       	ldi	r25, 0x01	; 1
     530:	97 83       	std	Z+7, r25	; 0x07
     532:	86 83       	std	Z+6, r24	; 0x06
     534:	8b 81       	ldd	r24, Y+3	; 0x03
     536:	8a 87       	std	Y+10, r24	; 0x0a
     538:	2f c0       	rjmp	.+94     	; 0x598 <calculator_negated1_handler+0xbc>
	TRANSITION_ON(DIGIT_1_9,											TO(int1),				NO_ACTION) ;
     53a:	e8 85       	ldd	r30, Y+8	; 0x08
     53c:	f9 85       	ldd	r31, Y+9	; 0x09
     53e:	80 81       	ld	r24, Z
     540:	89 30       	cpi	r24, 0x09	; 9
     542:	59 f4       	brne	.+22     	; 0x55a <calculator_negated1_handler+0x7e>
     544:	82 e0       	ldi	r24, 0x02	; 2
     546:	8a 83       	std	Y+2, r24	; 0x02
     548:	ee 81       	ldd	r30, Y+6	; 0x06
     54a:	ff 81       	ldd	r31, Y+7	; 0x07
     54c:	84 ef       	ldi	r24, 0xF4	; 244
     54e:	91 e0       	ldi	r25, 0x01	; 1
     550:	97 83       	std	Z+7, r25	; 0x07
     552:	86 83       	std	Z+6, r24	; 0x06
     554:	8a 81       	ldd	r24, Y+2	; 0x02
     556:	8a 87       	std	Y+10, r24	; 0x0a
     558:	1f c0       	rjmp	.+62     	; 0x598 <calculator_negated1_handler+0xbc>
	TRANSITION_ON(POINT,												TO(frac1),				NO_ACTION) ;
     55a:	e8 85       	ldd	r30, Y+8	; 0x08
     55c:	f9 85       	ldd	r31, Y+9	; 0x09
     55e:	80 81       	ld	r24, Z
     560:	8a 30       	cpi	r24, 0x0A	; 10
     562:	59 f4       	brne	.+22     	; 0x57a <calculator_negated1_handler+0x9e>
     564:	82 e0       	ldi	r24, 0x02	; 2
     566:	89 83       	std	Y+1, r24	; 0x01
     568:	ee 81       	ldd	r30, Y+6	; 0x06
     56a:	ff 81       	ldd	r31, Y+7	; 0x07
     56c:	8c e0       	ldi	r24, 0x0C	; 12
     56e:	92 e0       	ldi	r25, 0x02	; 2
     570:	97 83       	std	Z+7, r25	; 0x07
     572:	86 83       	std	Z+6, r24	; 0x06
     574:	89 81       	ldd	r24, Y+1	; 0x01
     576:	8a 87       	std	Y+10, r24	; 0x0a
     578:	0f c0       	rjmp	.+30     	; 0x598 <calculator_negated1_handler+0xbc>
	CONSUME_EVENT_IF(OPERATION,	IF(CAST_EVENT(keyEvent_t)->key == '-'),							NO_ACTION) ;
     57a:	e8 85       	ldd	r30, Y+8	; 0x08
     57c:	f9 85       	ldd	r31, Y+9	; 0x09
     57e:	80 81       	ld	r24, Z
     580:	8b 30       	cpi	r24, 0x0B	; 11
     582:	41 f4       	brne	.+16     	; 0x594 <calculator_negated1_handler+0xb8>
     584:	e8 85       	ldd	r30, Y+8	; 0x08
     586:	f9 85       	ldd	r31, Y+9	; 0x09
     588:	81 81       	ldd	r24, Z+1	; 0x01
     58a:	8d 32       	cpi	r24, 0x2D	; 45
     58c:	19 f4       	brne	.+6      	; 0x594 <calculator_negated1_handler+0xb8>
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	8a 87       	std	Y+10, r24	; 0x0a
     592:	02 c0       	rjmp	.+4      	; 0x598 <calculator_negated1_handler+0xbc>
}
END_DEFINE_STATE()
     594:	8d 81       	ldd	r24, Y+5	; 0x05
     596:	8a 87       	std	Y+10, r24	; 0x0a
     598:	8a 85       	ldd	r24, Y+10	; 0x0a
     59a:	2a 96       	adiw	r28, 0x0a	; 10
     59c:	0f b6       	in	r0, 0x3f	; 63
     59e:	f8 94       	cli
     5a0:	de bf       	out	0x3e, r29	; 62
     5a2:	0f be       	out	0x3f, r0	; 63
     5a4:	cd bf       	out	0x3d, r28	; 61
     5a6:	cf 91       	pop	r28
     5a8:	df 91       	pop	r29
     5aa:	08 95       	ret

000005ac <calculator_operand1_handler>:


DEFINE_STATE(operand1)
     5ac:	df 93       	push	r29
     5ae:	cf 93       	push	r28
     5b0:	cd b7       	in	r28, 0x3d	; 61
     5b2:	de b7       	in	r29, 0x3e	; 62
     5b4:	28 97       	sbiw	r28, 0x08	; 8
     5b6:	0f b6       	in	r0, 0x3f	; 63
     5b8:	f8 94       	cli
     5ba:	de bf       	out	0x3e, r29	; 62
     5bc:	0f be       	out	0x3f, r0	; 63
     5be:	cd bf       	out	0x3d, r28	; 61
     5c0:	9d 83       	std	Y+5, r25	; 0x05
     5c2:	8c 83       	std	Y+4, r24	; 0x04
     5c4:	7f 83       	std	Y+7, r23	; 0x07
     5c6:	6e 83       	std	Y+6, r22	; 0x06
     5c8:	1b 82       	std	Y+3, r1	; 0x03
{
	TRANSITION_ON(CLEAR_ENTRY,											TO(ready),				NO_ACTION) ;
     5ca:	ee 81       	ldd	r30, Y+6	; 0x06
     5cc:	ff 81       	ldd	r31, Y+7	; 0x07
     5ce:	80 81       	ld	r24, Z
     5d0:	87 30       	cpi	r24, 0x07	; 7
     5d2:	59 f4       	brne	.+22     	; 0x5ea <calculator_operand1_handler+0x3e>
     5d4:	82 e0       	ldi	r24, 0x02	; 2
     5d6:	8a 83       	std	Y+2, r24	; 0x02
     5d8:	ec 81       	ldd	r30, Y+4	; 0x04
     5da:	fd 81       	ldd	r31, Y+5	; 0x05
     5dc:	8e e5       	ldi	r24, 0x5E	; 94
     5de:	91 e0       	ldi	r25, 0x01	; 1
     5e0:	97 83       	std	Z+7, r25	; 0x07
     5e2:	86 83       	std	Z+6, r24	; 0x06
     5e4:	8a 81       	ldd	r24, Y+2	; 0x02
     5e6:	88 87       	std	Y+8, r24	; 0x08
     5e8:	12 c0       	rjmp	.+36     	; 0x60e <calculator_operand1_handler+0x62>
	TRANSITION_ON(OPERATION,											TO(opEntered),			NO_ACTION) ;
     5ea:	ee 81       	ldd	r30, Y+6	; 0x06
     5ec:	ff 81       	ldd	r31, Y+7	; 0x07
     5ee:	80 81       	ld	r24, Z
     5f0:	8b 30       	cpi	r24, 0x0B	; 11
     5f2:	59 f4       	brne	.+22     	; 0x60a <calculator_operand1_handler+0x5e>
     5f4:	82 e0       	ldi	r24, 0x02	; 2
     5f6:	89 83       	std	Y+1, r24	; 0x01
     5f8:	ec 81       	ldd	r30, Y+4	; 0x04
     5fa:	fd 81       	ldd	r31, Y+5	; 0x05
     5fc:	80 e4       	ldi	r24, 0x40	; 64
     5fe:	92 e0       	ldi	r25, 0x02	; 2
     600:	97 83       	std	Z+7, r25	; 0x07
     602:	86 83       	std	Z+6, r24	; 0x06
     604:	89 81       	ldd	r24, Y+1	; 0x01
     606:	88 87       	std	Y+8, r24	; 0x08
     608:	02 c0       	rjmp	.+4      	; 0x60e <calculator_operand1_handler+0x62>
}
END_DEFINE_STATE()
     60a:	8b 81       	ldd	r24, Y+3	; 0x03
     60c:	88 87       	std	Y+8, r24	; 0x08
     60e:	88 85       	ldd	r24, Y+8	; 0x08
     610:	28 96       	adiw	r28, 0x08	; 8
     612:	0f b6       	in	r0, 0x3f	; 63
     614:	f8 94       	cli
     616:	de bf       	out	0x3e, r29	; 62
     618:	0f be       	out	0x3f, r0	; 63
     61a:	cd bf       	out	0x3d, r28	; 61
     61c:	cf 91       	pop	r28
     61e:	df 91       	pop	r29
     620:	08 95       	ret

00000622 <calculator_zero1_handler>:


DEFINE_STATE(zero1)
     622:	df 93       	push	r29
     624:	cf 93       	push	r28
     626:	cd b7       	in	r28, 0x3d	; 61
     628:	de b7       	in	r29, 0x3e	; 62
     62a:	28 97       	sbiw	r28, 0x08	; 8
     62c:	0f b6       	in	r0, 0x3f	; 63
     62e:	f8 94       	cli
     630:	de bf       	out	0x3e, r29	; 62
     632:	0f be       	out	0x3f, r0	; 63
     634:	cd bf       	out	0x3d, r28	; 61
     636:	9d 83       	std	Y+5, r25	; 0x05
     638:	8c 83       	std	Y+4, r24	; 0x04
     63a:	7f 83       	std	Y+7, r23	; 0x07
     63c:	6e 83       	std	Y+6, r22	; 0x06
     63e:	1b 82       	std	Y+3, r1	; 0x03
{
	INITIAL_TRANSITION(TO(zero2),																NO_ACTION) ;
     640:	ee 81       	ldd	r30, Y+6	; 0x06
     642:	ff 81       	ldd	r31, Y+7	; 0x07
     644:	80 81       	ld	r24, Z
     646:	82 30       	cpi	r24, 0x02	; 2
     648:	49 f4       	brne	.+18     	; 0x65c <calculator_zero1_handler+0x3a>
     64a:	ec 81       	ldd	r30, Y+4	; 0x04
     64c:	fd 81       	ldd	r31, Y+5	; 0x05
     64e:	8e e8       	ldi	r24, 0x8E	; 142
     650:	92 e0       	ldi	r25, 0x02	; 2
     652:	97 83       	std	Z+7, r25	; 0x07
     654:	86 83       	std	Z+6, r24	; 0x06
     656:	82 e0       	ldi	r24, 0x02	; 2
     658:	88 87       	std	Y+8, r24	; 0x08
     65a:	2a c0       	rjmp	.+84     	; 0x6b0 <calculator_zero1_handler+0x8e>
	CONSUME_EVENT(DIGIT_0,																		NO_ACTION) ;
     65c:	ee 81       	ldd	r30, Y+6	; 0x06
     65e:	ff 81       	ldd	r31, Y+7	; 0x07
     660:	80 81       	ld	r24, Z
     662:	88 30       	cpi	r24, 0x08	; 8
     664:	19 f4       	brne	.+6      	; 0x66c <calculator_zero1_handler+0x4a>
     666:	81 e0       	ldi	r24, 0x01	; 1
     668:	88 87       	std	Y+8, r24	; 0x08
     66a:	22 c0       	rjmp	.+68     	; 0x6b0 <calculator_zero1_handler+0x8e>
	TRANSITION_ON(DIGIT_1_9,											TO(int1),				NO_ACTION) ;
     66c:	ee 81       	ldd	r30, Y+6	; 0x06
     66e:	ff 81       	ldd	r31, Y+7	; 0x07
     670:	80 81       	ld	r24, Z
     672:	89 30       	cpi	r24, 0x09	; 9
     674:	59 f4       	brne	.+22     	; 0x68c <calculator_zero1_handler+0x6a>
     676:	82 e0       	ldi	r24, 0x02	; 2
     678:	8a 83       	std	Y+2, r24	; 0x02
     67a:	ec 81       	ldd	r30, Y+4	; 0x04
     67c:	fd 81       	ldd	r31, Y+5	; 0x05
     67e:	84 ef       	ldi	r24, 0xF4	; 244
     680:	91 e0       	ldi	r25, 0x01	; 1
     682:	97 83       	std	Z+7, r25	; 0x07
     684:	86 83       	std	Z+6, r24	; 0x06
     686:	8a 81       	ldd	r24, Y+2	; 0x02
     688:	88 87       	std	Y+8, r24	; 0x08
     68a:	12 c0       	rjmp	.+36     	; 0x6b0 <calculator_zero1_handler+0x8e>
	TRANSITION_ON(POINT,												TO(frac1),				NO_ACTION) ;
     68c:	ee 81       	ldd	r30, Y+6	; 0x06
     68e:	ff 81       	ldd	r31, Y+7	; 0x07
     690:	80 81       	ld	r24, Z
     692:	8a 30       	cpi	r24, 0x0A	; 10
     694:	59 f4       	brne	.+22     	; 0x6ac <calculator_zero1_handler+0x8a>
     696:	82 e0       	ldi	r24, 0x02	; 2
     698:	89 83       	std	Y+1, r24	; 0x01
     69a:	ec 81       	ldd	r30, Y+4	; 0x04
     69c:	fd 81       	ldd	r31, Y+5	; 0x05
     69e:	8c e0       	ldi	r24, 0x0C	; 12
     6a0:	92 e0       	ldi	r25, 0x02	; 2
     6a2:	97 83       	std	Z+7, r25	; 0x07
     6a4:	86 83       	std	Z+6, r24	; 0x06
     6a6:	89 81       	ldd	r24, Y+1	; 0x01
     6a8:	88 87       	std	Y+8, r24	; 0x08
     6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <calculator_zero1_handler+0x8e>
}
END_DEFINE_STATE()
     6ac:	8b 81       	ldd	r24, Y+3	; 0x03
     6ae:	88 87       	std	Y+8, r24	; 0x08
     6b0:	88 85       	ldd	r24, Y+8	; 0x08
     6b2:	28 96       	adiw	r28, 0x08	; 8
     6b4:	0f b6       	in	r0, 0x3f	; 63
     6b6:	f8 94       	cli
     6b8:	de bf       	out	0x3e, r29	; 62
     6ba:	0f be       	out	0x3f, r0	; 63
     6bc:	cd bf       	out	0x3d, r28	; 61
     6be:	cf 91       	pop	r28
     6c0:	df 91       	pop	r29
     6c2:	08 95       	ret

000006c4 <calculator_int1_handler>:


DEFINE_STATE(int1)
     6c4:	df 93       	push	r29
     6c6:	cf 93       	push	r28
     6c8:	cd b7       	in	r28, 0x3d	; 61
     6ca:	de b7       	in	r29, 0x3e	; 62
     6cc:	27 97       	sbiw	r28, 0x07	; 7
     6ce:	0f b6       	in	r0, 0x3f	; 63
     6d0:	f8 94       	cli
     6d2:	de bf       	out	0x3e, r29	; 62
     6d4:	0f be       	out	0x3f, r0	; 63
     6d6:	cd bf       	out	0x3d, r28	; 61
     6d8:	9c 83       	std	Y+4, r25	; 0x04
     6da:	8b 83       	std	Y+3, r24	; 0x03
     6dc:	7e 83       	std	Y+6, r23	; 0x06
     6de:	6d 83       	std	Y+5, r22	; 0x05
     6e0:	1a 82       	std	Y+2, r1	; 0x02
{
	TRANSITION_ON(POINT,												TO(frac1),				NO_ACTION) ;
     6e2:	ed 81       	ldd	r30, Y+5	; 0x05
     6e4:	fe 81       	ldd	r31, Y+6	; 0x06
     6e6:	80 81       	ld	r24, Z
     6e8:	8a 30       	cpi	r24, 0x0A	; 10
     6ea:	59 f4       	brne	.+22     	; 0x702 <calculator_int1_handler+0x3e>
     6ec:	82 e0       	ldi	r24, 0x02	; 2
     6ee:	89 83       	std	Y+1, r24	; 0x01
     6f0:	eb 81       	ldd	r30, Y+3	; 0x03
     6f2:	fc 81       	ldd	r31, Y+4	; 0x04
     6f4:	8c e0       	ldi	r24, 0x0C	; 12
     6f6:	92 e0       	ldi	r25, 0x02	; 2
     6f8:	97 83       	std	Z+7, r25	; 0x07
     6fa:	86 83       	std	Z+6, r24	; 0x06
     6fc:	89 81       	ldd	r24, Y+1	; 0x01
     6fe:	8f 83       	std	Y+7, r24	; 0x07
     700:	02 c0       	rjmp	.+4      	; 0x706 <calculator_int1_handler+0x42>
}
END_DEFINE_STATE()
     702:	8a 81       	ldd	r24, Y+2	; 0x02
     704:	8f 83       	std	Y+7, r24	; 0x07
     706:	8f 81       	ldd	r24, Y+7	; 0x07
     708:	27 96       	adiw	r28, 0x07	; 7
     70a:	0f b6       	in	r0, 0x3f	; 63
     70c:	f8 94       	cli
     70e:	de bf       	out	0x3e, r29	; 62
     710:	0f be       	out	0x3f, r0	; 63
     712:	cd bf       	out	0x3d, r28	; 61
     714:	cf 91       	pop	r28
     716:	df 91       	pop	r29
     718:	08 95       	ret

0000071a <calculator_frac1_handler>:


DEFINE_STATE(frac1)
     71a:	df 93       	push	r29
     71c:	cf 93       	push	r28
     71e:	00 d0       	rcall	.+0      	; 0x720 <calculator_frac1_handler+0x6>
     720:	00 d0       	rcall	.+0      	; 0x722 <calculator_frac1_handler+0x8>
     722:	00 d0       	rcall	.+0      	; 0x724 <calculator_frac1_handler+0xa>
     724:	cd b7       	in	r28, 0x3d	; 61
     726:	de b7       	in	r29, 0x3e	; 62
     728:	9b 83       	std	Y+3, r25	; 0x03
     72a:	8a 83       	std	Y+2, r24	; 0x02
     72c:	7d 83       	std	Y+5, r23	; 0x05
     72e:	6c 83       	std	Y+4, r22	; 0x04
     730:	19 82       	std	Y+1, r1	; 0x01
{
	CONSUME_EVENT(POINT,																		NO_ACTION) ;
     732:	ec 81       	ldd	r30, Y+4	; 0x04
     734:	fd 81       	ldd	r31, Y+5	; 0x05
     736:	80 81       	ld	r24, Z
     738:	8a 30       	cpi	r24, 0x0A	; 10
     73a:	19 f4       	brne	.+6      	; 0x742 <calculator_frac1_handler+0x28>
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	8e 83       	std	Y+6, r24	; 0x06
     740:	02 c0       	rjmp	.+4      	; 0x746 <calculator_frac1_handler+0x2c>
}
END_DEFINE_STATE()
     742:	89 81       	ldd	r24, Y+1	; 0x01
     744:	8e 83       	std	Y+6, r24	; 0x06
     746:	8e 81       	ldd	r24, Y+6	; 0x06
     748:	26 96       	adiw	r28, 0x06	; 6
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	f8 94       	cli
     74e:	de bf       	out	0x3e, r29	; 62
     750:	0f be       	out	0x3f, r0	; 63
     752:	cd bf       	out	0x3d, r28	; 61
     754:	cf 91       	pop	r28
     756:	df 91       	pop	r29
     758:	08 95       	ret

0000075a <calculator_error_handler>:


DEFINE_STATE(error)
     75a:	df 93       	push	r29
     75c:	cf 93       	push	r28
     75e:	00 d0       	rcall	.+0      	; 0x760 <calculator_error_handler+0x6>
     760:	00 d0       	rcall	.+0      	; 0x762 <calculator_error_handler+0x8>
     762:	00 d0       	rcall	.+0      	; 0x764 <calculator_error_handler+0xa>
     764:	cd b7       	in	r28, 0x3d	; 61
     766:	de b7       	in	r29, 0x3e	; 62
     768:	9b 83       	std	Y+3, r25	; 0x03
     76a:	8a 83       	std	Y+2, r24	; 0x02
     76c:	7d 83       	std	Y+5, r23	; 0x05
     76e:	6c 83       	std	Y+4, r22	; 0x04
     770:	19 82       	std	Y+1, r1	; 0x01
{
	INITIAL_TRANSITION(TO(frac2),																NO_ACTION) ;
     772:	ec 81       	ldd	r30, Y+4	; 0x04
     774:	fd 81       	ldd	r31, Y+5	; 0x05
     776:	80 81       	ld	r24, Z
     778:	82 30       	cpi	r24, 0x02	; 2
     77a:	49 f4       	brne	.+18     	; 0x78e <calculator_error_handler+0x34>
     77c:	ea 81       	ldd	r30, Y+2	; 0x02
     77e:	fb 81       	ldd	r31, Y+3	; 0x03
     780:	8d eb       	ldi	r24, 0xBD	; 189
     782:	92 e0       	ldi	r25, 0x02	; 2
     784:	97 83       	std	Z+7, r25	; 0x07
     786:	86 83       	std	Z+6, r24	; 0x06
     788:	82 e0       	ldi	r24, 0x02	; 2
     78a:	8e 83       	std	Y+6, r24	; 0x06
     78c:	02 c0       	rjmp	.+4      	; 0x792 <calculator_error_handler+0x38>
}
END_DEFINE_STATE()
     78e:	89 81       	ldd	r24, Y+1	; 0x01
     790:	8e 83       	std	Y+6, r24	; 0x06
     792:	8e 81       	ldd	r24, Y+6	; 0x06
     794:	26 96       	adiw	r28, 0x06	; 6
     796:	0f b6       	in	r0, 0x3f	; 63
     798:	f8 94       	cli
     79a:	de bf       	out	0x3e, r29	; 62
     79c:	0f be       	out	0x3f, r0	; 63
     79e:	cd bf       	out	0x3d, r28	; 61
     7a0:	cf 91       	pop	r28
     7a2:	df 91       	pop	r29
     7a4:	08 95       	ret

000007a6 <calculator_opEntered_handler>:


DEFINE_STATE(opEntered)
     7a6:	df 93       	push	r29
     7a8:	cf 93       	push	r28
     7aa:	cd b7       	in	r28, 0x3d	; 61
     7ac:	de b7       	in	r29, 0x3e	; 62
     7ae:	2a 97       	sbiw	r28, 0x0a	; 10
     7b0:	0f b6       	in	r0, 0x3f	; 63
     7b2:	f8 94       	cli
     7b4:	de bf       	out	0x3e, r29	; 62
     7b6:	0f be       	out	0x3f, r0	; 63
     7b8:	cd bf       	out	0x3d, r28	; 61
     7ba:	9f 83       	std	Y+7, r25	; 0x07
     7bc:	8e 83       	std	Y+6, r24	; 0x06
     7be:	79 87       	std	Y+9, r23	; 0x09
     7c0:	68 87       	std	Y+8, r22	; 0x08
     7c2:	1d 82       	std	Y+5, r1	; 0x05
{
	TRANSITION_ON_IF(OPERATION,	IF(CAST_EVENT(keyEvent_t)->key == '-'),	TO(negated2),			NO_ACTION) ;
     7c4:	e8 85       	ldd	r30, Y+8	; 0x08
     7c6:	f9 85       	ldd	r31, Y+9	; 0x09
     7c8:	80 81       	ld	r24, Z
     7ca:	8b 30       	cpi	r24, 0x0B	; 11
     7cc:	81 f4       	brne	.+32     	; 0x7ee <calculator_opEntered_handler+0x48>
     7ce:	e8 85       	ldd	r30, Y+8	; 0x08
     7d0:	f9 85       	ldd	r31, Y+9	; 0x09
     7d2:	81 81       	ldd	r24, Z+1	; 0x01
     7d4:	8d 32       	cpi	r24, 0x2D	; 45
     7d6:	59 f4       	brne	.+22     	; 0x7ee <calculator_opEntered_handler+0x48>
     7d8:	82 e0       	ldi	r24, 0x02	; 2
     7da:	8c 83       	std	Y+4, r24	; 0x04
     7dc:	ee 81       	ldd	r30, Y+6	; 0x06
     7de:	ff 81       	ldd	r31, Y+7	; 0x07
     7e0:	8b e5       	ldi	r24, 0x5B	; 91
     7e2:	92 e0       	ldi	r25, 0x02	; 2
     7e4:	97 83       	std	Z+7, r25	; 0x07
     7e6:	86 83       	std	Z+6, r24	; 0x06
     7e8:	8c 81       	ldd	r24, Y+4	; 0x04
     7ea:	8a 87       	std	Y+10, r24	; 0x0a
     7ec:	32 c0       	rjmp	.+100    	; 0x852 <calculator_opEntered_handler+0xac>
	TRANSITION_ON(DIGIT_0,												TO(zero2),				NO_ACTION) ;
     7ee:	e8 85       	ldd	r30, Y+8	; 0x08
     7f0:	f9 85       	ldd	r31, Y+9	; 0x09
     7f2:	80 81       	ld	r24, Z
     7f4:	88 30       	cpi	r24, 0x08	; 8
     7f6:	59 f4       	brne	.+22     	; 0x80e <calculator_opEntered_handler+0x68>
     7f8:	82 e0       	ldi	r24, 0x02	; 2
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	ee 81       	ldd	r30, Y+6	; 0x06
     7fe:	ff 81       	ldd	r31, Y+7	; 0x07
     800:	8e e8       	ldi	r24, 0x8E	; 142
     802:	92 e0       	ldi	r25, 0x02	; 2
     804:	97 83       	std	Z+7, r25	; 0x07
     806:	86 83       	std	Z+6, r24	; 0x06
     808:	8b 81       	ldd	r24, Y+3	; 0x03
     80a:	8a 87       	std	Y+10, r24	; 0x0a
     80c:	22 c0       	rjmp	.+68     	; 0x852 <calculator_opEntered_handler+0xac>
	TRANSITION_ON(DIGIT_1_9,											TO(int2),				NO_ACTION) ;
     80e:	e8 85       	ldd	r30, Y+8	; 0x08
     810:	f9 85       	ldd	r31, Y+9	; 0x09
     812:	80 81       	ld	r24, Z
     814:	89 30       	cpi	r24, 0x09	; 9
     816:	59 f4       	brne	.+22     	; 0x82e <calculator_opEntered_handler+0x88>
     818:	82 e0       	ldi	r24, 0x02	; 2
     81a:	8a 83       	std	Y+2, r24	; 0x02
     81c:	ee 81       	ldd	r30, Y+6	; 0x06
     81e:	ff 81       	ldd	r31, Y+7	; 0x07
     820:	85 ea       	ldi	r24, 0xA5	; 165
     822:	92 e0       	ldi	r25, 0x02	; 2
     824:	97 83       	std	Z+7, r25	; 0x07
     826:	86 83       	std	Z+6, r24	; 0x06
     828:	8a 81       	ldd	r24, Y+2	; 0x02
     82a:	8a 87       	std	Y+10, r24	; 0x0a
     82c:	12 c0       	rjmp	.+36     	; 0x852 <calculator_opEntered_handler+0xac>
	TRANSITION_ON(POINT,												TO(frac2),				NO_ACTION) ;
     82e:	e8 85       	ldd	r30, Y+8	; 0x08
     830:	f9 85       	ldd	r31, Y+9	; 0x09
     832:	80 81       	ld	r24, Z
     834:	8a 30       	cpi	r24, 0x0A	; 10
     836:	59 f4       	brne	.+22     	; 0x84e <calculator_opEntered_handler+0xa8>
     838:	82 e0       	ldi	r24, 0x02	; 2
     83a:	89 83       	std	Y+1, r24	; 0x01
     83c:	ee 81       	ldd	r30, Y+6	; 0x06
     83e:	ff 81       	ldd	r31, Y+7	; 0x07
     840:	8d eb       	ldi	r24, 0xBD	; 189
     842:	92 e0       	ldi	r25, 0x02	; 2
     844:	97 83       	std	Z+7, r25	; 0x07
     846:	86 83       	std	Z+6, r24	; 0x06
     848:	89 81       	ldd	r24, Y+1	; 0x01
     84a:	8a 87       	std	Y+10, r24	; 0x0a
     84c:	02 c0       	rjmp	.+4      	; 0x852 <calculator_opEntered_handler+0xac>
}
END_DEFINE_STATE()
     84e:	8d 81       	ldd	r24, Y+5	; 0x05
     850:	8a 87       	std	Y+10, r24	; 0x0a
     852:	8a 85       	ldd	r24, Y+10	; 0x0a
     854:	2a 96       	adiw	r28, 0x0a	; 10
     856:	0f b6       	in	r0, 0x3f	; 63
     858:	f8 94       	cli
     85a:	de bf       	out	0x3e, r29	; 62
     85c:	0f be       	out	0x3f, r0	; 63
     85e:	cd bf       	out	0x3d, r28	; 61
     860:	cf 91       	pop	r28
     862:	df 91       	pop	r29
     864:	08 95       	ret

00000866 <calculator_negated2_handler>:


DEFINE_STATE(negated2)
     866:	df 93       	push	r29
     868:	cf 93       	push	r28
     86a:	cd b7       	in	r28, 0x3d	; 61
     86c:	de b7       	in	r29, 0x3e	; 62
     86e:	2a 97       	sbiw	r28, 0x0a	; 10
     870:	0f b6       	in	r0, 0x3f	; 63
     872:	f8 94       	cli
     874:	de bf       	out	0x3e, r29	; 62
     876:	0f be       	out	0x3f, r0	; 63
     878:	cd bf       	out	0x3d, r28	; 61
     87a:	9f 83       	std	Y+7, r25	; 0x07
     87c:	8e 83       	std	Y+6, r24	; 0x06
     87e:	79 87       	std	Y+9, r23	; 0x09
     880:	68 87       	std	Y+8, r22	; 0x08
     882:	1d 82       	std	Y+5, r1	; 0x05
{
	TRANSITION_ON(CLEAR_ENTRY,											TO(opEntered),			NO_ACTION) ;
     884:	e8 85       	ldd	r30, Y+8	; 0x08
     886:	f9 85       	ldd	r31, Y+9	; 0x09
     888:	80 81       	ld	r24, Z
     88a:	87 30       	cpi	r24, 0x07	; 7
     88c:	59 f4       	brne	.+22     	; 0x8a4 <calculator_negated2_handler+0x3e>
     88e:	82 e0       	ldi	r24, 0x02	; 2
     890:	8c 83       	std	Y+4, r24	; 0x04
     892:	ee 81       	ldd	r30, Y+6	; 0x06
     894:	ff 81       	ldd	r31, Y+7	; 0x07
     896:	80 e4       	ldi	r24, 0x40	; 64
     898:	92 e0       	ldi	r25, 0x02	; 2
     89a:	97 83       	std	Z+7, r25	; 0x07
     89c:	86 83       	std	Z+6, r24	; 0x06
     89e:	8c 81       	ldd	r24, Y+4	; 0x04
     8a0:	8a 87       	std	Y+10, r24	; 0x0a
     8a2:	3f c0       	rjmp	.+126    	; 0x922 <calculator_negated2_handler+0xbc>
	TRANSITION_ON(DIGIT_0,												TO(zero2),				NO_ACTION) ;
     8a4:	e8 85       	ldd	r30, Y+8	; 0x08
     8a6:	f9 85       	ldd	r31, Y+9	; 0x09
     8a8:	80 81       	ld	r24, Z
     8aa:	88 30       	cpi	r24, 0x08	; 8
     8ac:	59 f4       	brne	.+22     	; 0x8c4 <calculator_negated2_handler+0x5e>
     8ae:	82 e0       	ldi	r24, 0x02	; 2
     8b0:	8b 83       	std	Y+3, r24	; 0x03
     8b2:	ee 81       	ldd	r30, Y+6	; 0x06
     8b4:	ff 81       	ldd	r31, Y+7	; 0x07
     8b6:	8e e8       	ldi	r24, 0x8E	; 142
     8b8:	92 e0       	ldi	r25, 0x02	; 2
     8ba:	97 83       	std	Z+7, r25	; 0x07
     8bc:	86 83       	std	Z+6, r24	; 0x06
     8be:	8b 81       	ldd	r24, Y+3	; 0x03
     8c0:	8a 87       	std	Y+10, r24	; 0x0a
     8c2:	2f c0       	rjmp	.+94     	; 0x922 <calculator_negated2_handler+0xbc>
	TRANSITION_ON(DIGIT_1_9,											TO(int2),				NO_ACTION) ;
     8c4:	e8 85       	ldd	r30, Y+8	; 0x08
     8c6:	f9 85       	ldd	r31, Y+9	; 0x09
     8c8:	80 81       	ld	r24, Z
     8ca:	89 30       	cpi	r24, 0x09	; 9
     8cc:	59 f4       	brne	.+22     	; 0x8e4 <calculator_negated2_handler+0x7e>
     8ce:	82 e0       	ldi	r24, 0x02	; 2
     8d0:	8a 83       	std	Y+2, r24	; 0x02
     8d2:	ee 81       	ldd	r30, Y+6	; 0x06
     8d4:	ff 81       	ldd	r31, Y+7	; 0x07
     8d6:	85 ea       	ldi	r24, 0xA5	; 165
     8d8:	92 e0       	ldi	r25, 0x02	; 2
     8da:	97 83       	std	Z+7, r25	; 0x07
     8dc:	86 83       	std	Z+6, r24	; 0x06
     8de:	8a 81       	ldd	r24, Y+2	; 0x02
     8e0:	8a 87       	std	Y+10, r24	; 0x0a
     8e2:	1f c0       	rjmp	.+62     	; 0x922 <calculator_negated2_handler+0xbc>
	TRANSITION_ON(POINT,												TO(frac2),				NO_ACTION) ;
     8e4:	e8 85       	ldd	r30, Y+8	; 0x08
     8e6:	f9 85       	ldd	r31, Y+9	; 0x09
     8e8:	80 81       	ld	r24, Z
     8ea:	8a 30       	cpi	r24, 0x0A	; 10
     8ec:	59 f4       	brne	.+22     	; 0x904 <calculator_negated2_handler+0x9e>
     8ee:	82 e0       	ldi	r24, 0x02	; 2
     8f0:	89 83       	std	Y+1, r24	; 0x01
     8f2:	ee 81       	ldd	r30, Y+6	; 0x06
     8f4:	ff 81       	ldd	r31, Y+7	; 0x07
     8f6:	8d eb       	ldi	r24, 0xBD	; 189
     8f8:	92 e0       	ldi	r25, 0x02	; 2
     8fa:	97 83       	std	Z+7, r25	; 0x07
     8fc:	86 83       	std	Z+6, r24	; 0x06
     8fe:	89 81       	ldd	r24, Y+1	; 0x01
     900:	8a 87       	std	Y+10, r24	; 0x0a
     902:	0f c0       	rjmp	.+30     	; 0x922 <calculator_negated2_handler+0xbc>
	CONSUME_EVENT_IF(OPERATION,	IF(CAST_EVENT(keyEvent_t)->key == '-'),							NO_ACTION) ;
     904:	e8 85       	ldd	r30, Y+8	; 0x08
     906:	f9 85       	ldd	r31, Y+9	; 0x09
     908:	80 81       	ld	r24, Z
     90a:	8b 30       	cpi	r24, 0x0B	; 11
     90c:	41 f4       	brne	.+16     	; 0x91e <calculator_negated2_handler+0xb8>
     90e:	e8 85       	ldd	r30, Y+8	; 0x08
     910:	f9 85       	ldd	r31, Y+9	; 0x09
     912:	81 81       	ldd	r24, Z+1	; 0x01
     914:	8d 32       	cpi	r24, 0x2D	; 45
     916:	19 f4       	brne	.+6      	; 0x91e <calculator_negated2_handler+0xb8>
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	8a 87       	std	Y+10, r24	; 0x0a
     91c:	02 c0       	rjmp	.+4      	; 0x922 <calculator_negated2_handler+0xbc>
}
END_DEFINE_STATE()
     91e:	8d 81       	ldd	r24, Y+5	; 0x05
     920:	8a 87       	std	Y+10, r24	; 0x0a
     922:	8a 85       	ldd	r24, Y+10	; 0x0a
     924:	2a 96       	adiw	r28, 0x0a	; 10
     926:	0f b6       	in	r0, 0x3f	; 63
     928:	f8 94       	cli
     92a:	de bf       	out	0x3e, r29	; 62
     92c:	0f be       	out	0x3f, r0	; 63
     92e:	cd bf       	out	0x3d, r28	; 61
     930:	cf 91       	pop	r28
     932:	df 91       	pop	r29
     934:	08 95       	ret

00000936 <doCalculation>:


uint8_t doCalculation(	uint8_t type)
{
     936:	df 93       	push	r29
     938:	cf 93       	push	r28
     93a:	00 d0       	rcall	.+0      	; 0x93c <doCalculation+0x6>
     93c:	00 d0       	rcall	.+0      	; 0x93e <doCalculation+0x8>
     93e:	cd b7       	in	r28, 0x3d	; 61
     940:	de b7       	in	r29, 0x3e	; 62
     942:	89 83       	std	Y+1, r24	; 0x01
	switch(type)
     944:	89 81       	ldd	r24, Y+1	; 0x01
     946:	28 2f       	mov	r18, r24
     948:	30 e0       	ldi	r19, 0x00	; 0
     94a:	3c 83       	std	Y+4, r19	; 0x04
     94c:	2b 83       	std	Y+3, r18	; 0x03
     94e:	8b 81       	ldd	r24, Y+3	; 0x03
     950:	9c 81       	ldd	r25, Y+4	; 0x04
     952:	8b 32       	cpi	r24, 0x2B	; 43
     954:	91 05       	cpc	r25, r1
     956:	b1 f0       	breq	.+44     	; 0x984 <doCalculation+0x4e>
     958:	2b 81       	ldd	r18, Y+3	; 0x03
     95a:	3c 81       	ldd	r19, Y+4	; 0x04
     95c:	2c 32       	cpi	r18, 0x2C	; 44
     95e:	31 05       	cpc	r19, r1
     960:	34 f4       	brge	.+12     	; 0x96e <doCalculation+0x38>
     962:	8b 81       	ldd	r24, Y+3	; 0x03
     964:	9c 81       	ldd	r25, Y+4	; 0x04
     966:	8a 32       	cpi	r24, 0x2A	; 42
     968:	91 05       	cpc	r25, r1
     96a:	91 f0       	breq	.+36     	; 0x990 <doCalculation+0x5a>
     96c:	17 c0       	rjmp	.+46     	; 0x99c <doCalculation+0x66>
     96e:	2b 81       	ldd	r18, Y+3	; 0x03
     970:	3c 81       	ldd	r19, Y+4	; 0x04
     972:	2d 32       	cpi	r18, 0x2D	; 45
     974:	31 05       	cpc	r19, r1
     976:	49 f0       	breq	.+18     	; 0x98a <doCalculation+0x54>
     978:	8b 81       	ldd	r24, Y+3	; 0x03
     97a:	9c 81       	ldd	r25, Y+4	; 0x04
     97c:	8f 32       	cpi	r24, 0x2F	; 47
     97e:	91 05       	cpc	r25, r1
     980:	51 f0       	breq	.+20     	; 0x996 <doCalculation+0x60>
     982:	0c c0       	rjmp	.+24     	; 0x99c <doCalculation+0x66>
	{
		case '+': { return true ; }
     984:	91 e0       	ldi	r25, 0x01	; 1
     986:	9a 83       	std	Y+2, r25	; 0x02
     988:	0a c0       	rjmp	.+20     	; 0x99e <doCalculation+0x68>
		case '-': { return true ; }
     98a:	21 e0       	ldi	r18, 0x01	; 1
     98c:	2a 83       	std	Y+2, r18	; 0x02
     98e:	07 c0       	rjmp	.+14     	; 0x99e <doCalculation+0x68>
		case '*': { return true ; }
     990:	31 e0       	ldi	r19, 0x01	; 1
     992:	3a 83       	std	Y+2, r19	; 0x02
     994:	04 c0       	rjmp	.+8      	; 0x99e <doCalculation+0x68>
		case '/': { return true ; }
     996:	81 e0       	ldi	r24, 0x01	; 1
     998:	8a 83       	std	Y+2, r24	; 0x02
     99a:	01 c0       	rjmp	.+2      	; 0x99e <doCalculation+0x68>
		default:  { return false ; }
     99c:	1a 82       	std	Y+2, r1	; 0x02
     99e:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
     9a0:	0f 90       	pop	r0
     9a2:	0f 90       	pop	r0
     9a4:	0f 90       	pop	r0
     9a6:	0f 90       	pop	r0
     9a8:	cf 91       	pop	r28
     9aa:	df 91       	pop	r29
     9ac:	08 95       	ret

000009ae <calculator_operand2_handler>:


DEFINE_STATE(operand2)
     9ae:	df 93       	push	r29
     9b0:	cf 93       	push	r28
     9b2:	cd b7       	in	r28, 0x3d	; 61
     9b4:	de b7       	in	r29, 0x3e	; 62
     9b6:	2b 97       	sbiw	r28, 0x0b	; 11
     9b8:	0f b6       	in	r0, 0x3f	; 63
     9ba:	f8 94       	cli
     9bc:	de bf       	out	0x3e, r29	; 62
     9be:	0f be       	out	0x3f, r0	; 63
     9c0:	cd bf       	out	0x3d, r28	; 61
     9c2:	98 87       	std	Y+8, r25	; 0x08
     9c4:	8f 83       	std	Y+7, r24	; 0x07
     9c6:	7a 87       	std	Y+10, r23	; 0x0a
     9c8:	69 87       	std	Y+9, r22	; 0x09
     9ca:	1e 82       	std	Y+6, r1	; 0x06
{
	TRANSITION_ON(CLEAR_ENTRY,											TO(opEntered),			NO_ACTION) ;
     9cc:	e9 85       	ldd	r30, Y+9	; 0x09
     9ce:	fa 85       	ldd	r31, Y+10	; 0x0a
     9d0:	80 81       	ld	r24, Z
     9d2:	87 30       	cpi	r24, 0x07	; 7
     9d4:	59 f4       	brne	.+22     	; 0x9ec <calculator_operand2_handler+0x3e>
     9d6:	82 e0       	ldi	r24, 0x02	; 2
     9d8:	8d 83       	std	Y+5, r24	; 0x05
     9da:	ef 81       	ldd	r30, Y+7	; 0x07
     9dc:	f8 85       	ldd	r31, Y+8	; 0x08
     9de:	80 e4       	ldi	r24, 0x40	; 64
     9e0:	92 e0       	ldi	r25, 0x02	; 2
     9e2:	97 83       	std	Z+7, r25	; 0x07
     9e4:	86 83       	std	Z+6, r24	; 0x06
     9e6:	8d 81       	ldd	r24, Y+5	; 0x05
     9e8:	8b 87       	std	Y+11, r24	; 0x0b
     9ea:	42 c0       	rjmp	.+132    	; 0xa70 <calculator_operand2_handler+0xc2>

	HANDLE_STATE_EVENTS
     9ec:	e9 85       	ldd	r30, Y+9	; 0x09
     9ee:	fa 85       	ldd	r31, Y+10	; 0x0a
     9f0:	80 81       	ld	r24, Z
     9f2:	88 2f       	mov	r24, r24
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	0b 97       	sbiw	r24, 0x0b	; 11
     9f8:	82 30       	cpi	r24, 0x02	; 2
     9fa:	91 05       	cpc	r25, r1
     9fc:	b8 f5       	brcc	.+110    	; 0xa6c <calculator_operand2_handler+0xbe>
	{
		EVENT(OPERATION)
		EVENT(EQUALS)
		{
			uint8_t goodCalc = doCalculation(CAST_EVENT(keyEvent_t)->key) ;
     9fe:	e9 85       	ldd	r30, Y+9	; 0x09
     a00:	fa 85       	ldd	r31, Y+10	; 0x0a
     a02:	81 81       	ldd	r24, Z+1	; 0x01
     a04:	0e 94 9b 04 	call	0x936	; 0x936 <doCalculation>
     a08:	8c 83       	std	Y+4, r24	; 0x04

			if(goodCalc)
     a0a:	8c 81       	ldd	r24, Y+4	; 0x04
     a0c:	88 23       	and	r24, r24
     a0e:	19 f1       	breq	.+70     	; 0xa56 <calculator_operand2_handler+0xa8>
			{
				TRANSITION_ON(OPERATION,								TO(opEntered),			NO_ACTION) ;
     a10:	e9 85       	ldd	r30, Y+9	; 0x09
     a12:	fa 85       	ldd	r31, Y+10	; 0x0a
     a14:	80 81       	ld	r24, Z
     a16:	8b 30       	cpi	r24, 0x0B	; 11
     a18:	59 f4       	brne	.+22     	; 0xa30 <calculator_operand2_handler+0x82>
     a1a:	82 e0       	ldi	r24, 0x02	; 2
     a1c:	8b 83       	std	Y+3, r24	; 0x03
     a1e:	ef 81       	ldd	r30, Y+7	; 0x07
     a20:	f8 85       	ldd	r31, Y+8	; 0x08
     a22:	80 e4       	ldi	r24, 0x40	; 64
     a24:	92 e0       	ldi	r25, 0x02	; 2
     a26:	97 83       	std	Z+7, r25	; 0x07
     a28:	86 83       	std	Z+6, r24	; 0x06
     a2a:	8b 81       	ldd	r24, Y+3	; 0x03
     a2c:	8b 87       	std	Y+11, r24	; 0x0b
     a2e:	20 c0       	rjmp	.+64     	; 0xa70 <calculator_operand2_handler+0xc2>
				TRANSITION_ON(EQUALS,									TO(result),				NO_ACTION) ;
     a30:	e9 85       	ldd	r30, Y+9	; 0x09
     a32:	fa 85       	ldd	r31, Y+10	; 0x0a
     a34:	80 81       	ld	r24, Z
     a36:	8c 30       	cpi	r24, 0x0C	; 12
     a38:	59 f4       	brne	.+22     	; 0xa50 <calculator_operand2_handler+0xa2>
     a3a:	82 e0       	ldi	r24, 0x02	; 2
     a3c:	8a 83       	std	Y+2, r24	; 0x02
     a3e:	ef 81       	ldd	r30, Y+7	; 0x07
     a40:	f8 85       	ldd	r31, Y+8	; 0x08
     a42:	87 e7       	ldi	r24, 0x77	; 119
     a44:	91 e0       	ldi	r25, 0x01	; 1
     a46:	97 83       	std	Z+7, r25	; 0x07
     a48:	86 83       	std	Z+6, r24	; 0x06
     a4a:	8a 81       	ldd	r24, Y+2	; 0x02
     a4c:	8b 87       	std	Y+11, r24	; 0x0b
     a4e:	10 c0       	rjmp	.+32     	; 0xa70 <calculator_operand2_handler+0xc2>
			else
			{
				TRANSITION_TO(error, NO_ACTION) ;
			}
		}
		EVENT_HANDLED
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	8b 87       	std	Y+11, r24	; 0x0b
     a54:	0d c0       	rjmp	.+26     	; 0xa70 <calculator_operand2_handler+0xc2>
				TRANSITION_ON(OPERATION,								TO(opEntered),			NO_ACTION) ;
				TRANSITION_ON(EQUALS,									TO(result),				NO_ACTION) ;
			}
			else
			{
				TRANSITION_TO(error, NO_ACTION) ;
     a56:	82 e0       	ldi	r24, 0x02	; 2
     a58:	89 83       	std	Y+1, r24	; 0x01
     a5a:	ef 81       	ldd	r30, Y+7	; 0x07
     a5c:	f8 85       	ldd	r31, Y+8	; 0x08
     a5e:	84 e2       	ldi	r24, 0x24	; 36
     a60:	92 e0       	ldi	r25, 0x02	; 2
     a62:	97 83       	std	Z+7, r25	; 0x07
     a64:	86 83       	std	Z+6, r24	; 0x06
     a66:	89 81       	ldd	r24, Y+1	; 0x01
     a68:	8b 87       	std	Y+11, r24	; 0x0b
     a6a:	02 c0       	rjmp	.+4      	; 0xa70 <calculator_operand2_handler+0xc2>
		}
		EVENT_HANDLED
	}
	HANDLE_STATE_EVENTS_DONE
}
END_DEFINE_STATE()
     a6c:	8e 81       	ldd	r24, Y+6	; 0x06
     a6e:	8b 87       	std	Y+11, r24	; 0x0b
     a70:	8b 85       	ldd	r24, Y+11	; 0x0b
     a72:	2b 96       	adiw	r28, 0x0b	; 11
     a74:	0f b6       	in	r0, 0x3f	; 63
     a76:	f8 94       	cli
     a78:	de bf       	out	0x3e, r29	; 62
     a7a:	0f be       	out	0x3f, r0	; 63
     a7c:	cd bf       	out	0x3d, r28	; 61
     a7e:	cf 91       	pop	r28
     a80:	df 91       	pop	r29
     a82:	08 95       	ret

00000a84 <calculator_zero2_handler>:


DEFINE_STATE(zero2)
     a84:	df 93       	push	r29
     a86:	cf 93       	push	r28
     a88:	cd b7       	in	r28, 0x3d	; 61
     a8a:	de b7       	in	r29, 0x3e	; 62
     a8c:	28 97       	sbiw	r28, 0x08	; 8
     a8e:	0f b6       	in	r0, 0x3f	; 63
     a90:	f8 94       	cli
     a92:	de bf       	out	0x3e, r29	; 62
     a94:	0f be       	out	0x3f, r0	; 63
     a96:	cd bf       	out	0x3d, r28	; 61
     a98:	9d 83       	std	Y+5, r25	; 0x05
     a9a:	8c 83       	std	Y+4, r24	; 0x04
     a9c:	7f 83       	std	Y+7, r23	; 0x07
     a9e:	6e 83       	std	Y+6, r22	; 0x06
     aa0:	1b 82       	std	Y+3, r1	; 0x03
{
	INITIAL_TRANSITION(TO(negated1),															NO_ACTION) ;
     aa2:	ee 81       	ldd	r30, Y+6	; 0x06
     aa4:	ff 81       	ldd	r31, Y+7	; 0x07
     aa6:	80 81       	ld	r24, Z
     aa8:	82 30       	cpi	r24, 0x02	; 2
     aaa:	49 f4       	brne	.+18     	; 0xabe <calculator_zero2_handler+0x3a>
     aac:	ec 81       	ldd	r30, Y+4	; 0x04
     aae:	fd 81       	ldd	r31, Y+5	; 0x05
     ab0:	8a ea       	ldi	r24, 0xAA	; 170
     ab2:	91 e0       	ldi	r25, 0x01	; 1
     ab4:	97 83       	std	Z+7, r25	; 0x07
     ab6:	86 83       	std	Z+6, r24	; 0x06
     ab8:	82 e0       	ldi	r24, 0x02	; 2
     aba:	88 87       	std	Y+8, r24	; 0x08
     abc:	2a c0       	rjmp	.+84     	; 0xb12 <calculator_zero2_handler+0x8e>
	CONSUME_EVENT(DIGIT_0,																		NO_ACTION) ;
     abe:	ee 81       	ldd	r30, Y+6	; 0x06
     ac0:	ff 81       	ldd	r31, Y+7	; 0x07
     ac2:	80 81       	ld	r24, Z
     ac4:	88 30       	cpi	r24, 0x08	; 8
     ac6:	19 f4       	brne	.+6      	; 0xace <calculator_zero2_handler+0x4a>
     ac8:	81 e0       	ldi	r24, 0x01	; 1
     aca:	88 87       	std	Y+8, r24	; 0x08
     acc:	22 c0       	rjmp	.+68     	; 0xb12 <calculator_zero2_handler+0x8e>
	TRANSITION_ON(DIGIT_1_9,											TO(int2),				NO_ACTION) ;
     ace:	ee 81       	ldd	r30, Y+6	; 0x06
     ad0:	ff 81       	ldd	r31, Y+7	; 0x07
     ad2:	80 81       	ld	r24, Z
     ad4:	89 30       	cpi	r24, 0x09	; 9
     ad6:	59 f4       	brne	.+22     	; 0xaee <calculator_zero2_handler+0x6a>
     ad8:	82 e0       	ldi	r24, 0x02	; 2
     ada:	8a 83       	std	Y+2, r24	; 0x02
     adc:	ec 81       	ldd	r30, Y+4	; 0x04
     ade:	fd 81       	ldd	r31, Y+5	; 0x05
     ae0:	85 ea       	ldi	r24, 0xA5	; 165
     ae2:	92 e0       	ldi	r25, 0x02	; 2
     ae4:	97 83       	std	Z+7, r25	; 0x07
     ae6:	86 83       	std	Z+6, r24	; 0x06
     ae8:	8a 81       	ldd	r24, Y+2	; 0x02
     aea:	88 87       	std	Y+8, r24	; 0x08
     aec:	12 c0       	rjmp	.+36     	; 0xb12 <calculator_zero2_handler+0x8e>
	TRANSITION_ON(POINT,												TO(frac2),				NO_ACTION) ;
     aee:	ee 81       	ldd	r30, Y+6	; 0x06
     af0:	ff 81       	ldd	r31, Y+7	; 0x07
     af2:	80 81       	ld	r24, Z
     af4:	8a 30       	cpi	r24, 0x0A	; 10
     af6:	59 f4       	brne	.+22     	; 0xb0e <calculator_zero2_handler+0x8a>
     af8:	82 e0       	ldi	r24, 0x02	; 2
     afa:	89 83       	std	Y+1, r24	; 0x01
     afc:	ec 81       	ldd	r30, Y+4	; 0x04
     afe:	fd 81       	ldd	r31, Y+5	; 0x05
     b00:	8d eb       	ldi	r24, 0xBD	; 189
     b02:	92 e0       	ldi	r25, 0x02	; 2
     b04:	97 83       	std	Z+7, r25	; 0x07
     b06:	86 83       	std	Z+6, r24	; 0x06
     b08:	89 81       	ldd	r24, Y+1	; 0x01
     b0a:	88 87       	std	Y+8, r24	; 0x08
     b0c:	02 c0       	rjmp	.+4      	; 0xb12 <calculator_zero2_handler+0x8e>
}
END_DEFINE_STATE()
     b0e:	8b 81       	ldd	r24, Y+3	; 0x03
     b10:	88 87       	std	Y+8, r24	; 0x08
     b12:	88 85       	ldd	r24, Y+8	; 0x08
     b14:	28 96       	adiw	r28, 0x08	; 8
     b16:	0f b6       	in	r0, 0x3f	; 63
     b18:	f8 94       	cli
     b1a:	de bf       	out	0x3e, r29	; 62
     b1c:	0f be       	out	0x3f, r0	; 63
     b1e:	cd bf       	out	0x3d, r28	; 61
     b20:	cf 91       	pop	r28
     b22:	df 91       	pop	r29
     b24:	08 95       	ret

00000b26 <calculator_int2_handler>:


DEFINE_STATE(int2)
     b26:	df 93       	push	r29
     b28:	cf 93       	push	r28
     b2a:	cd b7       	in	r28, 0x3d	; 61
     b2c:	de b7       	in	r29, 0x3e	; 62
     b2e:	27 97       	sbiw	r28, 0x07	; 7
     b30:	0f b6       	in	r0, 0x3f	; 63
     b32:	f8 94       	cli
     b34:	de bf       	out	0x3e, r29	; 62
     b36:	0f be       	out	0x3f, r0	; 63
     b38:	cd bf       	out	0x3d, r28	; 61
     b3a:	9c 83       	std	Y+4, r25	; 0x04
     b3c:	8b 83       	std	Y+3, r24	; 0x03
     b3e:	7e 83       	std	Y+6, r23	; 0x06
     b40:	6d 83       	std	Y+5, r22	; 0x05
     b42:	1a 82       	std	Y+2, r1	; 0x02
{
	TRANSITION_ON(POINT,												TO(frac2),				NO_ACTION) ;
     b44:	ed 81       	ldd	r30, Y+5	; 0x05
     b46:	fe 81       	ldd	r31, Y+6	; 0x06
     b48:	80 81       	ld	r24, Z
     b4a:	8a 30       	cpi	r24, 0x0A	; 10
     b4c:	59 f4       	brne	.+22     	; 0xb64 <calculator_int2_handler+0x3e>
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	89 83       	std	Y+1, r24	; 0x01
     b52:	eb 81       	ldd	r30, Y+3	; 0x03
     b54:	fc 81       	ldd	r31, Y+4	; 0x04
     b56:	8d eb       	ldi	r24, 0xBD	; 189
     b58:	92 e0       	ldi	r25, 0x02	; 2
     b5a:	97 83       	std	Z+7, r25	; 0x07
     b5c:	86 83       	std	Z+6, r24	; 0x06
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
     b60:	8f 83       	std	Y+7, r24	; 0x07
     b62:	02 c0       	rjmp	.+4      	; 0xb68 <calculator_int2_handler+0x42>
}
END_DEFINE_STATE()
     b64:	8a 81       	ldd	r24, Y+2	; 0x02
     b66:	8f 83       	std	Y+7, r24	; 0x07
     b68:	8f 81       	ldd	r24, Y+7	; 0x07
     b6a:	27 96       	adiw	r28, 0x07	; 7
     b6c:	0f b6       	in	r0, 0x3f	; 63
     b6e:	f8 94       	cli
     b70:	de bf       	out	0x3e, r29	; 62
     b72:	0f be       	out	0x3f, r0	; 63
     b74:	cd bf       	out	0x3d, r28	; 61
     b76:	cf 91       	pop	r28
     b78:	df 91       	pop	r29
     b7a:	08 95       	ret

00000b7c <calculator_frac2_handler>:


DEFINE_STATE(frac2)
     b7c:	df 93       	push	r29
     b7e:	cf 93       	push	r28
     b80:	00 d0       	rcall	.+0      	; 0xb82 <calculator_frac2_handler+0x6>
     b82:	00 d0       	rcall	.+0      	; 0xb84 <calculator_frac2_handler+0x8>
     b84:	00 d0       	rcall	.+0      	; 0xb86 <calculator_frac2_handler+0xa>
     b86:	cd b7       	in	r28, 0x3d	; 61
     b88:	de b7       	in	r29, 0x3e	; 62
     b8a:	9b 83       	std	Y+3, r25	; 0x03
     b8c:	8a 83       	std	Y+2, r24	; 0x02
     b8e:	7d 83       	std	Y+5, r23	; 0x05
     b90:	6c 83       	std	Y+4, r22	; 0x04
     b92:	19 82       	std	Y+1, r1	; 0x01
{
	CONSUME_EVENT(POINT,																		NO_ACTION) ;
     b94:	ec 81       	ldd	r30, Y+4	; 0x04
     b96:	fd 81       	ldd	r31, Y+5	; 0x05
     b98:	80 81       	ld	r24, Z
     b9a:	8a 30       	cpi	r24, 0x0A	; 10
     b9c:	19 f4       	brne	.+6      	; 0xba4 <calculator_frac2_handler+0x28>
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	8e 83       	std	Y+6, r24	; 0x06
     ba2:	02 c0       	rjmp	.+4      	; 0xba8 <calculator_frac2_handler+0x2c>
}
END_DEFINE_STATE()
     ba4:	89 81       	ldd	r24, Y+1	; 0x01
     ba6:	8e 83       	std	Y+6, r24	; 0x06
     ba8:	8e 81       	ldd	r24, Y+6	; 0x06
     baa:	26 96       	adiw	r28, 0x06	; 6
     bac:	0f b6       	in	r0, 0x3f	; 63
     bae:	f8 94       	cli
     bb0:	de bf       	out	0x3e, r29	; 62
     bb2:	0f be       	out	0x3f, r0	; 63
     bb4:	cd bf       	out	0x3d, r28	; 61
     bb6:	cf 91       	pop	r28
     bb8:	df 91       	pop	r29
     bba:	08 95       	ret

00000bbc <timeBomb_getEventQueueDepth>:
		uint8_t		timeout ;
		uint8_t		codeBeingEntered ;
		uint8_t		disarmCode ;
	END_STATE_MACHINE_VARIABLES() ;

	SET_EVENT_QUEUE_DEPTH(config_tbEVENT_QUEUE_DEPTH) ;
     bbc:	df 93       	push	r29
     bbe:	cf 93       	push	r28
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
     bc4:	80 e1       	ldi	r24, 0x10	; 16
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	cf 91       	pop	r28
     bca:	df 91       	pop	r29
     bcc:	08 95       	ret

00000bce <timeBomb_constructor>:

	ADD_SUB_STATE(timing, PARENT_STATE(TOP)) ;

	ADD_CHOICE_PSEUDO_STATE(isTimeToGoBoom, PARENT_STATE(TOP)) ;

END_STATE_MACHINE_DEFINITION() ;
     bce:	df 93       	push	r29
     bd0:	cf 93       	push	r28
     bd2:	00 d0       	rcall	.+0      	; 0xbd4 <timeBomb_constructor+0x6>
     bd4:	cd b7       	in	r28, 0x3d	; 61
     bd6:	de b7       	in	r29, 0x3e	; 62
     bd8:	9a 83       	std	Y+2, r25	; 0x02
     bda:	89 83       	std	Y+1, r24	; 0x01
     bdc:	e9 81       	ldd	r30, Y+1	; 0x01
     bde:	fa 81       	ldd	r31, Y+2	; 0x02
     be0:	8c ed       	ldi	r24, 0xDC	; 220
     be2:	92 e0       	ldi	r25, 0x02	; 2
     be4:	91 83       	std	Z+1, r25	; 0x01
     be6:	80 83       	st	Z, r24
     be8:	e9 81       	ldd	r30, Y+1	; 0x01
     bea:	fa 81       	ldd	r31, Y+2	; 0x02
     bec:	8c ed       	ldi	r24, 0xDC	; 220
     bee:	92 e0       	ldi	r25, 0x02	; 2
     bf0:	95 83       	std	Z+5, r25	; 0x05
     bf2:	84 83       	std	Z+4, r24	; 0x04
     bf4:	80 91 cd 02 	lds	r24, 0x02CD
     bf8:	90 91 ce 02 	lds	r25, 0x02CE
     bfc:	e9 81       	ldd	r30, Y+1	; 0x01
     bfe:	fa 81       	ldd	r31, Y+2	; 0x02
     c00:	93 83       	std	Z+3, r25	; 0x03
     c02:	82 83       	std	Z+2, r24	; 0x02
     c04:	89 81       	ldd	r24, Y+1	; 0x01
     c06:	9a 81       	ldd	r25, Y+2	; 0x02
     c08:	0e 94 2d 06 	call	0xc5a	; 0xc5a <timeBomb_constructor2>
     c0c:	0f 90       	pop	r0
     c0e:	0f 90       	pop	r0
     c10:	cf 91       	pop	r28
     c12:	df 91       	pop	r29
     c14:	08 95       	ret

00000c16 <timeBomb_destructor>:
     c16:	df 93       	push	r29
     c18:	cf 93       	push	r28
     c1a:	00 d0       	rcall	.+0      	; 0xc1c <timeBomb_destructor+0x6>
     c1c:	cd b7       	in	r28, 0x3d	; 61
     c1e:	de b7       	in	r29, 0x3e	; 62
     c20:	9a 83       	std	Y+2, r25	; 0x02
     c22:	89 83       	std	Y+1, r24	; 0x01
     c24:	89 81       	ldd	r24, Y+1	; 0x01
     c26:	9a 81       	ldd	r25, Y+2	; 0x02
     c28:	0e 94 42 06 	call	0xc84	; 0xc84 <timeBomb_destructor2>
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	cf 91       	pop	r28
     c32:	df 91       	pop	r29
     c34:	08 95       	ret

00000c36 <timeBomb_getHistoryQueueDepth>:
     c36:	df 93       	push	r29
     c38:	cf 93       	push	r28
     c3a:	cd b7       	in	r28, 0x3d	; 61
     c3c:	de b7       	in	r29, 0x3e	; 62
     c3e:	84 e1       	ldi	r24, 0x14	; 20
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	cf 91       	pop	r28
     c44:	df 91       	pop	r29
     c46:	08 95       	ret

00000c48 <timeBomb_getMachineSize>:
     c48:	df 93       	push	r29
     c4a:	cf 93       	push	r28
     c4c:	cd b7       	in	r28, 0x3d	; 61
     c4e:	de b7       	in	r29, 0x3e	; 62
     c50:	85 e2       	ldi	r24, 0x25	; 37
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	cf 91       	pop	r28
     c56:	df 91       	pop	r29
     c58:	08 95       	ret

00000c5a <timeBomb_constructor2>:


STATE_MACHINE_CONSTRUCTOR()
{
     c5a:	df 93       	push	r29
     c5c:	cf 93       	push	r28
     c5e:	00 d0       	rcall	.+0      	; 0xc60 <timeBomb_constructor2+0x6>
     c60:	cd b7       	in	r28, 0x3d	; 61
     c62:	de b7       	in	r29, 0x3e	; 62
     c64:	9a 83       	std	Y+2, r25	; 0x02
     c66:	89 83       	std	Y+1, r24	; 0x01
	self->timeout			= 0 ;
     c68:	e9 81       	ldd	r30, Y+1	; 0x01
     c6a:	fa 81       	ldd	r31, Y+2	; 0x02
     c6c:	12 a2       	std	Z+34, r1	; 0x22
	self->codeBeingEntered	= 0 ;
     c6e:	e9 81       	ldd	r30, Y+1	; 0x01
     c70:	fa 81       	ldd	r31, Y+2	; 0x02
     c72:	13 a2       	std	Z+35, r1	; 0x23
	self->disarmCode		= 0 ;
     c74:	e9 81       	ldd	r30, Y+1	; 0x01
     c76:	fa 81       	ldd	r31, Y+2	; 0x02
     c78:	14 a2       	std	Z+36, r1	; 0x24
}
     c7a:	0f 90       	pop	r0
     c7c:	0f 90       	pop	r0
     c7e:	cf 91       	pop	r28
     c80:	df 91       	pop	r29
     c82:	08 95       	ret

00000c84 <timeBomb_destructor2>:


STATE_MACHINE_DESTRUCTOR()
{
     c84:	df 93       	push	r29
     c86:	cf 93       	push	r28
     c88:	00 d0       	rcall	.+0      	; 0xc8a <timeBomb_destructor2+0x6>
     c8a:	cd b7       	in	r28, 0x3d	; 61
     c8c:	de b7       	in	r29, 0x3e	; 62
     c8e:	9a 83       	std	Y+2, r25	; 0x02
     c90:	89 83       	std	Y+1, r24	; 0x01
	(void)self ;	/* Nothing to do here */
}
     c92:	0f 90       	pop	r0
     c94:	0f 90       	pop	r0
     c96:	cf 91       	pop	r28
     c98:	df 91       	pop	r29
     c9a:	08 95       	ret

00000c9c <updateDisplay>:


void updateDisplay(	uint8_t value)
{
     c9c:	df 93       	push	r29
     c9e:	cf 93       	push	r28
     ca0:	0f 92       	push	r0
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	89 83       	std	Y+1, r24	; 0x01
	(void)value ;
}
     ca8:	0f 90       	pop	r0
     caa:	cf 91       	pop	r28
     cac:	df 91       	pop	r29
     cae:	08 95       	ret

00000cb0 <goBOOM>:


void goBOOM(		void)
{
     cb0:	df 93       	push	r29
     cb2:	cf 93       	push	r28
     cb4:	cd b7       	in	r28, 0x3d	; 61
     cb6:	de b7       	in	r29, 0x3e	; 62
}
     cb8:	cf 91       	pop	r28
     cba:	df 91       	pop	r29
     cbc:	08 95       	ret

00000cbe <timeBomb_TOP_handler>:


DEFINE_TOP_STATE()
     cbe:	df 93       	push	r29
     cc0:	cf 93       	push	r28
     cc2:	00 d0       	rcall	.+0      	; 0xcc4 <timeBomb_TOP_handler+0x6>
     cc4:	00 d0       	rcall	.+0      	; 0xcc6 <timeBomb_TOP_handler+0x8>
     cc6:	00 d0       	rcall	.+0      	; 0xcc8 <timeBomb_TOP_handler+0xa>
     cc8:	cd b7       	in	r28, 0x3d	; 61
     cca:	de b7       	in	r29, 0x3e	; 62
     ccc:	9b 83       	std	Y+3, r25	; 0x03
     cce:	8a 83       	std	Y+2, r24	; 0x02
     cd0:	7d 83       	std	Y+5, r23	; 0x05
     cd2:	6c 83       	std	Y+4, r22	; 0x04
     cd4:	19 82       	std	Y+1, r1	; 0x01
{
	INITIAL_TRANSITION(TO(setting), ACTION(self->timeout = INIT_TIMEOUT)) ;
     cd6:	ec 81       	ldd	r30, Y+4	; 0x04
     cd8:	fd 81       	ldd	r31, Y+5	; 0x05
     cda:	80 81       	ld	r24, Z
     cdc:	82 30       	cpi	r24, 0x02	; 2
     cde:	69 f4       	brne	.+26     	; 0xcfa <timeBomb_TOP_handler+0x3c>
     ce0:	ea 81       	ldd	r30, Y+2	; 0x02
     ce2:	fb 81       	ldd	r31, Y+3	; 0x03
     ce4:	8e e1       	ldi	r24, 0x1E	; 30
     ce6:	82 a3       	std	Z+34, r24	; 0x22
     ce8:	ea 81       	ldd	r30, Y+2	; 0x02
     cea:	fb 81       	ldd	r31, Y+3	; 0x03
     cec:	84 ef       	ldi	r24, 0xF4	; 244
     cee:	92 e0       	ldi	r25, 0x02	; 2
     cf0:	97 83       	std	Z+7, r25	; 0x07
     cf2:	86 83       	std	Z+6, r24	; 0x06
     cf4:	82 e0       	ldi	r24, 0x02	; 2
     cf6:	8e 83       	std	Y+6, r24	; 0x06
     cf8:	0d c0       	rjmp	.+26     	; 0xd14 <timeBomb_TOP_handler+0x56>

	HANDLE_STATE_EVENTS
     cfa:	ec 81       	ldd	r30, Y+4	; 0x04
     cfc:	fd 81       	ldd	r31, Y+5	; 0x05
     cfe:	80 81       	ld	r24, Z
     d00:	88 2f       	mov	r24, r24
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	85 30       	cpi	r24, 0x05	; 5
     d06:	91 05       	cpc	r25, r1
     d08:	19 f4       	brne	.+6      	; 0xd10 <timeBomb_TOP_handler+0x52>
	{
		EXIT
		{
			/* BOOM */
		}
		EXIT_HANDLED
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	8e 83       	std	Y+6, r24	; 0x06
     d0e:	02 c0       	rjmp	.+4      	; 0xd14 <timeBomb_TOP_handler+0x56>
	}
	HANDLE_STATE_EVENTS_DONE
}
END_DEFINE_STATE()
     d10:	89 81       	ldd	r24, Y+1	; 0x01
     d12:	8e 83       	std	Y+6, r24	; 0x06
     d14:	8e 81       	ldd	r24, Y+6	; 0x06
     d16:	26 96       	adiw	r28, 0x06	; 6
     d18:	0f b6       	in	r0, 0x3f	; 63
     d1a:	f8 94       	cli
     d1c:	de bf       	out	0x3e, r29	; 62
     d1e:	0f be       	out	0x3f, r0	; 63
     d20:	cd bf       	out	0x3d, r28	; 61
     d22:	cf 91       	pop	r28
     d24:	df 91       	pop	r29
     d26:	08 95       	ret

00000d28 <timeBomb_setting_handler>:


DEFINE_STATE(setting)
     d28:	df 93       	push	r29
     d2a:	cf 93       	push	r28
     d2c:	cd b7       	in	r28, 0x3d	; 61
     d2e:	de b7       	in	r29, 0x3e	; 62
     d30:	29 97       	sbiw	r28, 0x09	; 9
     d32:	0f b6       	in	r0, 0x3f	; 63
     d34:	f8 94       	cli
     d36:	de bf       	out	0x3e, r29	; 62
     d38:	0f be       	out	0x3f, r0	; 63
     d3a:	cd bf       	out	0x3d, r28	; 61
     d3c:	9c 83       	std	Y+4, r25	; 0x04
     d3e:	8b 83       	std	Y+3, r24	; 0x03
     d40:	7e 83       	std	Y+6, r23	; 0x06
     d42:	6d 83       	std	Y+5, r22	; 0x05
     d44:	1a 82       	std	Y+2, r1	; 0x02
{
	TRANSITION_ON(ARM, TO(timing), ACTION(self->codeBeingEntered = 0)) ;
     d46:	ed 81       	ldd	r30, Y+5	; 0x05
     d48:	fe 81       	ldd	r31, Y+6	; 0x06
     d4a:	80 81       	ld	r24, Z
     d4c:	88 30       	cpi	r24, 0x08	; 8
     d4e:	71 f4       	brne	.+28     	; 0xd6c <timeBomb_setting_handler+0x44>
     d50:	82 e0       	ldi	r24, 0x02	; 2
     d52:	89 83       	std	Y+1, r24	; 0x01
     d54:	eb 81       	ldd	r30, Y+3	; 0x03
     d56:	fc 81       	ldd	r31, Y+4	; 0x04
     d58:	13 a2       	std	Z+35, r1	; 0x23
     d5a:	eb 81       	ldd	r30, Y+3	; 0x03
     d5c:	fc 81       	ldd	r31, Y+4	; 0x04
     d5e:	8b e0       	ldi	r24, 0x0B	; 11
     d60:	93 e0       	ldi	r25, 0x03	; 3
     d62:	97 83       	std	Z+7, r25	; 0x07
     d64:	86 83       	std	Z+6, r24	; 0x06
     d66:	29 81       	ldd	r18, Y+1	; 0x01
     d68:	29 87       	std	Y+9, r18	; 0x09
     d6a:	3c c0       	rjmp	.+120    	; 0xde4 <timeBomb_setting_handler+0xbc>

	HANDLE_STATE_EVENTS
     d6c:	ed 81       	ldd	r30, Y+5	; 0x05
     d6e:	fe 81       	ldd	r31, Y+6	; 0x06
     d70:	80 81       	ld	r24, Z
     d72:	28 2f       	mov	r18, r24
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	38 87       	std	Y+8, r19	; 0x08
     d78:	2f 83       	std	Y+7, r18	; 0x07
     d7a:	8f 81       	ldd	r24, Y+7	; 0x07
     d7c:	98 85       	ldd	r25, Y+8	; 0x08
     d7e:	86 30       	cpi	r24, 0x06	; 6
     d80:	91 05       	cpc	r25, r1
     d82:	31 f0       	breq	.+12     	; 0xd90 <timeBomb_setting_handler+0x68>
     d84:	2f 81       	ldd	r18, Y+7	; 0x07
     d86:	38 85       	ldd	r19, Y+8	; 0x08
     d88:	27 30       	cpi	r18, 0x07	; 7
     d8a:	31 05       	cpc	r19, r1
     d8c:	a9 f0       	breq	.+42     	; 0xdb8 <timeBomb_setting_handler+0x90>
     d8e:	28 c0       	rjmp	.+80     	; 0xde0 <timeBomb_setting_handler+0xb8>
	{
		EVENT(UP)
		{
			if(self->timeout < 60)
     d90:	eb 81       	ldd	r30, Y+3	; 0x03
     d92:	fc 81       	ldd	r31, Y+4	; 0x04
     d94:	82 a1       	ldd	r24, Z+34	; 0x22
     d96:	8c 33       	cpi	r24, 0x3C	; 60
     d98:	60 f4       	brcc	.+24     	; 0xdb2 <timeBomb_setting_handler+0x8a>
			{
				self->timeout++ ;
     d9a:	eb 81       	ldd	r30, Y+3	; 0x03
     d9c:	fc 81       	ldd	r31, Y+4	; 0x04
     d9e:	82 a1       	ldd	r24, Z+34	; 0x22
     da0:	8f 5f       	subi	r24, 0xFF	; 255
     da2:	eb 81       	ldd	r30, Y+3	; 0x03
     da4:	fc 81       	ldd	r31, Y+4	; 0x04
     da6:	82 a3       	std	Z+34, r24	; 0x22

				updateDisplay(self->timeout) ;
     da8:	eb 81       	ldd	r30, Y+3	; 0x03
     daa:	fc 81       	ldd	r31, Y+4	; 0x04
     dac:	82 a1       	ldd	r24, Z+34	; 0x22
     dae:	0e 94 4e 06 	call	0xc9c	; 0xc9c <updateDisplay>
			}
		}
		EVENT_HANDLED
     db2:	31 e0       	ldi	r19, 0x01	; 1
     db4:	39 87       	std	Y+9, r19	; 0x09
     db6:	16 c0       	rjmp	.+44     	; 0xde4 <timeBomb_setting_handler+0xbc>

		EVENT(DOWN)
		{
			if(self->timeout > 1)
     db8:	eb 81       	ldd	r30, Y+3	; 0x03
     dba:	fc 81       	ldd	r31, Y+4	; 0x04
     dbc:	82 a1       	ldd	r24, Z+34	; 0x22
     dbe:	82 30       	cpi	r24, 0x02	; 2
     dc0:	60 f0       	brcs	.+24     	; 0xdda <timeBomb_setting_handler+0xb2>
			{
				self->timeout-- ;
     dc2:	eb 81       	ldd	r30, Y+3	; 0x03
     dc4:	fc 81       	ldd	r31, Y+4	; 0x04
     dc6:	82 a1       	ldd	r24, Z+34	; 0x22
     dc8:	81 50       	subi	r24, 0x01	; 1
     dca:	eb 81       	ldd	r30, Y+3	; 0x03
     dcc:	fc 81       	ldd	r31, Y+4	; 0x04
     dce:	82 a3       	std	Z+34, r24	; 0x22

				updateDisplay(self->timeout) ;
     dd0:	eb 81       	ldd	r30, Y+3	; 0x03
     dd2:	fc 81       	ldd	r31, Y+4	; 0x04
     dd4:	82 a1       	ldd	r24, Z+34	; 0x22
     dd6:	0e 94 4e 06 	call	0xc9c	; 0xc9c <updateDisplay>
			}
		}
		EVENT_HANDLED
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	89 87       	std	Y+9, r24	; 0x09
     dde:	02 c0       	rjmp	.+4      	; 0xde4 <timeBomb_setting_handler+0xbc>
	}
	HANDLE_STATE_EVENTS_DONE
}
END_DEFINE_STATE()
     de0:	9a 81       	ldd	r25, Y+2	; 0x02
     de2:	99 87       	std	Y+9, r25	; 0x09
     de4:	89 85       	ldd	r24, Y+9	; 0x09
     de6:	29 96       	adiw	r28, 0x09	; 9
     de8:	0f b6       	in	r0, 0x3f	; 63
     dea:	f8 94       	cli
     dec:	de bf       	out	0x3e, r29	; 62
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	cd bf       	out	0x3d, r28	; 61
     df2:	cf 91       	pop	r28
     df4:	df 91       	pop	r29
     df6:	08 95       	ret

00000df8 <timeBomb_timing_handler>:


DEFINE_STATE(timing)
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
     e00:	2a 97       	sbiw	r28, 0x0a	; 10
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	f8 94       	cli
     e06:	de bf       	out	0x3e, r29	; 62
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	cd bf       	out	0x3d, r28	; 61
     e0c:	9d 83       	std	Y+5, r25	; 0x05
     e0e:	8c 83       	std	Y+4, r24	; 0x04
     e10:	7f 83       	std	Y+7, r23	; 0x07
     e12:	6e 83       	std	Y+6, r22	; 0x06
     e14:	1b 82       	std	Y+3, r1	; 0x03
{
	TRANSITION_ON_IF(ARM, self->codeBeingEntered == self->disarmCode, TO(setting), ACTION(updateDisplay(self->timeout))) ;
     e16:	ee 81       	ldd	r30, Y+6	; 0x06
     e18:	ff 81       	ldd	r31, Y+7	; 0x07
     e1a:	80 81       	ld	r24, Z
     e1c:	88 30       	cpi	r24, 0x08	; 8
     e1e:	c1 f4       	brne	.+48     	; 0xe50 <timeBomb_timing_handler+0x58>
     e20:	ec 81       	ldd	r30, Y+4	; 0x04
     e22:	fd 81       	ldd	r31, Y+5	; 0x05
     e24:	93 a1       	ldd	r25, Z+35	; 0x23
     e26:	ec 81       	ldd	r30, Y+4	; 0x04
     e28:	fd 81       	ldd	r31, Y+5	; 0x05
     e2a:	84 a1       	ldd	r24, Z+36	; 0x24
     e2c:	98 17       	cp	r25, r24
     e2e:	81 f4       	brne	.+32     	; 0xe50 <timeBomb_timing_handler+0x58>
     e30:	82 e0       	ldi	r24, 0x02	; 2
     e32:	8a 83       	std	Y+2, r24	; 0x02
     e34:	ec 81       	ldd	r30, Y+4	; 0x04
     e36:	fd 81       	ldd	r31, Y+5	; 0x05
     e38:	82 a1       	ldd	r24, Z+34	; 0x22
     e3a:	0e 94 4e 06 	call	0xc9c	; 0xc9c <updateDisplay>
     e3e:	ec 81       	ldd	r30, Y+4	; 0x04
     e40:	fd 81       	ldd	r31, Y+5	; 0x05
     e42:	84 ef       	ldi	r24, 0xF4	; 244
     e44:	92 e0       	ldi	r25, 0x02	; 2
     e46:	97 83       	std	Z+7, r25	; 0x07
     e48:	86 83       	std	Z+6, r24	; 0x06
     e4a:	2a 81       	ldd	r18, Y+2	; 0x02
     e4c:	2a 87       	std	Y+10, r18	; 0x0a
     e4e:	4a c0       	rjmp	.+148    	; 0xee4 <timeBomb_timing_handler+0xec>

	HANDLE_STATE_EVENTS
     e50:	ee 81       	ldd	r30, Y+6	; 0x06
     e52:	ff 81       	ldd	r31, Y+7	; 0x07
     e54:	80 81       	ld	r24, Z
     e56:	28 2f       	mov	r18, r24
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	39 87       	std	Y+9, r19	; 0x09
     e5c:	28 87       	std	Y+8, r18	; 0x08
     e5e:	88 85       	ldd	r24, Y+8	; 0x08
     e60:	99 85       	ldd	r25, Y+9	; 0x09
     e62:	87 30       	cpi	r24, 0x07	; 7
     e64:	91 05       	cpc	r25, r1
     e66:	d9 f0       	breq	.+54     	; 0xe9e <timeBomb_timing_handler+0xa6>
     e68:	28 85       	ldd	r18, Y+8	; 0x08
     e6a:	39 85       	ldd	r19, Y+9	; 0x09
     e6c:	29 30       	cpi	r18, 0x09	; 9
     e6e:	31 05       	cpc	r19, r1
     e70:	01 f1       	breq	.+64     	; 0xeb2 <timeBomb_timing_handler+0xba>
     e72:	88 85       	ldd	r24, Y+8	; 0x08
     e74:	99 85       	ldd	r25, Y+9	; 0x09
     e76:	86 30       	cpi	r24, 0x06	; 6
     e78:	91 05       	cpc	r25, r1
     e7a:	91 f5       	brne	.+100    	; 0xee0 <timeBomb_timing_handler+0xe8>
	{
		EVENT(UP)
		{
			self->codeBeingEntered <<= 1 ;
     e7c:	ec 81       	ldd	r30, Y+4	; 0x04
     e7e:	fd 81       	ldd	r31, Y+5	; 0x05
     e80:	83 a1       	ldd	r24, Z+35	; 0x23
     e82:	88 0f       	add	r24, r24
     e84:	ec 81       	ldd	r30, Y+4	; 0x04
     e86:	fd 81       	ldd	r31, Y+5	; 0x05
     e88:	83 a3       	std	Z+35, r24	; 0x23
			self->codeBeingEntered |= 1 ;
     e8a:	ec 81       	ldd	r30, Y+4	; 0x04
     e8c:	fd 81       	ldd	r31, Y+5	; 0x05
     e8e:	83 a1       	ldd	r24, Z+35	; 0x23
     e90:	81 60       	ori	r24, 0x01	; 1
     e92:	ec 81       	ldd	r30, Y+4	; 0x04
     e94:	fd 81       	ldd	r31, Y+5	; 0x05
     e96:	83 a3       	std	Z+35, r24	; 0x23
		}
		EVENT_HANDLED
     e98:	91 e0       	ldi	r25, 0x01	; 1
     e9a:	9a 87       	std	Y+10, r25	; 0x0a
     e9c:	23 c0       	rjmp	.+70     	; 0xee4 <timeBomb_timing_handler+0xec>

		EVENT(DOWN)
		{
			self->codeBeingEntered <<= 1 ;
     e9e:	ec 81       	ldd	r30, Y+4	; 0x04
     ea0:	fd 81       	ldd	r31, Y+5	; 0x05
     ea2:	83 a1       	ldd	r24, Z+35	; 0x23
     ea4:	88 0f       	add	r24, r24
     ea6:	ec 81       	ldd	r30, Y+4	; 0x04
     ea8:	fd 81       	ldd	r31, Y+5	; 0x05
     eaa:	83 a3       	std	Z+35, r24	; 0x23
		}
		EVENT_HANDLED
     eac:	21 e0       	ldi	r18, 0x01	; 1
     eae:	2a 87       	std	Y+10, r18	; 0x0a
     eb0:	19 c0       	rjmp	.+50     	; 0xee4 <timeBomb_timing_handler+0xec>

		EVENT(TICK)
		{
			self->timeout-- ;
     eb2:	ec 81       	ldd	r30, Y+4	; 0x04
     eb4:	fd 81       	ldd	r31, Y+5	; 0x05
     eb6:	82 a1       	ldd	r24, Z+34	; 0x22
     eb8:	81 50       	subi	r24, 0x01	; 1
     eba:	ec 81       	ldd	r30, Y+4	; 0x04
     ebc:	fd 81       	ldd	r31, Y+5	; 0x05
     ebe:	82 a3       	std	Z+34, r24	; 0x22

			TRANSITION_TO(isTimeToGoBoom, updateDisplay(self->timeout)) ;
     ec0:	82 e0       	ldi	r24, 0x02	; 2
     ec2:	89 83       	std	Y+1, r24	; 0x01
     ec4:	ec 81       	ldd	r30, Y+4	; 0x04
     ec6:	fd 81       	ldd	r31, Y+5	; 0x05
     ec8:	82 a1       	ldd	r24, Z+34	; 0x22
     eca:	0e 94 4e 06 	call	0xc9c	; 0xc9c <updateDisplay>
     ece:	ec 81       	ldd	r30, Y+4	; 0x04
     ed0:	fd 81       	ldd	r31, Y+5	; 0x05
     ed2:	8a e2       	ldi	r24, 0x2A	; 42
     ed4:	93 e0       	ldi	r25, 0x03	; 3
     ed6:	97 83       	std	Z+7, r25	; 0x07
     ed8:	86 83       	std	Z+6, r24	; 0x06
     eda:	39 81       	ldd	r19, Y+1	; 0x01
     edc:	3a 87       	std	Y+10, r19	; 0x0a
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <timeBomb_timing_handler+0xec>
		}
		EVENT_HANDLED
	}
	HANDLE_STATE_EVENTS_DONE
}
END_DEFINE_STATE()
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
     ee2:	8a 87       	std	Y+10, r24	; 0x0a
     ee4:	8a 85       	ldd	r24, Y+10	; 0x0a
     ee6:	2a 96       	adiw	r28, 0x0a	; 10
     ee8:	0f b6       	in	r0, 0x3f	; 63
     eea:	f8 94       	cli
     eec:	de bf       	out	0x3e, r29	; 62
     eee:	0f be       	out	0x3f, r0	; 63
     ef0:	cd bf       	out	0x3d, r28	; 61
     ef2:	cf 91       	pop	r28
     ef4:	df 91       	pop	r29
     ef6:	08 95       	ret

00000ef8 <timeBomb_isTimeToGoBoom_handler>:


DEFINE_CHOICE_PSEUDO_STATE(	isTimeToGoBoom,
     ef8:	df 93       	push	r29
     efa:	cf 93       	push	r28
     efc:	00 d0       	rcall	.+0      	; 0xefe <timeBomb_isTimeToGoBoom_handler+0x6>
     efe:	0f 92       	push	r0
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
     f04:	9b 83       	std	Y+3, r25	; 0x03
     f06:	8a 83       	std	Y+2, r24	; 0x02
     f08:	82 e0       	ldi	r24, 0x02	; 2
     f0a:	89 83       	std	Y+1, r24	; 0x01
     f0c:	ea 81       	ldd	r30, Y+2	; 0x02
     f0e:	fb 81       	ldd	r31, Y+3	; 0x03
     f10:	82 a1       	ldd	r24, Z+34	; 0x22
     f12:	88 23       	and	r24, r24
     f14:	49 f4       	brne	.+18     	; 0xf28 <timeBomb_isTimeToGoBoom_handler+0x30>
     f16:	0e 94 58 06 	call	0xcb0	; 0xcb0 <goBOOM>
     f1a:	ea 81       	ldd	r30, Y+2	; 0x02
     f1c:	fb 81       	ldd	r31, Y+3	; 0x03
     f1e:	8c ed       	ldi	r24, 0xDC	; 220
     f20:	92 e0       	ldi	r25, 0x02	; 2
     f22:	97 83       	std	Z+7, r25	; 0x07
     f24:	86 83       	std	Z+6, r24	; 0x06
     f26:	06 c0       	rjmp	.+12     	; 0xf34 <timeBomb_isTimeToGoBoom_handler+0x3c>
     f28:	ea 81       	ldd	r30, Y+2	; 0x02
     f2a:	fb 81       	ldd	r31, Y+3	; 0x03
     f2c:	8b e0       	ldi	r24, 0x0B	; 11
     f2e:	93 e0       	ldi	r25, 0x03	; 3
     f30:	97 83       	std	Z+7, r25	; 0x07
     f32:	86 83       	std	Z+6, r24	; 0x06
     f34:	89 81       	ldd	r24, Y+1	; 0x01
     f36:	0f 90       	pop	r0
     f38:	0f 90       	pop	r0
     f3a:	0f 90       	pop	r0
     f3c:	cf 91       	pop	r28
     f3e:	df 91       	pop	r29
     f40:	08 95       	ret

00000f42 <toaster_getEventQueueDepth>:
		uint8_t		cookingTime_hours ;
		uint8_t		cookingTime_minutes ;
		uint8_t		cookingTime_seconds ;
	END_STATE_MACHINE_VARIABLES() ;

	SET_EVENT_QUEUE_DEPTH(config_toastEVENT_QUEUE_DEPTH) ;
     f42:	df 93       	push	r29
     f44:	cf 93       	push	r28
     f46:	cd b7       	in	r28, 0x3d	; 61
     f48:	de b7       	in	r29, 0x3e	; 62
     f4a:	88 e0       	ldi	r24, 0x08	; 8
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	cf 91       	pop	r28
     f50:	df 91       	pop	r29
     f52:	08 95       	ret

00000f54 <toaster_constructor>:

		ADD_SUB_STATE(off, PARENT_STATE(doorClosed)) ;

	ADD_SUB_STATE(doorOpen, PARENT_STATE(TOP)) ;

END_STATE_MACHINE_DEFINITION() ;
     f54:	df 93       	push	r29
     f56:	cf 93       	push	r28
     f58:	00 d0       	rcall	.+0      	; 0xf5a <toaster_constructor+0x6>
     f5a:	cd b7       	in	r28, 0x3d	; 61
     f5c:	de b7       	in	r29, 0x3e	; 62
     f5e:	9a 83       	std	Y+2, r25	; 0x02
     f60:	89 83       	std	Y+1, r24	; 0x01
     f62:	e9 81       	ldd	r30, Y+1	; 0x01
     f64:	fa 81       	ldd	r31, Y+2	; 0x02
     f66:	87 e4       	ldi	r24, 0x47	; 71
     f68:	93 e0       	ldi	r25, 0x03	; 3
     f6a:	91 83       	std	Z+1, r25	; 0x01
     f6c:	80 83       	st	Z, r24
     f6e:	e9 81       	ldd	r30, Y+1	; 0x01
     f70:	fa 81       	ldd	r31, Y+2	; 0x02
     f72:	87 e4       	ldi	r24, 0x47	; 71
     f74:	93 e0       	ldi	r25, 0x03	; 3
     f76:	95 83       	std	Z+5, r25	; 0x05
     f78:	84 83       	std	Z+4, r24	; 0x04
     f7a:	80 91 39 03 	lds	r24, 0x0339
     f7e:	90 91 3a 03 	lds	r25, 0x033A
     f82:	e9 81       	ldd	r30, Y+1	; 0x01
     f84:	fa 81       	ldd	r31, Y+2	; 0x02
     f86:	93 83       	std	Z+3, r25	; 0x03
     f88:	82 83       	std	Z+2, r24	; 0x02
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	9a 81       	ldd	r25, Y+2	; 0x02
     f8e:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <toaster_constructor2>
     f92:	0f 90       	pop	r0
     f94:	0f 90       	pop	r0
     f96:	cf 91       	pop	r28
     f98:	df 91       	pop	r29
     f9a:	08 95       	ret

00000f9c <toaster_destructor>:
     f9c:	df 93       	push	r29
     f9e:	cf 93       	push	r28
     fa0:	00 d0       	rcall	.+0      	; 0xfa2 <toaster_destructor+0x6>
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
     fa6:	9a 83       	std	Y+2, r25	; 0x02
     fa8:	89 83       	std	Y+1, r24	; 0x01
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	9a 81       	ldd	r25, Y+2	; 0x02
     fae:	0e 94 05 08 	call	0x100a	; 0x100a <toaster_destructor2>
     fb2:	0f 90       	pop	r0
     fb4:	0f 90       	pop	r0
     fb6:	cf 91       	pop	r28
     fb8:	df 91       	pop	r29
     fba:	08 95       	ret

00000fbc <toaster_getHistoryQueueDepth>:
     fbc:	df 93       	push	r29
     fbe:	cf 93       	push	r28
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
     fc4:	80 e2       	ldi	r24, 0x20	; 32
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	cf 91       	pop	r28
     fca:	df 91       	pop	r29
     fcc:	08 95       	ret

00000fce <toaster_getMachineSize>:
     fce:	df 93       	push	r29
     fd0:	cf 93       	push	r28
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62
     fd6:	85 e2       	ldi	r24, 0x25	; 37
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	cf 91       	pop	r28
     fdc:	df 91       	pop	r29
     fde:	08 95       	ret

00000fe0 <toaster_constructor2>:


STATE_MACHINE_CONSTRUCTOR()
{
     fe0:	df 93       	push	r29
     fe2:	cf 93       	push	r28
     fe4:	00 d0       	rcall	.+0      	; 0xfe6 <toaster_constructor2+0x6>
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
     fea:	9a 83       	std	Y+2, r25	; 0x02
     fec:	89 83       	std	Y+1, r24	; 0x01
	self->cookingTime_hours		= 0 ;
     fee:	e9 81       	ldd	r30, Y+1	; 0x01
     ff0:	fa 81       	ldd	r31, Y+2	; 0x02
     ff2:	12 a2       	std	Z+34, r1	; 0x22
	self->cookingTime_minutes	= 0 ;
     ff4:	e9 81       	ldd	r30, Y+1	; 0x01
     ff6:	fa 81       	ldd	r31, Y+2	; 0x02
     ff8:	13 a2       	std	Z+35, r1	; 0x23
	self->cookingTime_seconds	= 0 ;
     ffa:	e9 81       	ldd	r30, Y+1	; 0x01
     ffc:	fa 81       	ldd	r31, Y+2	; 0x02
     ffe:	14 a2       	std	Z+36, r1	; 0x24
}
    1000:	0f 90       	pop	r0
    1002:	0f 90       	pop	r0
    1004:	cf 91       	pop	r28
    1006:	df 91       	pop	r29
    1008:	08 95       	ret

0000100a <toaster_destructor2>:


STATE_MACHINE_DESTRUCTOR()
{
    100a:	df 93       	push	r29
    100c:	cf 93       	push	r28
    100e:	00 d0       	rcall	.+0      	; 0x1010 <toaster_destructor2+0x6>
    1010:	cd b7       	in	r28, 0x3d	; 61
    1012:	de b7       	in	r29, 0x3e	; 62
    1014:	9a 83       	std	Y+2, r25	; 0x02
    1016:	89 83       	std	Y+1, r24	; 0x01
	(void)self ;	/* Nothing to do here */
}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	cf 91       	pop	r28
    101e:	df 91       	pop	r29
    1020:	08 95       	ret

00001022 <heaterOn>:


void heaterOn(	void)
{
    1022:	df 93       	push	r29
    1024:	cf 93       	push	r28
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62
}
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	08 95       	ret

00001030 <heaterOff>:


void heaterOff(	void)
{
    1030:	df 93       	push	r29
    1032:	cf 93       	push	r28
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
}
    1038:	cf 91       	pop	r28
    103a:	df 91       	pop	r29
    103c:	08 95       	ret

0000103e <lampOn>:


void lampOn(	void)
{
    103e:	df 93       	push	r29
    1040:	cf 93       	push	r28
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
}
    1046:	cf 91       	pop	r28
    1048:	df 91       	pop	r29
    104a:	08 95       	ret

0000104c <lampOff>:


void lampOff(	void)
{
    104c:	df 93       	push	r29
    104e:	cf 93       	push	r28
    1050:	cd b7       	in	r28, 0x3d	; 61
    1052:	de b7       	in	r29, 0x3e	; 62
}
    1054:	cf 91       	pop	r28
    1056:	df 91       	pop	r29
    1058:	08 95       	ret

0000105a <toaster_TOP_handler>:


DEFINE_TOP_STATE()
    105a:	df 93       	push	r29
    105c:	cf 93       	push	r28
    105e:	00 d0       	rcall	.+0      	; 0x1060 <toaster_TOP_handler+0x6>
    1060:	00 d0       	rcall	.+0      	; 0x1062 <toaster_TOP_handler+0x8>
    1062:	00 d0       	rcall	.+0      	; 0x1064 <toaster_TOP_handler+0xa>
    1064:	cd b7       	in	r28, 0x3d	; 61
    1066:	de b7       	in	r29, 0x3e	; 62
    1068:	9b 83       	std	Y+3, r25	; 0x03
    106a:	8a 83       	std	Y+2, r24	; 0x02
    106c:	7d 83       	std	Y+5, r23	; 0x05
    106e:	6c 83       	std	Y+4, r22	; 0x04
    1070:	19 82       	std	Y+1, r1	; 0x01
{
	self->cookingTime_hours		= 0 ;
    1072:	ea 81       	ldd	r30, Y+2	; 0x02
    1074:	fb 81       	ldd	r31, Y+3	; 0x03
    1076:	12 a2       	std	Z+34, r1	; 0x22
	self->cookingTime_minutes	= 0 ;
    1078:	ea 81       	ldd	r30, Y+2	; 0x02
    107a:	fb 81       	ldd	r31, Y+3	; 0x03
    107c:	13 a2       	std	Z+35, r1	; 0x23
	self->cookingTime_seconds	= 0 ;
    107e:	ea 81       	ldd	r30, Y+2	; 0x02
    1080:	fb 81       	ldd	r31, Y+3	; 0x03
    1082:	14 a2       	std	Z+36, r1	; 0x24

	INITIAL_TRANSITION(TO(doorClosed),						NO_ACTION) ;
    1084:	ec 81       	ldd	r30, Y+4	; 0x04
    1086:	fd 81       	ldd	r31, Y+5	; 0x05
    1088:	80 81       	ld	r24, Z
    108a:	82 30       	cpi	r24, 0x02	; 2
    108c:	49 f4       	brne	.+18     	; 0x10a0 <toaster_TOP_handler+0x46>
    108e:	ea 81       	ldd	r30, Y+2	; 0x02
    1090:	fb 81       	ldd	r31, Y+3	; 0x03
    1092:	81 e6       	ldi	r24, 0x61	; 97
    1094:	93 e0       	ldi	r25, 0x03	; 3
    1096:	97 83       	std	Z+7, r25	; 0x07
    1098:	86 83       	std	Z+6, r24	; 0x06
    109a:	82 e0       	ldi	r24, 0x02	; 2
    109c:	8e 83       	std	Y+6, r24	; 0x06
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <toaster_TOP_handler+0x4a>
}
END_DEFINE_STATE()
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	8e 83       	std	Y+6, r24	; 0x06
    10a4:	8e 81       	ldd	r24, Y+6	; 0x06
    10a6:	26 96       	adiw	r28, 0x06	; 6
    10a8:	0f b6       	in	r0, 0x3f	; 63
    10aa:	f8 94       	cli
    10ac:	de bf       	out	0x3e, r29	; 62
    10ae:	0f be       	out	0x3f, r0	; 63
    10b0:	cd bf       	out	0x3d, r28	; 61
    10b2:	cf 91       	pop	r28
    10b4:	df 91       	pop	r29
    10b6:	08 95       	ret

000010b8 <toaster_doorClosed_handler>:


DEFINE_STATE(doorClosed)
    10b8:	df 93       	push	r29
    10ba:	cf 93       	push	r28
    10bc:	cd b7       	in	r28, 0x3d	; 61
    10be:	de b7       	in	r29, 0x3e	; 62
    10c0:	2c 97       	sbiw	r28, 0x0c	; 12
    10c2:	0f b6       	in	r0, 0x3f	; 63
    10c4:	f8 94       	cli
    10c6:	de bf       	out	0x3e, r29	; 62
    10c8:	0f be       	out	0x3f, r0	; 63
    10ca:	cd bf       	out	0x3d, r28	; 61
    10cc:	99 87       	std	Y+9, r25	; 0x09
    10ce:	88 87       	std	Y+8, r24	; 0x08
    10d0:	7b 87       	std	Y+11, r23	; 0x0b
    10d2:	6a 87       	std	Y+10, r22	; 0x0a
    10d4:	1f 82       	std	Y+7, r1	; 0x07
{
	SET_HISTORY_DEFAULT_STATE(off,							NO_ACTION) ;
    10d6:	ea 85       	ldd	r30, Y+10	; 0x0a
    10d8:	fb 85       	ldd	r31, Y+11	; 0x0b
    10da:	80 81       	ld	r24, Z
    10dc:	83 30       	cpi	r24, 0x03	; 3
    10de:	59 f4       	brne	.+22     	; 0x10f6 <toaster_doorClosed_handler+0x3e>
    10e0:	82 e0       	ldi	r24, 0x02	; 2
    10e2:	8e 83       	std	Y+6, r24	; 0x06
    10e4:	e8 85       	ldd	r30, Y+8	; 0x08
    10e6:	f9 85       	ldd	r31, Y+9	; 0x09
    10e8:	8b eb       	ldi	r24, 0xBB	; 187
    10ea:	93 e0       	ldi	r25, 0x03	; 3
    10ec:	97 83       	std	Z+7, r25	; 0x07
    10ee:	86 83       	std	Z+6, r24	; 0x06
    10f0:	8e 81       	ldd	r24, Y+6	; 0x06
    10f2:	8c 87       	std	Y+12, r24	; 0x0c
    10f4:	62 c0       	rjmp	.+196    	; 0x11ba <toaster_doorClosed_handler+0x102>
	SET_HISTORY_DEFAULT_STATE(HISTORY_OF(off),				NO_ACTION) ;
    10f6:	ea 85       	ldd	r30, Y+10	; 0x0a
    10f8:	fb 85       	ldd	r31, Y+11	; 0x0b
    10fa:	80 81       	ld	r24, Z
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	69 f4       	brne	.+26     	; 0x111a <toaster_doorClosed_handler+0x62>
    1100:	82 e0       	ldi	r24, 0x02	; 2
    1102:	8d 83       	std	Y+5, r24	; 0x05
    1104:	e8 85       	ldd	r30, Y+8	; 0x08
    1106:	f9 85       	ldd	r31, Y+9	; 0x09
    1108:	8b eb       	ldi	r24, 0xBB	; 187
    110a:	93 e0       	ldi	r25, 0x03	; 3
    110c:	97 83       	std	Z+7, r25	; 0x07
    110e:	86 83       	std	Z+6, r24	; 0x06
    1110:	83 e0       	ldi	r24, 0x03	; 3
    1112:	8d 83       	std	Y+5, r24	; 0x05
    1114:	8d 81       	ldd	r24, Y+5	; 0x05
    1116:	8c 87       	std	Y+12, r24	; 0x0c
    1118:	50 c0       	rjmp	.+160    	; 0x11ba <toaster_doorClosed_handler+0x102>

	INITIAL_TRANSITION(TO(off),								NO_ACTION) ;
    111a:	ea 85       	ldd	r30, Y+10	; 0x0a
    111c:	fb 85       	ldd	r31, Y+11	; 0x0b
    111e:	80 81       	ld	r24, Z
    1120:	82 30       	cpi	r24, 0x02	; 2
    1122:	49 f4       	brne	.+18     	; 0x1136 <toaster_doorClosed_handler+0x7e>
    1124:	e8 85       	ldd	r30, Y+8	; 0x08
    1126:	f9 85       	ldd	r31, Y+9	; 0x09
    1128:	8b eb       	ldi	r24, 0xBB	; 187
    112a:	93 e0       	ldi	r25, 0x03	; 3
    112c:	97 83       	std	Z+7, r25	; 0x07
    112e:	86 83       	std	Z+6, r24	; 0x06
    1130:	82 e0       	ldi	r24, 0x02	; 2
    1132:	8c 87       	std	Y+12, r24	; 0x0c
    1134:	42 c0       	rjmp	.+132    	; 0x11ba <toaster_doorClosed_handler+0x102>

	TRANSITION_ON(BAKE,		TO(baking),	NO_ACTION) ;
    1136:	ea 85       	ldd	r30, Y+10	; 0x0a
    1138:	fb 85       	ldd	r31, Y+11	; 0x0b
    113a:	80 81       	ld	r24, Z
    113c:	86 30       	cpi	r24, 0x06	; 6
    113e:	59 f4       	brne	.+22     	; 0x1156 <toaster_doorClosed_handler+0x9e>
    1140:	82 e0       	ldi	r24, 0x02	; 2
    1142:	8c 83       	std	Y+4, r24	; 0x04
    1144:	e8 85       	ldd	r30, Y+8	; 0x08
    1146:	f9 85       	ldd	r31, Y+9	; 0x09
    1148:	80 e9       	ldi	r24, 0x90	; 144
    114a:	93 e0       	ldi	r25, 0x03	; 3
    114c:	97 83       	std	Z+7, r25	; 0x07
    114e:	86 83       	std	Z+6, r24	; 0x06
    1150:	8c 81       	ldd	r24, Y+4	; 0x04
    1152:	8c 87       	std	Y+12, r24	; 0x0c
    1154:	32 c0       	rjmp	.+100    	; 0x11ba <toaster_doorClosed_handler+0x102>
	TRANSITION_ON(TOAST,	TO(toasting),	NO_ACTION) ;
    1156:	ea 85       	ldd	r30, Y+10	; 0x0a
    1158:	fb 85       	ldd	r31, Y+11	; 0x0b
    115a:	80 81       	ld	r24, Z
    115c:	87 30       	cpi	r24, 0x07	; 7
    115e:	59 f4       	brne	.+22     	; 0x1176 <toaster_doorClosed_handler+0xbe>
    1160:	82 e0       	ldi	r24, 0x02	; 2
    1162:	8b 83       	std	Y+3, r24	; 0x03
    1164:	e8 85       	ldd	r30, Y+8	; 0x08
    1166:	f9 85       	ldd	r31, Y+9	; 0x09
    1168:	88 ea       	ldi	r24, 0xA8	; 168
    116a:	93 e0       	ldi	r25, 0x03	; 3
    116c:	97 83       	std	Z+7, r25	; 0x07
    116e:	86 83       	std	Z+6, r24	; 0x06
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	8c 87       	std	Y+12, r24	; 0x0c
    1174:	22 c0       	rjmp	.+68     	; 0x11ba <toaster_doorClosed_handler+0x102>
	TRANSITION_ON(OFF,		TO(off),		NO_ACTION) ;
    1176:	ea 85       	ldd	r30, Y+10	; 0x0a
    1178:	fb 85       	ldd	r31, Y+11	; 0x0b
    117a:	80 81       	ld	r24, Z
    117c:	88 30       	cpi	r24, 0x08	; 8
    117e:	59 f4       	brne	.+22     	; 0x1196 <toaster_doorClosed_handler+0xde>
    1180:	82 e0       	ldi	r24, 0x02	; 2
    1182:	8a 83       	std	Y+2, r24	; 0x02
    1184:	e8 85       	ldd	r30, Y+8	; 0x08
    1186:	f9 85       	ldd	r31, Y+9	; 0x09
    1188:	8b eb       	ldi	r24, 0xBB	; 187
    118a:	93 e0       	ldi	r25, 0x03	; 3
    118c:	97 83       	std	Z+7, r25	; 0x07
    118e:	86 83       	std	Z+6, r24	; 0x06
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	8c 87       	std	Y+12, r24	; 0x0c
    1194:	12 c0       	rjmp	.+36     	; 0x11ba <toaster_doorClosed_handler+0x102>
	TRANSITION_ON(OPEN,		TO(off),		NO_ACTION) ;
    1196:	ea 85       	ldd	r30, Y+10	; 0x0a
    1198:	fb 85       	ldd	r31, Y+11	; 0x0b
    119a:	80 81       	ld	r24, Z
    119c:	89 30       	cpi	r24, 0x09	; 9
    119e:	59 f4       	brne	.+22     	; 0x11b6 <toaster_doorClosed_handler+0xfe>
    11a0:	82 e0       	ldi	r24, 0x02	; 2
    11a2:	89 83       	std	Y+1, r24	; 0x01
    11a4:	e8 85       	ldd	r30, Y+8	; 0x08
    11a6:	f9 85       	ldd	r31, Y+9	; 0x09
    11a8:	8b eb       	ldi	r24, 0xBB	; 187
    11aa:	93 e0       	ldi	r25, 0x03	; 3
    11ac:	97 83       	std	Z+7, r25	; 0x07
    11ae:	86 83       	std	Z+6, r24	; 0x06
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	8c 87       	std	Y+12, r24	; 0x0c
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <toaster_doorClosed_handler+0x102>
}
END_DEFINE_STATE()
    11b6:	8f 81       	ldd	r24, Y+7	; 0x07
    11b8:	8c 87       	std	Y+12, r24	; 0x0c
    11ba:	8c 85       	ldd	r24, Y+12	; 0x0c
    11bc:	2c 96       	adiw	r28, 0x0c	; 12
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	f8 94       	cli
    11c2:	de bf       	out	0x3e, r29	; 62
    11c4:	0f be       	out	0x3f, r0	; 63
    11c6:	cd bf       	out	0x3d, r28	; 61
    11c8:	cf 91       	pop	r28
    11ca:	df 91       	pop	r29
    11cc:	08 95       	ret

000011ce <toaster_heating_handler>:


DEFINE_STATE(heating)
    11ce:	df 93       	push	r29
    11d0:	cf 93       	push	r28
    11d2:	00 d0       	rcall	.+0      	; 0x11d4 <toaster_heating_handler+0x6>
    11d4:	00 d0       	rcall	.+0      	; 0x11d6 <toaster_heating_handler+0x8>
    11d6:	00 d0       	rcall	.+0      	; 0x11d8 <toaster_heating_handler+0xa>
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
    11dc:	9b 83       	std	Y+3, r25	; 0x03
    11de:	8a 83       	std	Y+2, r24	; 0x02
    11e0:	7d 83       	std	Y+5, r23	; 0x05
    11e2:	6c 83       	std	Y+4, r22	; 0x04
    11e4:	19 82       	std	Y+1, r1	; 0x01
{
	ON_ENTRY(	heaterOn()) ;
    11e6:	ec 81       	ldd	r30, Y+4	; 0x04
    11e8:	fd 81       	ldd	r31, Y+5	; 0x05
    11ea:	80 81       	ld	r24, Z
    11ec:	81 30       	cpi	r24, 0x01	; 1
    11ee:	29 f4       	brne	.+10     	; 0x11fa <toaster_heating_handler+0x2c>
    11f0:	0e 94 11 08 	call	0x1022	; 0x1022 <heaterOn>
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	8e 83       	std	Y+6, r24	; 0x06
    11f8:	0c c0       	rjmp	.+24     	; 0x1212 <toaster_heating_handler+0x44>
	ON_EXIT(	heaterOff()) ;
    11fa:	ec 81       	ldd	r30, Y+4	; 0x04
    11fc:	fd 81       	ldd	r31, Y+5	; 0x05
    11fe:	80 81       	ld	r24, Z
    1200:	85 30       	cpi	r24, 0x05	; 5
    1202:	29 f4       	brne	.+10     	; 0x120e <toaster_heating_handler+0x40>
    1204:	0e 94 18 08 	call	0x1030	; 0x1030 <heaterOff>
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	8e 83       	std	Y+6, r24	; 0x06
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <toaster_heating_handler+0x44>
}
END_DEFINE_STATE()
    120e:	89 81       	ldd	r24, Y+1	; 0x01
    1210:	8e 83       	std	Y+6, r24	; 0x06
    1212:	8e 81       	ldd	r24, Y+6	; 0x06
    1214:	26 96       	adiw	r28, 0x06	; 6
    1216:	0f b6       	in	r0, 0x3f	; 63
    1218:	f8 94       	cli
    121a:	de bf       	out	0x3e, r29	; 62
    121c:	0f be       	out	0x3f, r0	; 63
    121e:	cd bf       	out	0x3d, r28	; 61
    1220:	cf 91       	pop	r28
    1222:	df 91       	pop	r29
    1224:	08 95       	ret

00001226 <toaster_baking_handler>:


DEFINE_STATE(baking)
    1226:	df 93       	push	r29
    1228:	cf 93       	push	r28
    122a:	00 d0       	rcall	.+0      	; 0x122c <toaster_baking_handler+0x6>
    122c:	00 d0       	rcall	.+0      	; 0x122e <toaster_baking_handler+0x8>
    122e:	0f 92       	push	r0
    1230:	cd b7       	in	r28, 0x3d	; 61
    1232:	de b7       	in	r29, 0x3e	; 62
    1234:	9b 83       	std	Y+3, r25	; 0x03
    1236:	8a 83       	std	Y+2, r24	; 0x02
    1238:	7d 83       	std	Y+5, r23	; 0x05
    123a:	6c 83       	std	Y+4, r22	; 0x04
    123c:	19 82       	std	Y+1, r1	; 0x01
{
}
END_DEFINE_STATE()
    123e:	89 81       	ldd	r24, Y+1	; 0x01
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	cf 91       	pop	r28
    124c:	df 91       	pop	r29
    124e:	08 95       	ret

00001250 <toaster_toasting_handler>:


DEFINE_STATE(toasting)
    1250:	df 93       	push	r29
    1252:	cf 93       	push	r28
    1254:	00 d0       	rcall	.+0      	; 0x1256 <toaster_toasting_handler+0x6>
    1256:	00 d0       	rcall	.+0      	; 0x1258 <toaster_toasting_handler+0x8>
    1258:	0f 92       	push	r0
    125a:	cd b7       	in	r28, 0x3d	; 61
    125c:	de b7       	in	r29, 0x3e	; 62
    125e:	9b 83       	std	Y+3, r25	; 0x03
    1260:	8a 83       	std	Y+2, r24	; 0x02
    1262:	7d 83       	std	Y+5, r23	; 0x05
    1264:	6c 83       	std	Y+4, r22	; 0x04
    1266:	19 82       	std	Y+1, r1	; 0x01
{
}
END_DEFINE_STATE()
    1268:	89 81       	ldd	r24, Y+1	; 0x01
    126a:	0f 90       	pop	r0
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	cf 91       	pop	r28
    1276:	df 91       	pop	r29
    1278:	08 95       	ret

0000127a <toaster_off_handler>:


DEFINE_STATE(off)
    127a:	df 93       	push	r29
    127c:	cf 93       	push	r28
    127e:	00 d0       	rcall	.+0      	; 0x1280 <toaster_off_handler+0x6>
    1280:	00 d0       	rcall	.+0      	; 0x1282 <toaster_off_handler+0x8>
    1282:	0f 92       	push	r0
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
    1288:	9b 83       	std	Y+3, r25	; 0x03
    128a:	8a 83       	std	Y+2, r24	; 0x02
    128c:	7d 83       	std	Y+5, r23	; 0x05
    128e:	6c 83       	std	Y+4, r22	; 0x04
    1290:	19 82       	std	Y+1, r1	; 0x01
{
	heaterOff() ;
    1292:	0e 94 18 08 	call	0x1030	; 0x1030 <heaterOff>
	lampOff() ;
    1296:	0e 94 26 08 	call	0x104c	; 0x104c <lampOff>
}
END_DEFINE_STATE()
    129a:	89 81       	ldd	r24, Y+1	; 0x01
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	08 95       	ret

000012ac <toaster_doorOpen_handler>:


DEFINE_STATE(doorOpen)
    12ac:	df 93       	push	r29
    12ae:	cf 93       	push	r28
    12b0:	cd b7       	in	r28, 0x3d	; 61
    12b2:	de b7       	in	r29, 0x3e	; 62
    12b4:	27 97       	sbiw	r28, 0x07	; 7
    12b6:	0f b6       	in	r0, 0x3f	; 63
    12b8:	f8 94       	cli
    12ba:	de bf       	out	0x3e, r29	; 62
    12bc:	0f be       	out	0x3f, r0	; 63
    12be:	cd bf       	out	0x3d, r28	; 61
    12c0:	9c 83       	std	Y+4, r25	; 0x04
    12c2:	8b 83       	std	Y+3, r24	; 0x03
    12c4:	7e 83       	std	Y+6, r23	; 0x06
    12c6:	6d 83       	std	Y+5, r22	; 0x05
    12c8:	1a 82       	std	Y+2, r1	; 0x02
{
	DEFER_EVENT(BAKE) ;
    12ca:	ed 81       	ldd	r30, Y+5	; 0x05
    12cc:	fe 81       	ldd	r31, Y+6	; 0x06
    12ce:	80 81       	ld	r24, Z
    12d0:	81 30       	cpi	r24, 0x01	; 1
    12d2:	31 f4       	brne	.+12     	; 0x12e0 <toaster_doorOpen_handler+0x34>
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	9c 81       	ldd	r25, Y+4	; 0x04
    12d8:	66 e0       	ldi	r22, 0x06	; 6
    12da:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <addToDeferredTypeList>
    12de:	0a c0       	rjmp	.+20     	; 0x12f4 <toaster_doorOpen_handler+0x48>
    12e0:	ed 81       	ldd	r30, Y+5	; 0x05
    12e2:	fe 81       	ldd	r31, Y+6	; 0x06
    12e4:	80 81       	ld	r24, Z
    12e6:	85 30       	cpi	r24, 0x05	; 5
    12e8:	29 f4       	brne	.+10     	; 0x12f4 <toaster_doorOpen_handler+0x48>
    12ea:	8b 81       	ldd	r24, Y+3	; 0x03
    12ec:	9c 81       	ldd	r25, Y+4	; 0x04
    12ee:	66 e0       	ldi	r22, 0x06	; 6
    12f0:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <removeFromDeferredTypeList>
	DEFER_EVENT(TOAST) ;
    12f4:	ed 81       	ldd	r30, Y+5	; 0x05
    12f6:	fe 81       	ldd	r31, Y+6	; 0x06
    12f8:	80 81       	ld	r24, Z
    12fa:	81 30       	cpi	r24, 0x01	; 1
    12fc:	31 f4       	brne	.+12     	; 0x130a <toaster_doorOpen_handler+0x5e>
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	9c 81       	ldd	r25, Y+4	; 0x04
    1302:	67 e0       	ldi	r22, 0x07	; 7
    1304:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <addToDeferredTypeList>
    1308:	0a c0       	rjmp	.+20     	; 0x131e <toaster_doorOpen_handler+0x72>
    130a:	ed 81       	ldd	r30, Y+5	; 0x05
    130c:	fe 81       	ldd	r31, Y+6	; 0x06
    130e:	80 81       	ld	r24, Z
    1310:	85 30       	cpi	r24, 0x05	; 5
    1312:	29 f4       	brne	.+10     	; 0x131e <toaster_doorOpen_handler+0x72>
    1314:	8b 81       	ldd	r24, Y+3	; 0x03
    1316:	9c 81       	ldd	r25, Y+4	; 0x04
    1318:	67 e0       	ldi	r22, 0x07	; 7
    131a:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <removeFromDeferredTypeList>

	ON_ENTRY(	lampOn()) ;
    131e:	ed 81       	ldd	r30, Y+5	; 0x05
    1320:	fe 81       	ldd	r31, Y+6	; 0x06
    1322:	80 81       	ld	r24, Z
    1324:	81 30       	cpi	r24, 0x01	; 1
    1326:	29 f4       	brne	.+10     	; 0x1332 <toaster_doorOpen_handler+0x86>
    1328:	0e 94 1f 08 	call	0x103e	; 0x103e <lampOn>
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	8f 83       	std	Y+7, r24	; 0x07
    1330:	1e c0       	rjmp	.+60     	; 0x136e <toaster_doorOpen_handler+0xc2>
	ON_EXIT(	lampOff()) ;
    1332:	ed 81       	ldd	r30, Y+5	; 0x05
    1334:	fe 81       	ldd	r31, Y+6	; 0x06
    1336:	80 81       	ld	r24, Z
    1338:	85 30       	cpi	r24, 0x05	; 5
    133a:	29 f4       	brne	.+10     	; 0x1346 <toaster_doorOpen_handler+0x9a>
    133c:	0e 94 26 08 	call	0x104c	; 0x104c <lampOff>
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	8f 83       	std	Y+7, r24	; 0x07
    1344:	14 c0       	rjmp	.+40     	; 0x136e <toaster_doorOpen_handler+0xc2>

	TRANSITION_ON(CLOSE,	HISTORY_OF(doorClosed),		NO_ACTION) ;
    1346:	ed 81       	ldd	r30, Y+5	; 0x05
    1348:	fe 81       	ldd	r31, Y+6	; 0x06
    134a:	80 81       	ld	r24, Z
    134c:	8a 30       	cpi	r24, 0x0A	; 10
    134e:	69 f4       	brne	.+26     	; 0x136a <toaster_doorOpen_handler+0xbe>
    1350:	82 e0       	ldi	r24, 0x02	; 2
    1352:	89 83       	std	Y+1, r24	; 0x01
    1354:	eb 81       	ldd	r30, Y+3	; 0x03
    1356:	fc 81       	ldd	r31, Y+4	; 0x04
    1358:	81 e6       	ldi	r24, 0x61	; 97
    135a:	93 e0       	ldi	r25, 0x03	; 3
    135c:	97 83       	std	Z+7, r25	; 0x07
    135e:	86 83       	std	Z+6, r24	; 0x06
    1360:	83 e0       	ldi	r24, 0x03	; 3
    1362:	89 83       	std	Y+1, r24	; 0x01
    1364:	89 81       	ldd	r24, Y+1	; 0x01
    1366:	8f 83       	std	Y+7, r24	; 0x07
    1368:	02 c0       	rjmp	.+4      	; 0x136e <toaster_doorOpen_handler+0xc2>
}
END_DEFINE_STATE()
    136a:	8a 81       	ldd	r24, Y+2	; 0x02
    136c:	8f 83       	std	Y+7, r24	; 0x07
    136e:	8f 81       	ldd	r24, Y+7	; 0x07
    1370:	27 96       	adiw	r28, 0x07	; 7
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	f8 94       	cli
    1376:	de bf       	out	0x3e, r29	; 62
    1378:	0f be       	out	0x3f, r0	; 63
    137a:	cd bf       	out	0x3d, r28	; 61
    137c:	cf 91       	pop	r28
    137e:	df 91       	pop	r29
    1380:	08 95       	ret

00001382 <eventQueue_initialize>:
#include "stateMachine_G4.h"
#include "stateMachine_G4_eventQueue.h"


bool eventQueue_initialize(	eventQueue_t* Q, event_t** storage, eventQueueIndex_t maxEntriesInQueue)
{
    1382:	df 93       	push	r29
    1384:	cf 93       	push	r28
    1386:	00 d0       	rcall	.+0      	; 0x1388 <eventQueue_initialize+0x6>
    1388:	00 d0       	rcall	.+0      	; 0x138a <eventQueue_initialize+0x8>
    138a:	0f 92       	push	r0
    138c:	cd b7       	in	r28, 0x3d	; 61
    138e:	de b7       	in	r29, 0x3e	; 62
    1390:	9a 83       	std	Y+2, r25	; 0x02
    1392:	89 83       	std	Y+1, r24	; 0x01
    1394:	7c 83       	std	Y+4, r23	; 0x04
    1396:	6b 83       	std	Y+3, r22	; 0x03
    1398:	4d 83       	std	Y+5, r20	; 0x05
	Q->Capacity	= maxEntriesInQueue ;
    139a:	e9 81       	ldd	r30, Y+1	; 0x01
    139c:	fa 81       	ldd	r31, Y+2	; 0x02
    139e:	8d 81       	ldd	r24, Y+5	; 0x05
    13a0:	80 83       	st	Z, r24
	Q->Size		= 0 ;
    13a2:	e9 81       	ldd	r30, Y+1	; 0x01
    13a4:	fa 81       	ldd	r31, Y+2	; 0x02
    13a6:	13 82       	std	Z+3, r1	; 0x03
	Q->Front	= 1 ;
    13a8:	e9 81       	ldd	r30, Y+1	; 0x01
    13aa:	fa 81       	ldd	r31, Y+2	; 0x02
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	81 83       	std	Z+1, r24	; 0x01
	Q->Rear		= 0 ;
    13b0:	e9 81       	ldd	r30, Y+1	; 0x01
    13b2:	fa 81       	ldd	r31, Y+2	; 0x02
    13b4:	12 82       	std	Z+2, r1	; 0x02
	Q->Array	= storage ;
    13b6:	e9 81       	ldd	r30, Y+1	; 0x01
    13b8:	fa 81       	ldd	r31, Y+2	; 0x02
    13ba:	8b 81       	ldd	r24, Y+3	; 0x03
    13bc:	9c 81       	ldd	r25, Y+4	; 0x04
    13be:	95 83       	std	Z+5, r25	; 0x05
    13c0:	84 83       	std	Z+4, r24	; 0x04

	return true ;
    13c2:	81 e0       	ldi	r24, 0x01	; 1
}
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	cf 91       	pop	r28
    13d0:	df 91       	pop	r29
    13d2:	08 95       	ret

000013d4 <eventQueue_isEmpty>:


uint8_t eventQueue_isEmpty(	eventQueue_t* Q)
{
    13d4:	df 93       	push	r29
    13d6:	cf 93       	push	r28
    13d8:	00 d0       	rcall	.+0      	; 0x13da <eventQueue_isEmpty+0x6>
    13da:	0f 92       	push	r0
    13dc:	cd b7       	in	r28, 0x3d	; 61
    13de:	de b7       	in	r29, 0x3e	; 62
    13e0:	9a 83       	std	Y+2, r25	; 0x02
    13e2:	89 83       	std	Y+1, r24	; 0x01
	return Q->Size == 0 ;
    13e4:	e9 81       	ldd	r30, Y+1	; 0x01
    13e6:	fa 81       	ldd	r31, Y+2	; 0x02
    13e8:	83 81       	ldd	r24, Z+3	; 0x03
    13ea:	1b 82       	std	Y+3, r1	; 0x03
    13ec:	88 23       	and	r24, r24
    13ee:	11 f4       	brne	.+4      	; 0x13f4 <eventQueue_isEmpty+0x20>
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	8b 83       	std	Y+3, r24	; 0x03
    13f4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	cf 91       	pop	r28
    13fe:	df 91       	pop	r29
    1400:	08 95       	ret

00001402 <eventQueue_isFull>:


uint8_t eventQueue_isFull(	eventQueue_t* Q)
{
    1402:	df 93       	push	r29
    1404:	cf 93       	push	r28
    1406:	00 d0       	rcall	.+0      	; 0x1408 <eventQueue_isFull+0x6>
    1408:	0f 92       	push	r0
    140a:	cd b7       	in	r28, 0x3d	; 61
    140c:	de b7       	in	r29, 0x3e	; 62
    140e:	9a 83       	std	Y+2, r25	; 0x02
    1410:	89 83       	std	Y+1, r24	; 0x01
	return Q->Size == Q->Capacity ;
    1412:	e9 81       	ldd	r30, Y+1	; 0x01
    1414:	fa 81       	ldd	r31, Y+2	; 0x02
    1416:	93 81       	ldd	r25, Z+3	; 0x03
    1418:	e9 81       	ldd	r30, Y+1	; 0x01
    141a:	fa 81       	ldd	r31, Y+2	; 0x02
    141c:	80 81       	ld	r24, Z
    141e:	1b 82       	std	Y+3, r1	; 0x03
    1420:	98 17       	cp	r25, r24
    1422:	11 f4       	brne	.+4      	; 0x1428 <eventQueue_isFull+0x26>
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	8b 83       	std	Y+3, r24	; 0x03
    1428:	8b 81       	ldd	r24, Y+3	; 0x03
}
    142a:	0f 90       	pop	r0
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	cf 91       	pop	r28
    1432:	df 91       	pop	r29
    1434:	08 95       	ret

00001436 <nextLocationFromPoint>:


static eventQueueIndex_t nextLocationFromPoint(	eventQueue_t* Q, eventQueueIndex_t location)
{
    1436:	df 93       	push	r29
    1438:	cf 93       	push	r28
    143a:	00 d0       	rcall	.+0      	; 0x143c <nextLocationFromPoint+0x6>
    143c:	0f 92       	push	r0
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
    1442:	9a 83       	std	Y+2, r25	; 0x02
    1444:	89 83       	std	Y+1, r24	; 0x01
    1446:	6b 83       	std	Y+3, r22	; 0x03
	if(++location == Q->Capacity)
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	8f 5f       	subi	r24, 0xFF	; 255
    144c:	8b 83       	std	Y+3, r24	; 0x03
    144e:	e9 81       	ldd	r30, Y+1	; 0x01
    1450:	fa 81       	ldd	r31, Y+2	; 0x02
    1452:	90 81       	ld	r25, Z
    1454:	8b 81       	ldd	r24, Y+3	; 0x03
    1456:	89 17       	cp	r24, r25
    1458:	09 f4       	brne	.+2      	; 0x145c <nextLocationFromPoint+0x26>
	{
		location = 0 ;
    145a:	1b 82       	std	Y+3, r1	; 0x03
	}

	return location ;
    145c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	cf 91       	pop	r28
    1466:	df 91       	pop	r29
    1468:	08 95       	ret

0000146a <eventQueue_insert>:


extern char*	eventTypes[] ;

bool eventQueue_insert(		eventQueue_t* Q, event_t* event)
{
    146a:	df 93       	push	r29
    146c:	cf 93       	push	r28
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
    1472:	27 97       	sbiw	r28, 0x07	; 7
    1474:	0f b6       	in	r0, 0x3f	; 63
    1476:	f8 94       	cli
    1478:	de bf       	out	0x3e, r29	; 62
    147a:	0f be       	out	0x3f, r0	; 63
    147c:	cd bf       	out	0x3d, r28	; 61
    147e:	9a 83       	std	Y+2, r25	; 0x02
    1480:	89 83       	std	Y+1, r24	; 0x01
    1482:	7c 83       	std	Y+4, r23	; 0x04
    1484:	6b 83       	std	Y+3, r22	; 0x03
	if(!eventQueue_isFull(Q))
    1486:	89 81       	ldd	r24, Y+1	; 0x01
    1488:	9a 81       	ldd	r25, Y+2	; 0x02
    148a:	0e 94 01 0a 	call	0x1402	; 0x1402 <eventQueue_isFull>
    148e:	88 23       	and	r24, r24
    1490:	09 f0       	breq	.+2      	; 0x1494 <eventQueue_insert+0x2a>
    1492:	53 c0       	rjmp	.+166    	; 0x153a <eventQueue_insert+0xd0>
	{
		Q->Size++ ;
    1494:	e9 81       	ldd	r30, Y+1	; 0x01
    1496:	fa 81       	ldd	r31, Y+2	; 0x02
    1498:	83 81       	ldd	r24, Z+3	; 0x03
    149a:	8f 5f       	subi	r24, 0xFF	; 255
    149c:	e9 81       	ldd	r30, Y+1	; 0x01
    149e:	fa 81       	ldd	r31, Y+2	; 0x02
    14a0:	83 83       	std	Z+3, r24	; 0x03
		Q->Rear = nextLocationFromPoint(Q, Q->Rear) ;
    14a2:	e9 81       	ldd	r30, Y+1	; 0x01
    14a4:	fa 81       	ldd	r31, Y+2	; 0x02
    14a6:	22 81       	ldd	r18, Z+2	; 0x02
    14a8:	89 81       	ldd	r24, Y+1	; 0x01
    14aa:	9a 81       	ldd	r25, Y+2	; 0x02
    14ac:	62 2f       	mov	r22, r18
    14ae:	0e 94 1b 0a 	call	0x1436	; 0x1436 <nextLocationFromPoint>
    14b2:	e9 81       	ldd	r30, Y+1	; 0x01
    14b4:	fa 81       	ldd	r31, Y+2	; 0x02
    14b6:	82 83       	std	Z+2, r24	; 0x02
		Q->Array[Q->Rear] = event ;
    14b8:	e9 81       	ldd	r30, Y+1	; 0x01
    14ba:	fa 81       	ldd	r31, Y+2	; 0x02
    14bc:	24 81       	ldd	r18, Z+4	; 0x04
    14be:	35 81       	ldd	r19, Z+5	; 0x05
    14c0:	e9 81       	ldd	r30, Y+1	; 0x01
    14c2:	fa 81       	ldd	r31, Y+2	; 0x02
    14c4:	82 81       	ldd	r24, Z+2	; 0x02
    14c6:	99 27       	eor	r25, r25
    14c8:	87 fd       	sbrc	r24, 7
    14ca:	90 95       	com	r25
    14cc:	88 0f       	add	r24, r24
    14ce:	99 1f       	adc	r25, r25
    14d0:	f9 01       	movw	r30, r18
    14d2:	e8 0f       	add	r30, r24
    14d4:	f9 1f       	adc	r31, r25
    14d6:	8b 81       	ldd	r24, Y+3	; 0x03
    14d8:	9c 81       	ldd	r25, Y+4	; 0x04
    14da:	91 83       	std	Z+1, r25	; 0x01
    14dc:	80 83       	st	Z, r24

		printf("\t\t\tPosting event type: %s\n", event->eventType <= SUBSTATE_EXIT ? eventTypes[event->eventType] : "<USER_EVENT>") ;
    14de:	eb 81       	ldd	r30, Y+3	; 0x03
    14e0:	fc 81       	ldd	r31, Y+4	; 0x04
    14e2:	80 81       	ld	r24, Z
    14e4:	86 30       	cpi	r24, 0x06	; 6
    14e6:	78 f4       	brcc	.+30     	; 0x1506 <eventQueue_insert+0x9c>
    14e8:	eb 81       	ldd	r30, Y+3	; 0x03
    14ea:	fc 81       	ldd	r31, Y+4	; 0x04
    14ec:	80 81       	ld	r24, Z
    14ee:	88 2f       	mov	r24, r24
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	88 0f       	add	r24, r24
    14f4:	99 1f       	adc	r25, r25
    14f6:	fc 01       	movw	r30, r24
    14f8:	e6 58       	subi	r30, 0x86	; 134
    14fa:	fb 4f       	sbci	r31, 0xFB	; 251
    14fc:	80 81       	ld	r24, Z
    14fe:	91 81       	ldd	r25, Z+1	; 0x01
    1500:	9f 83       	std	Y+7, r25	; 0x07
    1502:	8e 83       	std	Y+6, r24	; 0x06
    1504:	04 c0       	rjmp	.+8      	; 0x150e <eventQueue_insert+0xa4>
    1506:	8a ed       	ldi	r24, 0xDA	; 218
    1508:	93 e0       	ldi	r25, 0x03	; 3
    150a:	9f 83       	std	Y+7, r25	; 0x07
    150c:	8e 83       	std	Y+6, r24	; 0x06
    150e:	00 d0       	rcall	.+0      	; 0x1510 <eventQueue_insert+0xa6>
    1510:	00 d0       	rcall	.+0      	; 0x1512 <eventQueue_insert+0xa8>
    1512:	ed b7       	in	r30, 0x3d	; 61
    1514:	fe b7       	in	r31, 0x3e	; 62
    1516:	31 96       	adiw	r30, 0x01	; 1
    1518:	87 ee       	ldi	r24, 0xE7	; 231
    151a:	93 e0       	ldi	r25, 0x03	; 3
    151c:	91 83       	std	Z+1, r25	; 0x01
    151e:	80 83       	st	Z, r24
    1520:	8e 81       	ldd	r24, Y+6	; 0x06
    1522:	9f 81       	ldd	r25, Y+7	; 0x07
    1524:	93 83       	std	Z+3, r25	; 0x03
    1526:	82 83       	std	Z+2, r24	; 0x02
    1528:	0e 94 2a 14 	call	0x2854	; 0x2854 <printf>
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0

		return true ;
    1534:	91 e0       	ldi	r25, 0x01	; 1
    1536:	9d 83       	std	Y+5, r25	; 0x05
    1538:	01 c0       	rjmp	.+2      	; 0x153c <eventQueue_insert+0xd2>
	}
	else
	{
		return false ;
    153a:	1d 82       	std	Y+5, r1	; 0x05
    153c:	8d 81       	ldd	r24, Y+5	; 0x05
	}
}
    153e:	27 96       	adiw	r28, 0x07	; 7
    1540:	0f b6       	in	r0, 0x3f	; 63
    1542:	f8 94       	cli
    1544:	de bf       	out	0x3e, r29	; 62
    1546:	0f be       	out	0x3f, r0	; 63
    1548:	cd bf       	out	0x3d, r28	; 61
    154a:	cf 91       	pop	r28
    154c:	df 91       	pop	r29
    154e:	08 95       	ret

00001550 <eventQueue_remove>:


event_t* eventQueue_remove(	eventQueue_t* Q)
{
    1550:	df 93       	push	r29
    1552:	cf 93       	push	r28
    1554:	00 d0       	rcall	.+0      	; 0x1556 <eventQueue_remove+0x6>
    1556:	00 d0       	rcall	.+0      	; 0x1558 <eventQueue_remove+0x8>
    1558:	00 d0       	rcall	.+0      	; 0x155a <eventQueue_remove+0xa>
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62
    155e:	9c 83       	std	Y+4, r25	; 0x04
    1560:	8b 83       	std	Y+3, r24	; 0x03
	if(!eventQueue_isEmpty(Q))
    1562:	8b 81       	ldd	r24, Y+3	; 0x03
    1564:	9c 81       	ldd	r25, Y+4	; 0x04
    1566:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <eventQueue_isEmpty>
    156a:	88 23       	and	r24, r24
    156c:	51 f5       	brne	.+84     	; 0x15c2 <eventQueue_remove+0x72>
	{
		event_t* eventReceived = Q->Array[Q->Front] ;
    156e:	eb 81       	ldd	r30, Y+3	; 0x03
    1570:	fc 81       	ldd	r31, Y+4	; 0x04
    1572:	24 81       	ldd	r18, Z+4	; 0x04
    1574:	35 81       	ldd	r19, Z+5	; 0x05
    1576:	eb 81       	ldd	r30, Y+3	; 0x03
    1578:	fc 81       	ldd	r31, Y+4	; 0x04
    157a:	81 81       	ldd	r24, Z+1	; 0x01
    157c:	99 27       	eor	r25, r25
    157e:	87 fd       	sbrc	r24, 7
    1580:	90 95       	com	r25
    1582:	88 0f       	add	r24, r24
    1584:	99 1f       	adc	r25, r25
    1586:	f9 01       	movw	r30, r18
    1588:	e8 0f       	add	r30, r24
    158a:	f9 1f       	adc	r31, r25
    158c:	80 81       	ld	r24, Z
    158e:	91 81       	ldd	r25, Z+1	; 0x01
    1590:	9a 83       	std	Y+2, r25	; 0x02
    1592:	89 83       	std	Y+1, r24	; 0x01

		Q->Size-- ;
    1594:	eb 81       	ldd	r30, Y+3	; 0x03
    1596:	fc 81       	ldd	r31, Y+4	; 0x04
    1598:	83 81       	ldd	r24, Z+3	; 0x03
    159a:	81 50       	subi	r24, 0x01	; 1
    159c:	eb 81       	ldd	r30, Y+3	; 0x03
    159e:	fc 81       	ldd	r31, Y+4	; 0x04
    15a0:	83 83       	std	Z+3, r24	; 0x03
		Q->Front = nextLocationFromPoint(Q, Q->Front) ;
    15a2:	eb 81       	ldd	r30, Y+3	; 0x03
    15a4:	fc 81       	ldd	r31, Y+4	; 0x04
    15a6:	21 81       	ldd	r18, Z+1	; 0x01
    15a8:	8b 81       	ldd	r24, Y+3	; 0x03
    15aa:	9c 81       	ldd	r25, Y+4	; 0x04
    15ac:	62 2f       	mov	r22, r18
    15ae:	0e 94 1b 0a 	call	0x1436	; 0x1436 <nextLocationFromPoint>
    15b2:	eb 81       	ldd	r30, Y+3	; 0x03
    15b4:	fc 81       	ldd	r31, Y+4	; 0x04
    15b6:	81 83       	std	Z+1, r24	; 0x01

		return eventReceived ;
    15b8:	89 81       	ldd	r24, Y+1	; 0x01
    15ba:	9a 81       	ldd	r25, Y+2	; 0x02
    15bc:	9e 83       	std	Y+6, r25	; 0x06
    15be:	8d 83       	std	Y+5, r24	; 0x05
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <eventQueue_remove+0x76>
	}
	else
	{
		return (event_t*)0 ;
    15c2:	1e 82       	std	Y+6, r1	; 0x06
    15c4:	1d 82       	std	Y+5, r1	; 0x05
    15c6:	8d 81       	ldd	r24, Y+5	; 0x05
    15c8:	9e 81       	ldd	r25, Y+6	; 0x06
	}
}
    15ca:	26 96       	adiw	r28, 0x06	; 6
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	f8 94       	cli
    15d0:	de bf       	out	0x3e, r29	; 62
    15d2:	0f be       	out	0x3f, r0	; 63
    15d4:	cd bf       	out	0x3d, r28	; 61
    15d6:	cf 91       	pop	r28
    15d8:	df 91       	pop	r29
    15da:	08 95       	ret

000015dc <addToDeferredTypeList>:


void addToDeferredTypeList(			stateMachine_t* sm, eventType_t	eventTypeToDefer)
{
    15dc:	df 93       	push	r29
    15de:	cf 93       	push	r28
    15e0:	00 d0       	rcall	.+0      	; 0x15e2 <addToDeferredTypeList+0x6>
    15e2:	0f 92       	push	r0
    15e4:	cd b7       	in	r28, 0x3d	; 61
    15e6:	de b7       	in	r29, 0x3e	; 62
    15e8:	9a 83       	std	Y+2, r25	; 0x02
    15ea:	89 83       	std	Y+1, r24	; 0x01
    15ec:	6b 83       	std	Y+3, r22	; 0x03
	if(sm->currentDepthOfEventsToDeferList < sm->maxDepthOfEventsToDeferList)
    15ee:	e9 81       	ldd	r30, Y+1	; 0x01
    15f0:	fa 81       	ldd	r31, Y+2	; 0x02
    15f2:	97 85       	ldd	r25, Z+15	; 0x0f
    15f4:	e9 81       	ldd	r30, Y+1	; 0x01
    15f6:	fa 81       	ldd	r31, Y+2	; 0x02
    15f8:	86 85       	ldd	r24, Z+14	; 0x0e
    15fa:	98 17       	cp	r25, r24
    15fc:	b4 f4       	brge	.+44     	; 0x162a <addToDeferredTypeList+0x4e>
	{
		sm->typesOfEventsToDefer[sm->currentDepthOfEventsToDeferList] = eventTypeToDefer ;
    15fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1600:	fa 81       	ldd	r31, Y+2	; 0x02
    1602:	20 89       	ldd	r18, Z+16	; 0x10
    1604:	31 89       	ldd	r19, Z+17	; 0x11
    1606:	e9 81       	ldd	r30, Y+1	; 0x01
    1608:	fa 81       	ldd	r31, Y+2	; 0x02
    160a:	87 85       	ldd	r24, Z+15	; 0x0f
    160c:	99 27       	eor	r25, r25
    160e:	87 fd       	sbrc	r24, 7
    1610:	90 95       	com	r25
    1612:	f9 01       	movw	r30, r18
    1614:	e8 0f       	add	r30, r24
    1616:	f9 1f       	adc	r31, r25
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    161a:	80 83       	st	Z, r24

		sm->currentDepthOfEventsToDeferList++ ;
    161c:	e9 81       	ldd	r30, Y+1	; 0x01
    161e:	fa 81       	ldd	r31, Y+2	; 0x02
    1620:	87 85       	ldd	r24, Z+15	; 0x0f
    1622:	8f 5f       	subi	r24, 0xFF	; 255
    1624:	e9 81       	ldd	r30, Y+1	; 0x01
    1626:	fa 81       	ldd	r31, Y+2	; 0x02
    1628:	87 87       	std	Z+15, r24	; 0x0f
	}
}
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	cf 91       	pop	r28
    1632:	df 91       	pop	r29
    1634:	08 95       	ret

00001636 <isEventTypeDeferred>:


bool isEventTypeDeferred(			stateMachine_t* sm, eventType_t	eventTypeToCheck)
{
    1636:	df 93       	push	r29
    1638:	cf 93       	push	r28
    163a:	00 d0       	rcall	.+0      	; 0x163c <isEventTypeDeferred+0x6>
    163c:	00 d0       	rcall	.+0      	; 0x163e <isEventTypeDeferred+0x8>
    163e:	0f 92       	push	r0
    1640:	cd b7       	in	r28, 0x3d	; 61
    1642:	de b7       	in	r29, 0x3e	; 62
    1644:	9b 83       	std	Y+3, r25	; 0x03
    1646:	8a 83       	std	Y+2, r24	; 0x02
    1648:	6c 83       	std	Y+4, r22	; 0x04
	eventType_t	i ;

	for( i = 0 ; i < sm->currentDepthOfEventsToDeferList ; i++ )
    164a:	19 82       	std	Y+1, r1	; 0x01
    164c:	14 c0       	rjmp	.+40     	; 0x1676 <isEventTypeDeferred+0x40>
	{
		if(sm->typesOfEventsToDefer[i] == eventTypeToCheck)
    164e:	ea 81       	ldd	r30, Y+2	; 0x02
    1650:	fb 81       	ldd	r31, Y+3	; 0x03
    1652:	20 89       	ldd	r18, Z+16	; 0x10
    1654:	31 89       	ldd	r19, Z+17	; 0x11
    1656:	89 81       	ldd	r24, Y+1	; 0x01
    1658:	88 2f       	mov	r24, r24
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	f9 01       	movw	r30, r18
    165e:	e8 0f       	add	r30, r24
    1660:	f9 1f       	adc	r31, r25
    1662:	90 81       	ld	r25, Z
    1664:	8c 81       	ldd	r24, Y+4	; 0x04
    1666:	98 17       	cp	r25, r24
    1668:	19 f4       	brne	.+6      	; 0x1670 <isEventTypeDeferred+0x3a>
		{
			return true ;
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	8d 83       	std	Y+5, r24	; 0x05
    166e:	10 c0       	rjmp	.+32     	; 0x1690 <isEventTypeDeferred+0x5a>

bool isEventTypeDeferred(			stateMachine_t* sm, eventType_t	eventTypeToCheck)
{
	eventType_t	i ;

	for( i = 0 ; i < sm->currentDepthOfEventsToDeferList ; i++ )
    1670:	89 81       	ldd	r24, Y+1	; 0x01
    1672:	8f 5f       	subi	r24, 0xFF	; 255
    1674:	89 83       	std	Y+1, r24	; 0x01
    1676:	89 81       	ldd	r24, Y+1	; 0x01
    1678:	28 2f       	mov	r18, r24
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	ea 81       	ldd	r30, Y+2	; 0x02
    167e:	fb 81       	ldd	r31, Y+3	; 0x03
    1680:	87 85       	ldd	r24, Z+15	; 0x0f
    1682:	99 27       	eor	r25, r25
    1684:	87 fd       	sbrc	r24, 7
    1686:	90 95       	com	r25
    1688:	28 17       	cp	r18, r24
    168a:	39 07       	cpc	r19, r25
    168c:	04 f3       	brlt	.-64     	; 0x164e <isEventTypeDeferred+0x18>
		{
			return true ;
		}
	}

	return false ;
    168e:	1d 82       	std	Y+5, r1	; 0x05
    1690:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1692:	0f 90       	pop	r0
    1694:	0f 90       	pop	r0
    1696:	0f 90       	pop	r0
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	cf 91       	pop	r28
    169e:	df 91       	pop	r29
    16a0:	08 95       	ret

000016a2 <removeFromDeferredTypeList>:


void removeFromDeferredTypeList(	stateMachine_t* sm, eventType_t	eventTypeToUnDefer)
{
    16a2:	df 93       	push	r29
    16a4:	cf 93       	push	r28
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
    16aa:	29 97       	sbiw	r28, 0x09	; 9
    16ac:	0f b6       	in	r0, 0x3f	; 63
    16ae:	f8 94       	cli
    16b0:	de bf       	out	0x3e, r29	; 62
    16b2:	0f be       	out	0x3f, r0	; 63
    16b4:	cd bf       	out	0x3d, r28	; 61
    16b6:	98 87       	std	Y+8, r25	; 0x08
    16b8:	8f 83       	std	Y+7, r24	; 0x07
    16ba:	69 87       	std	Y+9, r22	; 0x09
	if(sm->currentDepthOfEventsToDeferList > 0)
    16bc:	ef 81       	ldd	r30, Y+7	; 0x07
    16be:	f8 85       	ldd	r31, Y+8	; 0x08
    16c0:	87 85       	ldd	r24, Z+15	; 0x0f
    16c2:	18 16       	cp	r1, r24
    16c4:	0c f0       	brlt	.+2      	; 0x16c8 <removeFromDeferredTypeList+0x26>
    16c6:	90 c0       	rjmp	.+288    	; 0x17e8 <removeFromDeferredTypeList+0x146>
	{
		bool				found = false ;
    16c8:	1e 82       	std	Y+6, r1	; 0x06
		eventQueueIndex_t	i ;

		for( i = (sm->currentDepthOfEventsToDeferList - 1) ; i >= 0 ; i-- )
    16ca:	ef 81       	ldd	r30, Y+7	; 0x07
    16cc:	f8 85       	ldd	r31, Y+8	; 0x08
    16ce:	87 85       	ldd	r24, Z+15	; 0x0f
    16d0:	81 50       	subi	r24, 0x01	; 1
    16d2:	8d 83       	std	Y+5, r24	; 0x05
    16d4:	1c c0       	rjmp	.+56     	; 0x170e <removeFromDeferredTypeList+0x6c>
		{
			if(sm->typesOfEventsToDefer[i] == eventTypeToUnDefer)
    16d6:	ef 81       	ldd	r30, Y+7	; 0x07
    16d8:	f8 85       	ldd	r31, Y+8	; 0x08
    16da:	20 89       	ldd	r18, Z+16	; 0x10
    16dc:	31 89       	ldd	r19, Z+17	; 0x11
    16de:	8d 81       	ldd	r24, Y+5	; 0x05
    16e0:	99 27       	eor	r25, r25
    16e2:	87 fd       	sbrc	r24, 7
    16e4:	90 95       	com	r25
    16e6:	f9 01       	movw	r30, r18
    16e8:	e8 0f       	add	r30, r24
    16ea:	f9 1f       	adc	r31, r25
    16ec:	90 81       	ld	r25, Z
    16ee:	89 85       	ldd	r24, Y+9	; 0x09
    16f0:	98 17       	cp	r25, r24
    16f2:	51 f4       	brne	.+20     	; 0x1708 <removeFromDeferredTypeList+0x66>
			{
				found = true ;
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	8e 83       	std	Y+6, r24	; 0x06

				sm->currentDepthOfEventsToDeferList-- ;
    16f8:	ef 81       	ldd	r30, Y+7	; 0x07
    16fa:	f8 85       	ldd	r31, Y+8	; 0x08
    16fc:	87 85       	ldd	r24, Z+15	; 0x0f
    16fe:	81 50       	subi	r24, 0x01	; 1
    1700:	ef 81       	ldd	r30, Y+7	; 0x07
    1702:	f8 85       	ldd	r31, Y+8	; 0x08
    1704:	87 87       	std	Z+15, r24	; 0x0f
    1706:	06 c0       	rjmp	.+12     	; 0x1714 <removeFromDeferredTypeList+0x72>
	if(sm->currentDepthOfEventsToDeferList > 0)
	{
		bool				found = false ;
		eventQueueIndex_t	i ;

		for( i = (sm->currentDepthOfEventsToDeferList - 1) ; i >= 0 ; i-- )
    1708:	8d 81       	ldd	r24, Y+5	; 0x05
    170a:	81 50       	subi	r24, 0x01	; 1
    170c:	8d 83       	std	Y+5, r24	; 0x05
    170e:	8d 81       	ldd	r24, Y+5	; 0x05
    1710:	88 23       	and	r24, r24
    1712:	0c f7       	brge	.-62     	; 0x16d6 <removeFromDeferredTypeList+0x34>

				break ;
			}
		}

		if(found)
    1714:	8e 81       	ldd	r24, Y+6	; 0x06
    1716:	88 23       	and	r24, r24
    1718:	09 f4       	brne	.+2      	; 0x171c <removeFromDeferredTypeList+0x7a>
    171a:	66 c0       	rjmp	.+204    	; 0x17e8 <removeFromDeferredTypeList+0x146>
    171c:	1c c0       	rjmp	.+56     	; 0x1756 <removeFromDeferredTypeList+0xb4>
			event_t*	firstEvent ;
			event_t*	currentEvent ;

			for( i = i ; i < sm->currentDepthOfEventsToDeferList ; i++ )
			{
				sm->typesOfEventsToDefer[i] = sm->typesOfEventsToDefer[i + 1] ;
    171e:	ef 81       	ldd	r30, Y+7	; 0x07
    1720:	f8 85       	ldd	r31, Y+8	; 0x08
    1722:	20 89       	ldd	r18, Z+16	; 0x10
    1724:	31 89       	ldd	r19, Z+17	; 0x11
    1726:	8d 81       	ldd	r24, Y+5	; 0x05
    1728:	99 27       	eor	r25, r25
    172a:	87 fd       	sbrc	r24, 7
    172c:	90 95       	com	r25
    172e:	d9 01       	movw	r26, r18
    1730:	a8 0f       	add	r26, r24
    1732:	b9 1f       	adc	r27, r25
    1734:	ef 81       	ldd	r30, Y+7	; 0x07
    1736:	f8 85       	ldd	r31, Y+8	; 0x08
    1738:	20 89       	ldd	r18, Z+16	; 0x10
    173a:	31 89       	ldd	r19, Z+17	; 0x11
    173c:	8d 81       	ldd	r24, Y+5	; 0x05
    173e:	99 27       	eor	r25, r25
    1740:	87 fd       	sbrc	r24, 7
    1742:	90 95       	com	r25
    1744:	01 96       	adiw	r24, 0x01	; 1
    1746:	f9 01       	movw	r30, r18
    1748:	e8 0f       	add	r30, r24
    174a:	f9 1f       	adc	r31, r25
    174c:	80 81       	ld	r24, Z
    174e:	8c 93       	st	X, r24
		if(found)
		{
			event_t*	firstEvent ;
			event_t*	currentEvent ;

			for( i = i ; i < sm->currentDepthOfEventsToDeferList ; i++ )
    1750:	8d 81       	ldd	r24, Y+5	; 0x05
    1752:	8f 5f       	subi	r24, 0xFF	; 255
    1754:	8d 83       	std	Y+5, r24	; 0x05
    1756:	ef 81       	ldd	r30, Y+7	; 0x07
    1758:	f8 85       	ldd	r31, Y+8	; 0x08
    175a:	97 85       	ldd	r25, Z+15	; 0x0f
    175c:	8d 81       	ldd	r24, Y+5	; 0x05
    175e:	89 17       	cp	r24, r25
    1760:	f4 f2       	brlt	.-68     	; 0x171e <removeFromDeferredTypeList+0x7c>
			{
				sm->typesOfEventsToDefer[i] = sm->typesOfEventsToDefer[i + 1] ;
			}

			sm->typesOfEventsToDefer[sm->currentDepthOfEventsToDeferList] = 0 ;
    1762:	ef 81       	ldd	r30, Y+7	; 0x07
    1764:	f8 85       	ldd	r31, Y+8	; 0x08
    1766:	20 89       	ldd	r18, Z+16	; 0x10
    1768:	31 89       	ldd	r19, Z+17	; 0x11
    176a:	ef 81       	ldd	r30, Y+7	; 0x07
    176c:	f8 85       	ldd	r31, Y+8	; 0x08
    176e:	87 85       	ldd	r24, Z+15	; 0x0f
    1770:	99 27       	eor	r25, r25
    1772:	87 fd       	sbrc	r24, 7
    1774:	90 95       	com	r25
    1776:	f9 01       	movw	r30, r18
    1778:	e8 0f       	add	r30, r24
    177a:	f9 1f       	adc	r31, r25
    177c:	10 82       	st	Z, r1
			 * catch a possible endless loop just in case the deferred event queue was
			 * full and a type that wasn't in the deferred list was passed into this
			 * function. Yeah, that should never happen, but......
			 */

			currentEvent	= eventQueue_remove(&sm->deferredEventQueue) ;
    177e:	8f 81       	ldd	r24, Y+7	; 0x07
    1780:	98 85       	ldd	r25, Y+8	; 0x08
    1782:	42 96       	adiw	r24, 0x12	; 18
    1784:	0e 94 a8 0a 	call	0x1550	; 0x1550 <eventQueue_remove>
    1788:	9a 83       	std	Y+2, r25	; 0x02
    178a:	89 83       	std	Y+1, r24	; 0x01
			firstEvent		= currentEvent ;
    178c:	89 81       	ldd	r24, Y+1	; 0x01
    178e:	9a 81       	ldd	r25, Y+2	; 0x02
    1790:	9c 83       	std	Y+4, r25	; 0x04
    1792:	8b 83       	std	Y+3, r24	; 0x03
    1794:	25 c0       	rjmp	.+74     	; 0x17e0 <removeFromDeferredTypeList+0x13e>
				 * event queue is full, then these events will be discarded which
				 * is exactly what would have happened if the event hadn't been
				 * deferred and the normal event queue was full.
				 */

				if(currentEvent->eventType == eventTypeToUnDefer)
    1796:	e9 81       	ldd	r30, Y+1	; 0x01
    1798:	fa 81       	ldd	r31, Y+2	; 0x02
    179a:	90 81       	ld	r25, Z
    179c:	89 85       	ldd	r24, Y+9	; 0x09
    179e:	98 17       	cp	r25, r24
    17a0:	49 f4       	brne	.+18     	; 0x17b4 <removeFromDeferredTypeList+0x112>
				{
					eventQueue_insert(&sm->eventQueue, currentEvent) ;
    17a2:	8f 81       	ldd	r24, Y+7	; 0x07
    17a4:	98 85       	ldd	r25, Y+8	; 0x08
    17a6:	08 96       	adiw	r24, 0x08	; 8
    17a8:	29 81       	ldd	r18, Y+1	; 0x01
    17aa:	3a 81       	ldd	r19, Y+2	; 0x02
    17ac:	b9 01       	movw	r22, r18
    17ae:	0e 94 35 0a 	call	0x146a	; 0x146a <eventQueue_insert>
    17b2:	08 c0       	rjmp	.+16     	; 0x17c4 <removeFromDeferredTypeList+0x122>
				}
				else
				{
					eventQueue_insert(&sm->deferredEventQueue, currentEvent) ;
    17b4:	8f 81       	ldd	r24, Y+7	; 0x07
    17b6:	98 85       	ldd	r25, Y+8	; 0x08
    17b8:	42 96       	adiw	r24, 0x12	; 18
    17ba:	29 81       	ldd	r18, Y+1	; 0x01
    17bc:	3a 81       	ldd	r19, Y+2	; 0x02
    17be:	b9 01       	movw	r22, r18
    17c0:	0e 94 35 0a 	call	0x146a	; 0x146a <eventQueue_insert>
				 * first event. I have to check this just in case the queue was full
				 * since an endless loop can happen in this case if the check were
				 * not done.
				 */

				currentEvent = eventQueue_remove(&sm->deferredEventQueue) ;
    17c4:	8f 81       	ldd	r24, Y+7	; 0x07
    17c6:	98 85       	ldd	r25, Y+8	; 0x08
    17c8:	42 96       	adiw	r24, 0x12	; 18
    17ca:	0e 94 a8 0a 	call	0x1550	; 0x1550 <eventQueue_remove>
    17ce:	9a 83       	std	Y+2, r25	; 0x02
    17d0:	89 83       	std	Y+1, r24	; 0x01

				if(currentEvent == firstEvent)
    17d2:	29 81       	ldd	r18, Y+1	; 0x01
    17d4:	3a 81       	ldd	r19, Y+2	; 0x02
    17d6:	8b 81       	ldd	r24, Y+3	; 0x03
    17d8:	9c 81       	ldd	r25, Y+4	; 0x04
    17da:	28 17       	cp	r18, r24
    17dc:	39 07       	cpc	r19, r25
    17de:	21 f0       	breq	.+8      	; 0x17e8 <removeFromDeferredTypeList+0x146>
			 */

			currentEvent	= eventQueue_remove(&sm->deferredEventQueue) ;
			firstEvent		= currentEvent ;

			while(currentEvent)
    17e0:	89 81       	ldd	r24, Y+1	; 0x01
    17e2:	9a 81       	ldd	r25, Y+2	; 0x02
    17e4:	00 97       	sbiw	r24, 0x00	; 0
    17e6:	b9 f6       	brne	.-82     	; 0x1796 <removeFromDeferredTypeList+0xf4>
					break ;
				}
			}
		}
	}
}
    17e8:	29 96       	adiw	r28, 0x09	; 9
    17ea:	0f b6       	in	r0, 0x3f	; 63
    17ec:	f8 94       	cli
    17ee:	de bf       	out	0x3e, r29	; 62
    17f0:	0f be       	out	0x3f, r0	; 63
    17f2:	cd bf       	out	0x3d, r28	; 61
    17f4:	cf 91       	pop	r28
    17f6:	df 91       	pop	r29
    17f8:	08 95       	ret

000017fa <postEventToStateMachine>:


bool postEventToStateMachine(			stateMachine_t* sm, event_t* event)
{
    17fa:	df 93       	push	r29
    17fc:	cf 93       	push	r28
    17fe:	00 d0       	rcall	.+0      	; 0x1800 <postEventToStateMachine+0x6>
    1800:	00 d0       	rcall	.+0      	; 0x1802 <postEventToStateMachine+0x8>
    1802:	0f 92       	push	r0
    1804:	cd b7       	in	r28, 0x3d	; 61
    1806:	de b7       	in	r29, 0x3e	; 62
    1808:	9a 83       	std	Y+2, r25	; 0x02
    180a:	89 83       	std	Y+1, r24	; 0x01
    180c:	7c 83       	std	Y+4, r23	; 0x04
    180e:	6b 83       	std	Y+3, r22	; 0x03
	if(isEventTypeDeferred(sm, event->eventType))
    1810:	eb 81       	ldd	r30, Y+3	; 0x03
    1812:	fc 81       	ldd	r31, Y+4	; 0x04
    1814:	20 81       	ld	r18, Z
    1816:	89 81       	ldd	r24, Y+1	; 0x01
    1818:	9a 81       	ldd	r25, Y+2	; 0x02
    181a:	62 2f       	mov	r22, r18
    181c:	0e 94 1b 0b 	call	0x1636	; 0x1636 <isEventTypeDeferred>
    1820:	88 23       	and	r24, r24
    1822:	51 f0       	breq	.+20     	; 0x1838 <postEventToStateMachine+0x3e>
	{
		return eventQueue_insert(&sm->deferredEventQueue, event) ;
    1824:	89 81       	ldd	r24, Y+1	; 0x01
    1826:	9a 81       	ldd	r25, Y+2	; 0x02
    1828:	42 96       	adiw	r24, 0x12	; 18
    182a:	2b 81       	ldd	r18, Y+3	; 0x03
    182c:	3c 81       	ldd	r19, Y+4	; 0x04
    182e:	b9 01       	movw	r22, r18
    1830:	0e 94 35 0a 	call	0x146a	; 0x146a <eventQueue_insert>
    1834:	8d 83       	std	Y+5, r24	; 0x05
    1836:	09 c0       	rjmp	.+18     	; 0x184a <postEventToStateMachine+0x50>
	}
	else
	{
		return eventQueue_insert(&sm->eventQueue, event) ;
    1838:	89 81       	ldd	r24, Y+1	; 0x01
    183a:	9a 81       	ldd	r25, Y+2	; 0x02
    183c:	08 96       	adiw	r24, 0x08	; 8
    183e:	2b 81       	ldd	r18, Y+3	; 0x03
    1840:	3c 81       	ldd	r19, Y+4	; 0x04
    1842:	b9 01       	movw	r22, r18
    1844:	0e 94 35 0a 	call	0x146a	; 0x146a <eventQueue_insert>
    1848:	8d 83       	std	Y+5, r24	; 0x05
    184a:	8d 81       	ldd	r24, Y+5	; 0x05
	}
}
    184c:	0f 90       	pop	r0
    184e:	0f 90       	pop	r0
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	0f 90       	pop	r0
    1856:	cf 91       	pop	r28
    1858:	df 91       	pop	r29
    185a:	08 95       	ret

0000185c <allocateStateMachineMemory>:
void iterateStateMachine(	stateMachine_t* sm) ;


stateMachine_t* allocateStateMachineMemory(		uint16_t eventQueueDepth,
												stateMachine_constructor_t constructor)
{
    185c:	df 93       	push	r29
    185e:	cf 93       	push	r28
    1860:	cd b7       	in	r28, 0x3d	; 61
    1862:	de b7       	in	r29, 0x3e	; 62
    1864:	2c 97       	sbiw	r28, 0x0c	; 12
    1866:	0f b6       	in	r0, 0x3f	; 63
    1868:	f8 94       	cli
    186a:	de bf       	out	0x3e, r29	; 62
    186c:	0f be       	out	0x3f, r0	; 63
    186e:	cd bf       	out	0x3d, r28	; 61
    1870:	9a 87       	std	Y+10, r25	; 0x0a
    1872:	89 87       	std	Y+9, r24	; 0x09
    1874:	7c 87       	std	Y+12, r23	; 0x0c
    1876:	6b 87       	std	Y+11, r22	; 0x0b
	stateMachine_t*	instance = malloc(sizeof(stateMachine_t)) ;
    1878:	82 e2       	ldi	r24, 0x22	; 34
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	0e 94 1e 13 	call	0x263c	; 0x263c <malloc>
    1880:	98 87       	std	Y+8, r25	; 0x08
    1882:	8f 83       	std	Y+7, r24	; 0x07

	if(instance)
    1884:	8f 81       	ldd	r24, Y+7	; 0x07
    1886:	98 85       	ldd	r25, Y+8	; 0x08
    1888:	00 97       	sbiw	r24, 0x00	; 0
    188a:	09 f4       	brne	.+2      	; 0x188e <allocateStateMachineMemory+0x32>
    188c:	69 c0       	rjmp	.+210    	; 0x1960 <allocateStateMachineMemory+0x104>
	{
		event_t** eventQueue ;

		memset((char*)instance, 0, sizeof(stateMachine_t)) ;
    188e:	8f 81       	ldd	r24, Y+7	; 0x07
    1890:	98 85       	ldd	r25, Y+8	; 0x08
    1892:	60 e0       	ldi	r22, 0x00	; 0
    1894:	70 e0       	ldi	r23, 0x00	; 0
    1896:	42 e2       	ldi	r20, 0x22	; 34
    1898:	50 e0       	ldi	r21, 0x00	; 0
    189a:	0e 94 23 14 	call	0x2846	; 0x2846 <memset>

		eventQueue = (event_t**)malloc(eventQueueDepth * sizeof(event_t*)) ;
    189e:	89 85       	ldd	r24, Y+9	; 0x09
    18a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    18a2:	88 0f       	add	r24, r24
    18a4:	99 1f       	adc	r25, r25
    18a6:	0e 94 1e 13 	call	0x263c	; 0x263c <malloc>
    18aa:	9e 83       	std	Y+6, r25	; 0x06
    18ac:	8d 83       	std	Y+5, r24	; 0x05

		if(eventQueue)
    18ae:	8d 81       	ldd	r24, Y+5	; 0x05
    18b0:	9e 81       	ldd	r25, Y+6	; 0x06
    18b2:	00 97       	sbiw	r24, 0x00	; 0
    18b4:	09 f4       	brne	.+2      	; 0x18b8 <allocateStateMachineMemory+0x5c>
    18b6:	54 c0       	rjmp	.+168    	; 0x1960 <allocateStateMachineMemory+0x104>
		{
			eventType_t* typesOfEventsToDefer ;

			memset((char*)eventQueue, 0, eventQueueDepth * sizeof(event_t*)) ;
    18b8:	89 85       	ldd	r24, Y+9	; 0x09
    18ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    18bc:	9c 01       	movw	r18, r24
    18be:	22 0f       	add	r18, r18
    18c0:	33 1f       	adc	r19, r19
    18c2:	8d 81       	ldd	r24, Y+5	; 0x05
    18c4:	9e 81       	ldd	r25, Y+6	; 0x06
    18c6:	60 e0       	ldi	r22, 0x00	; 0
    18c8:	70 e0       	ldi	r23, 0x00	; 0
    18ca:	a9 01       	movw	r20, r18
    18cc:	0e 94 23 14 	call	0x2846	; 0x2846 <memset>
			eventQueue_initialize(&instance->eventQueue, eventQueue, eventQueueDepth) ;
    18d0:	8f 81       	ldd	r24, Y+7	; 0x07
    18d2:	98 85       	ldd	r25, Y+8	; 0x08
    18d4:	08 96       	adiw	r24, 0x08	; 8
    18d6:	49 85       	ldd	r20, Y+9	; 0x09
    18d8:	2d 81       	ldd	r18, Y+5	; 0x05
    18da:	3e 81       	ldd	r19, Y+6	; 0x06
    18dc:	b9 01       	movw	r22, r18
    18de:	0e 94 c1 09 	call	0x1382	; 0x1382 <eventQueue_initialize>

			typesOfEventsToDefer = (eventType_t*)malloc(eventQueueDepth * sizeof(eventType_t*)) ;
    18e2:	89 85       	ldd	r24, Y+9	; 0x09
    18e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18e6:	88 0f       	add	r24, r24
    18e8:	99 1f       	adc	r25, r25
    18ea:	0e 94 1e 13 	call	0x263c	; 0x263c <malloc>
    18ee:	9c 83       	std	Y+4, r25	; 0x04
    18f0:	8b 83       	std	Y+3, r24	; 0x03

			if(typesOfEventsToDefer)
    18f2:	8b 81       	ldd	r24, Y+3	; 0x03
    18f4:	9c 81       	ldd	r25, Y+4	; 0x04
    18f6:	00 97       	sbiw	r24, 0x00	; 0
    18f8:	99 f1       	breq	.+102    	; 0x1960 <allocateStateMachineMemory+0x104>
			{
				event_t** deferredEventQueue ;

				instance->maxDepthOfEventsToDeferList		= eventQueueDepth ;
    18fa:	89 85       	ldd	r24, Y+9	; 0x09
    18fc:	ef 81       	ldd	r30, Y+7	; 0x07
    18fe:	f8 85       	ldd	r31, Y+8	; 0x08
    1900:	86 87       	std	Z+14, r24	; 0x0e
				instance->currentDepthOfEventsToDeferList	= 0 ;
    1902:	ef 81       	ldd	r30, Y+7	; 0x07
    1904:	f8 85       	ldd	r31, Y+8	; 0x08
    1906:	17 86       	std	Z+15, r1	; 0x0f
				instance->typesOfEventsToDefer				= typesOfEventsToDefer ;
    1908:	ef 81       	ldd	r30, Y+7	; 0x07
    190a:	f8 85       	ldd	r31, Y+8	; 0x08
    190c:	8b 81       	ldd	r24, Y+3	; 0x03
    190e:	9c 81       	ldd	r25, Y+4	; 0x04
    1910:	91 8b       	std	Z+17, r25	; 0x11
    1912:	80 8b       	std	Z+16, r24	; 0x10

				deferredEventQueue = (event_t**)malloc(eventQueueDepth * sizeof(event_t*)) ;
    1914:	89 85       	ldd	r24, Y+9	; 0x09
    1916:	9a 85       	ldd	r25, Y+10	; 0x0a
    1918:	88 0f       	add	r24, r24
    191a:	99 1f       	adc	r25, r25
    191c:	0e 94 1e 13 	call	0x263c	; 0x263c <malloc>
    1920:	9a 83       	std	Y+2, r25	; 0x02
    1922:	89 83       	std	Y+1, r24	; 0x01

				if(deferredEventQueue)
    1924:	89 81       	ldd	r24, Y+1	; 0x01
    1926:	9a 81       	ldd	r25, Y+2	; 0x02
    1928:	00 97       	sbiw	r24, 0x00	; 0
    192a:	d1 f0       	breq	.+52     	; 0x1960 <allocateStateMachineMemory+0x104>
				{
					memset((char*)deferredEventQueue, 0, eventQueueDepth * sizeof(event_t*)) ;
    192c:	89 85       	ldd	r24, Y+9	; 0x09
    192e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1930:	9c 01       	movw	r18, r24
    1932:	22 0f       	add	r18, r18
    1934:	33 1f       	adc	r19, r19
    1936:	89 81       	ldd	r24, Y+1	; 0x01
    1938:	9a 81       	ldd	r25, Y+2	; 0x02
    193a:	60 e0       	ldi	r22, 0x00	; 0
    193c:	70 e0       	ldi	r23, 0x00	; 0
    193e:	a9 01       	movw	r20, r18
    1940:	0e 94 23 14 	call	0x2846	; 0x2846 <memset>
					eventQueue_initialize(&instance->deferredEventQueue, deferredEventQueue, eventQueueDepth) ;
    1944:	8f 81       	ldd	r24, Y+7	; 0x07
    1946:	98 85       	ldd	r25, Y+8	; 0x08
    1948:	42 96       	adiw	r24, 0x12	; 18
    194a:	49 85       	ldd	r20, Y+9	; 0x09
    194c:	29 81       	ldd	r18, Y+1	; 0x01
    194e:	3a 81       	ldd	r19, Y+2	; 0x02
    1950:	b9 01       	movw	r22, r18
    1952:	0e 94 c1 09 	call	0x1382	; 0x1382 <eventQueue_initialize>

					constructor(instance) ;
    1956:	8f 81       	ldd	r24, Y+7	; 0x07
    1958:	98 85       	ldd	r25, Y+8	; 0x08
    195a:	eb 85       	ldd	r30, Y+11	; 0x0b
    195c:	fc 85       	ldd	r31, Y+12	; 0x0c
    195e:	09 95       	icall
				}
			}
		}
	}

	return instance ;
    1960:	8f 81       	ldd	r24, Y+7	; 0x07
    1962:	98 85       	ldd	r25, Y+8	; 0x08
}
    1964:	2c 96       	adiw	r28, 0x0c	; 12
    1966:	0f b6       	in	r0, 0x3f	; 63
    1968:	f8 94       	cli
    196a:	de bf       	out	0x3e, r29	; 62
    196c:	0f be       	out	0x3f, r0	; 63
    196e:	cd bf       	out	0x3d, r28	; 61
    1970:	cf 91       	pop	r28
    1972:	df 91       	pop	r29
    1974:	08 95       	ret

00001976 <deallocateStateMachineMemory>:


void deallocateStateMachineMemory(				stateMachine_t* instance, stateMachine_destructor_t destructor)
{
    1976:	df 93       	push	r29
    1978:	cf 93       	push	r28
    197a:	00 d0       	rcall	.+0      	; 0x197c <deallocateStateMachineMemory+0x6>
    197c:	00 d0       	rcall	.+0      	; 0x197e <deallocateStateMachineMemory+0x8>
    197e:	cd b7       	in	r28, 0x3d	; 61
    1980:	de b7       	in	r29, 0x3e	; 62
    1982:	9a 83       	std	Y+2, r25	; 0x02
    1984:	89 83       	std	Y+1, r24	; 0x01
    1986:	7c 83       	std	Y+4, r23	; 0x04
    1988:	6b 83       	std	Y+3, r22	; 0x03
	if(instance != 0)
    198a:	89 81       	ldd	r24, Y+1	; 0x01
    198c:	9a 81       	ldd	r25, Y+2	; 0x02
    198e:	00 97       	sbiw	r24, 0x00	; 0
    1990:	49 f0       	breq	.+18     	; 0x19a4 <deallocateStateMachineMemory+0x2e>
	{
		destructor(instance) ;
    1992:	89 81       	ldd	r24, Y+1	; 0x01
    1994:	9a 81       	ldd	r25, Y+2	; 0x02
    1996:	eb 81       	ldd	r30, Y+3	; 0x03
    1998:	fc 81       	ldd	r31, Y+4	; 0x04
    199a:	09 95       	icall

		free((char*)instance) ;
    199c:	89 81       	ldd	r24, Y+1	; 0x01
    199e:	9a 81       	ldd	r25, Y+2	; 0x02
    19a0:	0e 94 cb 13 	call	0x2796	; 0x2796 <free>
	}
}
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	cf 91       	pop	r28
    19ae:	df 91       	pop	r29
    19b0:	08 95       	ret

000019b2 <registerStateMachine>:


bool registerStateMachine(			stateMachine_t* sm)
{
    19b2:	df 93       	push	r29
    19b4:	cf 93       	push	r28
    19b6:	00 d0       	rcall	.+0      	; 0x19b8 <registerStateMachine+0x6>
    19b8:	00 d0       	rcall	.+0      	; 0x19ba <registerStateMachine+0x8>
    19ba:	cd b7       	in	r28, 0x3d	; 61
    19bc:	de b7       	in	r29, 0x3e	; 62
    19be:	9b 83       	std	Y+3, r25	; 0x03
    19c0:	8a 83       	std	Y+2, r24	; 0x02
	if(sm)
    19c2:	8a 81       	ldd	r24, Y+2	; 0x02
    19c4:	9b 81       	ldd	r25, Y+3	; 0x03
    19c6:	00 97       	sbiw	r24, 0x00	; 0
    19c8:	19 f1       	breq	.+70     	; 0x1a10 <registerStateMachine+0x5e>
	{
		uint8_t	statetMachineIndex ;

		for( statetMachineIndex = 0 ; statetMachineIndex < configMAXIMUM_NUMBER_OF_STATE_MACHINES ; statetMachineIndex++ )
    19ca:	19 82       	std	Y+1, r1	; 0x01
    19cc:	1e c0       	rjmp	.+60     	; 0x1a0a <registerStateMachine+0x58>
		{
			if(stateMachines[statetMachineIndex] == NULL)
    19ce:	89 81       	ldd	r24, Y+1	; 0x01
    19d0:	88 2f       	mov	r24, r24
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	88 0f       	add	r24, r24
    19d6:	99 1f       	adc	r25, r25
    19d8:	fc 01       	movw	r30, r24
    19da:	e8 59       	subi	r30, 0x98	; 152
    19dc:	f8 4f       	sbci	r31, 0xF8	; 248
    19de:	80 81       	ld	r24, Z
    19e0:	91 81       	ldd	r25, Z+1	; 0x01
    19e2:	00 97       	sbiw	r24, 0x00	; 0
    19e4:	79 f4       	brne	.+30     	; 0x1a04 <registerStateMachine+0x52>
			{
				stateMachines[statetMachineIndex] = sm ;
    19e6:	89 81       	ldd	r24, Y+1	; 0x01
    19e8:	88 2f       	mov	r24, r24
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	88 0f       	add	r24, r24
    19ee:	99 1f       	adc	r25, r25
    19f0:	fc 01       	movw	r30, r24
    19f2:	e8 59       	subi	r30, 0x98	; 152
    19f4:	f8 4f       	sbci	r31, 0xF8	; 248
    19f6:	8a 81       	ldd	r24, Y+2	; 0x02
    19f8:	9b 81       	ldd	r25, Y+3	; 0x03
    19fa:	91 83       	std	Z+1, r25	; 0x01
    19fc:	80 83       	st	Z, r24

				return true ;
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	8c 83       	std	Y+4, r24	; 0x04
    1a02:	07 c0       	rjmp	.+14     	; 0x1a12 <registerStateMachine+0x60>
{
	if(sm)
	{
		uint8_t	statetMachineIndex ;

		for( statetMachineIndex = 0 ; statetMachineIndex < configMAXIMUM_NUMBER_OF_STATE_MACHINES ; statetMachineIndex++ )
    1a04:	89 81       	ldd	r24, Y+1	; 0x01
    1a06:	8f 5f       	subi	r24, 0xFF	; 255
    1a08:	89 83       	std	Y+1, r24	; 0x01
    1a0a:	89 81       	ldd	r24, Y+1	; 0x01
    1a0c:	82 33       	cpi	r24, 0x32	; 50
    1a0e:	f8 f2       	brcs	.-66     	; 0x19ce <registerStateMachine+0x1c>
				return true ;
			}
		}
	}

	return false ;
    1a10:	1c 82       	std	Y+4, r1	; 0x04
    1a12:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1a14:	0f 90       	pop	r0
    1a16:	0f 90       	pop	r0
    1a18:	0f 90       	pop	r0
    1a1a:	0f 90       	pop	r0
    1a1c:	cf 91       	pop	r28
    1a1e:	df 91       	pop	r29
    1a20:	08 95       	ret

00001a22 <unregisterStateMachine>:

bool unregisterStateMachine(		stateMachine_t* sm)
{
    1a22:	df 93       	push	r29
    1a24:	cf 93       	push	r28
    1a26:	00 d0       	rcall	.+0      	; 0x1a28 <unregisterStateMachine+0x6>
    1a28:	00 d0       	rcall	.+0      	; 0x1a2a <unregisterStateMachine+0x8>
    1a2a:	cd b7       	in	r28, 0x3d	; 61
    1a2c:	de b7       	in	r29, 0x3e	; 62
    1a2e:	9b 83       	std	Y+3, r25	; 0x03
    1a30:	8a 83       	std	Y+2, r24	; 0x02
	if(sm)
    1a32:	8a 81       	ldd	r24, Y+2	; 0x02
    1a34:	9b 81       	ldd	r25, Y+3	; 0x03
    1a36:	00 97       	sbiw	r24, 0x00	; 0
    1a38:	21 f1       	breq	.+72     	; 0x1a82 <unregisterStateMachine+0x60>
	{
		uint8_t	statetMachineIndex ;

		for( statetMachineIndex = 0 ; statetMachineIndex < configMAXIMUM_NUMBER_OF_STATE_MACHINES ; statetMachineIndex++ )
    1a3a:	19 82       	std	Y+1, r1	; 0x01
    1a3c:	1f c0       	rjmp	.+62     	; 0x1a7c <unregisterStateMachine+0x5a>
		{
			if(stateMachines[statetMachineIndex] == sm)
    1a3e:	89 81       	ldd	r24, Y+1	; 0x01
    1a40:	88 2f       	mov	r24, r24
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	88 0f       	add	r24, r24
    1a46:	99 1f       	adc	r25, r25
    1a48:	fc 01       	movw	r30, r24
    1a4a:	e8 59       	subi	r30, 0x98	; 152
    1a4c:	f8 4f       	sbci	r31, 0xF8	; 248
    1a4e:	20 81       	ld	r18, Z
    1a50:	31 81       	ldd	r19, Z+1	; 0x01
    1a52:	8a 81       	ldd	r24, Y+2	; 0x02
    1a54:	9b 81       	ldd	r25, Y+3	; 0x03
    1a56:	28 17       	cp	r18, r24
    1a58:	39 07       	cpc	r19, r25
    1a5a:	69 f4       	brne	.+26     	; 0x1a76 <unregisterStateMachine+0x54>
			{
				stateMachines[statetMachineIndex] = NULL ;
    1a5c:	89 81       	ldd	r24, Y+1	; 0x01
    1a5e:	88 2f       	mov	r24, r24
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	88 0f       	add	r24, r24
    1a64:	99 1f       	adc	r25, r25
    1a66:	fc 01       	movw	r30, r24
    1a68:	e8 59       	subi	r30, 0x98	; 152
    1a6a:	f8 4f       	sbci	r31, 0xF8	; 248
    1a6c:	11 82       	std	Z+1, r1	; 0x01
    1a6e:	10 82       	st	Z, r1

				return true ;
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	8c 83       	std	Y+4, r24	; 0x04
    1a74:	07 c0       	rjmp	.+14     	; 0x1a84 <unregisterStateMachine+0x62>
{
	if(sm)
	{
		uint8_t	statetMachineIndex ;

		for( statetMachineIndex = 0 ; statetMachineIndex < configMAXIMUM_NUMBER_OF_STATE_MACHINES ; statetMachineIndex++ )
    1a76:	89 81       	ldd	r24, Y+1	; 0x01
    1a78:	8f 5f       	subi	r24, 0xFF	; 255
    1a7a:	89 83       	std	Y+1, r24	; 0x01
    1a7c:	89 81       	ldd	r24, Y+1	; 0x01
    1a7e:	82 33       	cpi	r24, 0x32	; 50
    1a80:	f0 f2       	brcs	.-68     	; 0x1a3e <unregisterStateMachine+0x1c>
				return true ;
			}
		}
	}

	return false ;
    1a82:	1c 82       	std	Y+4, r1	; 0x04
    1a84:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1a86:	0f 90       	pop	r0
    1a88:	0f 90       	pop	r0
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	cf 91       	pop	r28
    1a90:	df 91       	pop	r29
    1a92:	08 95       	ret

00001a94 <iterateAllStateMachines>:


void iterateAllStateMachines(	void)
{
    1a94:	df 93       	push	r29
    1a96:	cf 93       	push	r28
    1a98:	0f 92       	push	r0
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62
	uint8_t	statetMachineIndex ;

	for( statetMachineIndex = 0 ; statetMachineIndex < configMAXIMUM_NUMBER_OF_STATE_MACHINES ; statetMachineIndex++ )
    1a9e:	19 82       	std	Y+1, r1	; 0x01
    1aa0:	1b c0       	rjmp	.+54     	; 0x1ad8 <iterateAllStateMachines+0x44>
	{
		if(stateMachines[statetMachineIndex] != NULL)
    1aa2:	89 81       	ldd	r24, Y+1	; 0x01
    1aa4:	88 2f       	mov	r24, r24
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	88 0f       	add	r24, r24
    1aaa:	99 1f       	adc	r25, r25
    1aac:	fc 01       	movw	r30, r24
    1aae:	e8 59       	subi	r30, 0x98	; 152
    1ab0:	f8 4f       	sbci	r31, 0xF8	; 248
    1ab2:	80 81       	ld	r24, Z
    1ab4:	91 81       	ldd	r25, Z+1	; 0x01
    1ab6:	00 97       	sbiw	r24, 0x00	; 0
    1ab8:	61 f0       	breq	.+24     	; 0x1ad2 <iterateAllStateMachines+0x3e>
		{
			iterateStateMachine(stateMachines[statetMachineIndex]) ;
    1aba:	89 81       	ldd	r24, Y+1	; 0x01
    1abc:	88 2f       	mov	r24, r24
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	88 0f       	add	r24, r24
    1ac2:	99 1f       	adc	r25, r25
    1ac4:	fc 01       	movw	r30, r24
    1ac6:	e8 59       	subi	r30, 0x98	; 152
    1ac8:	f8 4f       	sbci	r31, 0xF8	; 248
    1aca:	80 81       	ld	r24, Z
    1acc:	91 81       	ldd	r25, Z+1	; 0x01
    1ace:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <iterateStateMachine>

void iterateAllStateMachines(	void)
{
	uint8_t	statetMachineIndex ;

	for( statetMachineIndex = 0 ; statetMachineIndex < configMAXIMUM_NUMBER_OF_STATE_MACHINES ; statetMachineIndex++ )
    1ad2:	89 81       	ldd	r24, Y+1	; 0x01
    1ad4:	8f 5f       	subi	r24, 0xFF	; 255
    1ad6:	89 83       	std	Y+1, r24	; 0x01
    1ad8:	89 81       	ldd	r24, Y+1	; 0x01
    1ada:	82 33       	cpi	r24, 0x32	; 50
    1adc:	10 f3       	brcs	.-60     	; 0x1aa2 <iterateAllStateMachines+0xe>
		if(stateMachines[statetMachineIndex] != NULL)
		{
			iterateStateMachine(stateMachines[statetMachineIndex]) ;
		}
	}
}
    1ade:	0f 90       	pop	r0
    1ae0:	cf 91       	pop	r28
    1ae2:	df 91       	pop	r29
    1ae4:	08 95       	ret

00001ae6 <callStateHandler>:
static event_t	enterEvent				= { SUBSTATE_ENTRY } ;
static event_t	exitEvent				= { SUBSTATE_EXIT } ;


stateMachine_stateResponse_t callStateHandler(stateMachine_t* sm, state_t* state, event_t* event)
{
    1ae6:	df 93       	push	r29
    1ae8:	cf 93       	push	r28
    1aea:	cd b7       	in	r28, 0x3d	; 61
    1aec:	de b7       	in	r29, 0x3e	; 62
    1aee:	2b 97       	sbiw	r28, 0x0b	; 11
    1af0:	0f b6       	in	r0, 0x3f	; 63
    1af2:	f8 94       	cli
    1af4:	de bf       	out	0x3e, r29	; 62
    1af6:	0f be       	out	0x3f, r0	; 63
    1af8:	cd bf       	out	0x3d, r28	; 61
    1afa:	9b 83       	std	Y+3, r25	; 0x03
    1afc:	8a 83       	std	Y+2, r24	; 0x02
    1afe:	7d 83       	std	Y+5, r23	; 0x05
    1b00:	6c 83       	std	Y+4, r22	; 0x04
    1b02:	5f 83       	std	Y+7, r21	; 0x07
    1b04:	4e 83       	std	Y+6, r20	; 0x06
	stateMachine_stateResponse_t	response ;

#ifdef TRACING_ENABLED
	printf("\t\t\tCalling state: %s, event: %s, ", state->stateName, event->eventType <= SUBSTATE_EXIT ? eventTypes[event->eventType] : "<USER_EVENT>") ;
    1b06:	ec 81       	ldd	r30, Y+4	; 0x04
    1b08:	fd 81       	ldd	r31, Y+5	; 0x05
    1b0a:	85 81       	ldd	r24, Z+5	; 0x05
    1b0c:	96 81       	ldd	r25, Z+6	; 0x06
    1b0e:	9b 87       	std	Y+11, r25	; 0x0b
    1b10:	8a 87       	std	Y+10, r24	; 0x0a
    1b12:	ee 81       	ldd	r30, Y+6	; 0x06
    1b14:	ff 81       	ldd	r31, Y+7	; 0x07
    1b16:	80 81       	ld	r24, Z
    1b18:	86 30       	cpi	r24, 0x06	; 6
    1b1a:	78 f4       	brcc	.+30     	; 0x1b3a <callStateHandler+0x54>
    1b1c:	ee 81       	ldd	r30, Y+6	; 0x06
    1b1e:	ff 81       	ldd	r31, Y+7	; 0x07
    1b20:	80 81       	ld	r24, Z
    1b22:	88 2f       	mov	r24, r24
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	88 0f       	add	r24, r24
    1b28:	99 1f       	adc	r25, r25
    1b2a:	fc 01       	movw	r30, r24
    1b2c:	e6 58       	subi	r30, 0x86	; 134
    1b2e:	fb 4f       	sbci	r31, 0xFB	; 251
    1b30:	80 81       	ld	r24, Z
    1b32:	91 81       	ldd	r25, Z+1	; 0x01
    1b34:	99 87       	std	Y+9, r25	; 0x09
    1b36:	88 87       	std	Y+8, r24	; 0x08
    1b38:	04 c0       	rjmp	.+8      	; 0x1b42 <callStateHandler+0x5c>
    1b3a:	83 ec       	ldi	r24, 0xC3	; 195
    1b3c:	94 e0       	ldi	r25, 0x04	; 4
    1b3e:	99 87       	std	Y+9, r25	; 0x09
    1b40:	88 87       	std	Y+8, r24	; 0x08
    1b42:	00 d0       	rcall	.+0      	; 0x1b44 <callStateHandler+0x5e>
    1b44:	00 d0       	rcall	.+0      	; 0x1b46 <callStateHandler+0x60>
    1b46:	00 d0       	rcall	.+0      	; 0x1b48 <callStateHandler+0x62>
    1b48:	ed b7       	in	r30, 0x3d	; 61
    1b4a:	fe b7       	in	r31, 0x3e	; 62
    1b4c:	31 96       	adiw	r30, 0x01	; 1
    1b4e:	80 ed       	ldi	r24, 0xD0	; 208
    1b50:	94 e0       	ldi	r25, 0x04	; 4
    1b52:	91 83       	std	Z+1, r25	; 0x01
    1b54:	80 83       	st	Z, r24
    1b56:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b58:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b5a:	93 83       	std	Z+3, r25	; 0x03
    1b5c:	82 83       	std	Z+2, r24	; 0x02
    1b5e:	88 85       	ldd	r24, Y+8	; 0x08
    1b60:	99 85       	ldd	r25, Y+9	; 0x09
    1b62:	95 83       	std	Z+5, r25	; 0x05
    1b64:	84 83       	std	Z+4, r24	; 0x04
    1b66:	0e 94 2a 14 	call	0x2854	; 0x2854 <printf>
    1b6a:	8d b7       	in	r24, 0x3d	; 61
    1b6c:	9e b7       	in	r25, 0x3e	; 62
    1b6e:	06 96       	adiw	r24, 0x06	; 6
    1b70:	0f b6       	in	r0, 0x3f	; 63
    1b72:	f8 94       	cli
    1b74:	9e bf       	out	0x3e, r25	; 62
    1b76:	0f be       	out	0x3f, r0	; 63
    1b78:	8d bf       	out	0x3d, r24	; 61
#endif

	if(state->type == CHOICE_PSUEDOSTATE)
    1b7a:	ec 81       	ldd	r30, Y+4	; 0x04
    1b7c:	fd 81       	ldd	r31, Y+5	; 0x05
    1b7e:	82 81       	ldd	r24, Z+2	; 0x02
    1b80:	81 30       	cpi	r24, 0x01	; 1
    1b82:	51 f4       	brne	.+20     	; 0x1b98 <callStateHandler+0xb2>
	{
		response = ((stateMachine_choiceStateHandler_t)(state->handler))(sm) ;
    1b84:	ec 81       	ldd	r30, Y+4	; 0x04
    1b86:	fd 81       	ldd	r31, Y+5	; 0x05
    1b88:	83 81       	ldd	r24, Z+3	; 0x03
    1b8a:	94 81       	ldd	r25, Z+4	; 0x04
    1b8c:	fc 01       	movw	r30, r24
    1b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b90:	9b 81       	ldd	r25, Y+3	; 0x03
    1b92:	09 95       	icall
    1b94:	89 83       	std	Y+1, r24	; 0x01
    1b96:	56 c0       	rjmp	.+172    	; 0x1c44 <callStateHandler+0x15e>
	}
	else
	{
		if(event == &enterEvent)
    1b98:	8e 81       	ldd	r24, Y+6	; 0x06
    1b9a:	9f 81       	ldd	r25, Y+7	; 0x07
    1b9c:	24 e0       	ldi	r18, 0x04	; 4
    1b9e:	81 3c       	cpi	r24, 0xC1	; 193
    1ba0:	92 07       	cpc	r25, r18
    1ba2:	31 f4       	brne	.+12     	; 0x1bb0 <callStateHandler+0xca>
		{
			sm->mostRecentlyEnteredState = state ;
    1ba4:	ea 81       	ldd	r30, Y+2	; 0x02
    1ba6:	fb 81       	ldd	r31, Y+3	; 0x03
    1ba8:	8c 81       	ldd	r24, Y+4	; 0x04
    1baa:	9d 81       	ldd	r25, Y+5	; 0x05
    1bac:	97 8f       	std	Z+31, r25	; 0x1f
    1bae:	86 8f       	std	Z+30, r24	; 0x1e
		}
		if(event == &exitEvent)
    1bb0:	8e 81       	ldd	r24, Y+6	; 0x06
    1bb2:	9f 81       	ldd	r25, Y+7	; 0x07
    1bb4:	24 e0       	ldi	r18, 0x04	; 4
    1bb6:	82 3c       	cpi	r24, 0xC2	; 194
    1bb8:	92 07       	cpc	r25, r18
    1bba:	c1 f5       	brne	.+112    	; 0x1c2c <callStateHandler+0x146>
		{
			if(state->type == STATE_WITH_SHALLOW_HISTORY)
    1bbc:	ec 81       	ldd	r30, Y+4	; 0x04
    1bbe:	fd 81       	ldd	r31, Y+5	; 0x05
    1bc0:	82 81       	ldd	r24, Z+2	; 0x02
    1bc2:	82 30       	cpi	r24, 0x02	; 2
    1bc4:	a9 f4       	brne	.+42     	; 0x1bf0 <callStateHandler+0x10a>
			{
				/* Store only most recent direct child state */

				sm->historicalMarkers[((state_with_history_t*)state)->historyMarkerIndex] = sm->mostRecentlyExitedState ;
    1bc6:	ea 81       	ldd	r30, Y+2	; 0x02
    1bc8:	fb 81       	ldd	r31, Y+3	; 0x03
    1bca:	24 8d       	ldd	r18, Z+28	; 0x1c
    1bcc:	35 8d       	ldd	r19, Z+29	; 0x1d
    1bce:	ec 81       	ldd	r30, Y+4	; 0x04
    1bd0:	fd 81       	ldd	r31, Y+5	; 0x05
    1bd2:	87 81       	ldd	r24, Z+7	; 0x07
    1bd4:	90 85       	ldd	r25, Z+8	; 0x08
    1bd6:	88 0f       	add	r24, r24
    1bd8:	99 1f       	adc	r25, r25
    1bda:	d9 01       	movw	r26, r18
    1bdc:	a8 0f       	add	r26, r24
    1bde:	b9 1f       	adc	r27, r25
    1be0:	ea 81       	ldd	r30, Y+2	; 0x02
    1be2:	fb 81       	ldd	r31, Y+3	; 0x03
    1be4:	80 a1       	ldd	r24, Z+32	; 0x20
    1be6:	91 a1       	ldd	r25, Z+33	; 0x21
    1be8:	11 96       	adiw	r26, 0x01	; 1
    1bea:	9c 93       	st	X, r25
    1bec:	8e 93       	st	-X, r24
    1bee:	18 c0       	rjmp	.+48     	; 0x1c20 <callStateHandler+0x13a>
			}
			else if(state->type == STATE_WITH_DEEP_HISTORY)
    1bf0:	ec 81       	ldd	r30, Y+4	; 0x04
    1bf2:	fd 81       	ldd	r31, Y+5	; 0x05
    1bf4:	82 81       	ldd	r24, Z+2	; 0x02
    1bf6:	83 30       	cpi	r24, 0x03	; 3
    1bf8:	99 f4       	brne	.+38     	; 0x1c20 <callStateHandler+0x13a>
			{
				/* store child state that was active before starting transition sequence */

				sm->historicalMarkers[((state_with_history_t*)state)->historyMarkerIndex] = sm->mostRecentlyEnteredState ;
    1bfa:	ea 81       	ldd	r30, Y+2	; 0x02
    1bfc:	fb 81       	ldd	r31, Y+3	; 0x03
    1bfe:	24 8d       	ldd	r18, Z+28	; 0x1c
    1c00:	35 8d       	ldd	r19, Z+29	; 0x1d
    1c02:	ec 81       	ldd	r30, Y+4	; 0x04
    1c04:	fd 81       	ldd	r31, Y+5	; 0x05
    1c06:	87 81       	ldd	r24, Z+7	; 0x07
    1c08:	90 85       	ldd	r25, Z+8	; 0x08
    1c0a:	88 0f       	add	r24, r24
    1c0c:	99 1f       	adc	r25, r25
    1c0e:	d9 01       	movw	r26, r18
    1c10:	a8 0f       	add	r26, r24
    1c12:	b9 1f       	adc	r27, r25
    1c14:	ea 81       	ldd	r30, Y+2	; 0x02
    1c16:	fb 81       	ldd	r31, Y+3	; 0x03
    1c18:	86 8d       	ldd	r24, Z+30	; 0x1e
    1c1a:	97 8d       	ldd	r25, Z+31	; 0x1f
    1c1c:	8d 93       	st	X+, r24
    1c1e:	9c 93       	st	X, r25
			}

			sm->mostRecentlyExitedState = (void*)state ;
    1c20:	ea 81       	ldd	r30, Y+2	; 0x02
    1c22:	fb 81       	ldd	r31, Y+3	; 0x03
    1c24:	8c 81       	ldd	r24, Y+4	; 0x04
    1c26:	9d 81       	ldd	r25, Y+5	; 0x05
    1c28:	91 a3       	std	Z+33, r25	; 0x21
    1c2a:	80 a3       	std	Z+32, r24	; 0x20
		}

		response = ((stateMachine_callStateHandler_t)(state->handler))(sm, event) ;
    1c2c:	ec 81       	ldd	r30, Y+4	; 0x04
    1c2e:	fd 81       	ldd	r31, Y+5	; 0x05
    1c30:	03 80       	ldd	r0, Z+3	; 0x03
    1c32:	f4 81       	ldd	r31, Z+4	; 0x04
    1c34:	e0 2d       	mov	r30, r0
    1c36:	8a 81       	ldd	r24, Y+2	; 0x02
    1c38:	9b 81       	ldd	r25, Y+3	; 0x03
    1c3a:	2e 81       	ldd	r18, Y+6	; 0x06
    1c3c:	3f 81       	ldd	r19, Y+7	; 0x07
    1c3e:	b9 01       	movw	r22, r18
    1c40:	09 95       	icall
    1c42:	89 83       	std	Y+1, r24	; 0x01
	}

#ifdef TRACING_ENABLED
	printf("response: %s ", responseTypes[response]) ;
    1c44:	89 81       	ldd	r24, Y+1	; 0x01
    1c46:	88 2f       	mov	r24, r24
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	88 0f       	add	r24, r24
    1c4c:	99 1f       	adc	r25, r25
    1c4e:	fc 01       	movw	r30, r24
    1c50:	e9 54       	subi	r30, 0x49	; 73
    1c52:	fb 4f       	sbci	r31, 0xFB	; 251
    1c54:	20 81       	ld	r18, Z
    1c56:	31 81       	ldd	r19, Z+1	; 0x01
    1c58:	00 d0       	rcall	.+0      	; 0x1c5a <callStateHandler+0x174>
    1c5a:	00 d0       	rcall	.+0      	; 0x1c5c <callStateHandler+0x176>
    1c5c:	ed b7       	in	r30, 0x3d	; 61
    1c5e:	fe b7       	in	r31, 0x3e	; 62
    1c60:	31 96       	adiw	r30, 0x01	; 1
    1c62:	82 ef       	ldi	r24, 0xF2	; 242
    1c64:	94 e0       	ldi	r25, 0x04	; 4
    1c66:	91 83       	std	Z+1, r25	; 0x01
    1c68:	80 83       	st	Z, r24
    1c6a:	33 83       	std	Z+3, r19	; 0x03
    1c6c:	22 83       	std	Z+2, r18	; 0x02
    1c6e:	0e 94 2a 14 	call	0x2854	; 0x2854 <printf>
    1c72:	0f 90       	pop	r0
    1c74:	0f 90       	pop	r0
    1c76:	0f 90       	pop	r0
    1c78:	0f 90       	pop	r0
#endif

	if(response == TRANSITION)
    1c7a:	89 81       	ldd	r24, Y+1	; 0x01
    1c7c:	82 30       	cpi	r24, 0x02	; 2
    1c7e:	c1 f4       	brne	.+48     	; 0x1cb0 <callStateHandler+0x1ca>
	{
#ifdef TRACING_ENABLED
		printf("to %s ", ((state_t*)(sm->nextState))->stateName) ;
    1c80:	ea 81       	ldd	r30, Y+2	; 0x02
    1c82:	fb 81       	ldd	r31, Y+3	; 0x03
    1c84:	86 81       	ldd	r24, Z+6	; 0x06
    1c86:	97 81       	ldd	r25, Z+7	; 0x07
    1c88:	fc 01       	movw	r30, r24
    1c8a:	25 81       	ldd	r18, Z+5	; 0x05
    1c8c:	36 81       	ldd	r19, Z+6	; 0x06
    1c8e:	00 d0       	rcall	.+0      	; 0x1c90 <callStateHandler+0x1aa>
    1c90:	00 d0       	rcall	.+0      	; 0x1c92 <callStateHandler+0x1ac>
    1c92:	ed b7       	in	r30, 0x3d	; 61
    1c94:	fe b7       	in	r31, 0x3e	; 62
    1c96:	31 96       	adiw	r30, 0x01	; 1
    1c98:	80 e0       	ldi	r24, 0x00	; 0
    1c9a:	95 e0       	ldi	r25, 0x05	; 5
    1c9c:	91 83       	std	Z+1, r25	; 0x01
    1c9e:	80 83       	st	Z, r24
    1ca0:	33 83       	std	Z+3, r19	; 0x03
    1ca2:	22 83       	std	Z+2, r18	; 0x02
    1ca4:	0e 94 2a 14 	call	0x2854	; 0x2854 <printf>
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	0f 90       	pop	r0
    1cae:	0f 90       	pop	r0
#endif
	}

#ifdef TRACING_ENABLED
	printf("\n") ;
    1cb0:	8a e0       	ldi	r24, 0x0A	; 10
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	0e 94 3f 14 	call	0x287e	; 0x287e <putchar>
#endif

	return response ;
    1cb8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cba:	2b 96       	adiw	r28, 0x0b	; 11
    1cbc:	0f b6       	in	r0, 0x3f	; 63
    1cbe:	f8 94       	cli
    1cc0:	de bf       	out	0x3e, r29	; 62
    1cc2:	0f be       	out	0x3f, r0	; 63
    1cc4:	cd bf       	out	0x3d, r28	; 61
    1cc6:	cf 91       	pop	r28
    1cc8:	df 91       	pop	r29
    1cca:	08 95       	ret

00001ccc <iterateStateMachine>:


void iterateStateMachine(	stateMachine_t* sm)
{
    1ccc:	df 93       	push	r29
    1cce:	cf 93       	push	r28
    1cd0:	cd b7       	in	r28, 0x3d	; 61
    1cd2:	de b7       	in	r29, 0x3e	; 62
    1cd4:	c9 55       	subi	r28, 0x59	; 89
    1cd6:	d0 40       	sbci	r29, 0x00	; 0
    1cd8:	0f b6       	in	r0, 0x3f	; 63
    1cda:	f8 94       	cli
    1cdc:	de bf       	out	0x3e, r29	; 62
    1cde:	0f be       	out	0x3f, r0	; 63
    1ce0:	cd bf       	out	0x3d, r28	; 61
    1ce2:	fe 01       	movw	r30, r28
    1ce4:	ec 5a       	subi	r30, 0xAC	; 172
    1ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce8:	91 83       	std	Z+1, r25	; 0x01
    1cea:	80 83       	st	Z, r24
#ifdef TRACING_ENABLED
	printf("\titerating %s\n", sm->stateMachineName) ;
    1cec:	fe 01       	movw	r30, r28
    1cee:	ec 5a       	subi	r30, 0xAC	; 172
    1cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf2:	01 90       	ld	r0, Z+
    1cf4:	f0 81       	ld	r31, Z
    1cf6:	e0 2d       	mov	r30, r0
    1cf8:	22 81       	ldd	r18, Z+2	; 0x02
    1cfa:	33 81       	ldd	r19, Z+3	; 0x03
    1cfc:	00 d0       	rcall	.+0      	; 0x1cfe <iterateStateMachine+0x32>
    1cfe:	00 d0       	rcall	.+0      	; 0x1d00 <iterateStateMachine+0x34>
    1d00:	ed b7       	in	r30, 0x3d	; 61
    1d02:	fe b7       	in	r31, 0x3e	; 62
    1d04:	31 96       	adiw	r30, 0x01	; 1
    1d06:	87 e0       	ldi	r24, 0x07	; 7
    1d08:	95 e0       	ldi	r25, 0x05	; 5
    1d0a:	91 83       	std	Z+1, r25	; 0x01
    1d0c:	80 83       	st	Z, r24
    1d0e:	33 83       	std	Z+3, r19	; 0x03
    1d10:	22 83       	std	Z+2, r18	; 0x02
    1d12:	0e 94 2a 14 	call	0x2854	; 0x2854 <printf>
    1d16:	0f 90       	pop	r0
    1d18:	0f 90       	pop	r0
    1d1a:	0f 90       	pop	r0
    1d1c:	0f 90       	pop	r0

#warning, put in basic sanity checking for sm, sm->currentState, sm->nextState, etc.

	/* First of all, is the machine initialized? If not, take care of that. */

	if(!sm->stateMachineInitialized)
    1d1e:	fe 01       	movw	r30, r28
    1d20:	ec 5a       	subi	r30, 0xAC	; 172
    1d22:	ff 4f       	sbci	r31, 0xFF	; 255
    1d24:	01 90       	ld	r0, Z+
    1d26:	f0 81       	ld	r31, Z
    1d28:	e0 2d       	mov	r30, r0
    1d2a:	80 8d       	ldd	r24, Z+24	; 0x18
    1d2c:	88 23       	and	r24, r24
    1d2e:	c1 f5       	brne	.+112    	; 0x1da0 <iterateStateMachine+0xd4>
	{
#ifdef TRACING_ENABLED
		printf("\t\tinitializing...\n") ;
    1d30:	86 e1       	ldi	r24, 0x16	; 22
    1d32:	95 e0       	ldi	r25, 0x05	; 5
    1d34:	0e 94 46 14 	call	0x288c	; 0x288c <puts>
#endif

		sm->currentState = (state_t*)sm->topState ;
    1d38:	fe 01       	movw	r30, r28
    1d3a:	ec 5a       	subi	r30, 0xAC	; 172
    1d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3e:	01 90       	ld	r0, Z+
    1d40:	f0 81       	ld	r31, Z
    1d42:	e0 2d       	mov	r30, r0
    1d44:	80 81       	ld	r24, Z
    1d46:	91 81       	ldd	r25, Z+1	; 0x01
    1d48:	fe 01       	movw	r30, r28
    1d4a:	ec 5a       	subi	r30, 0xAC	; 172
    1d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4e:	01 90       	ld	r0, Z+
    1d50:	f0 81       	ld	r31, Z
    1d52:	e0 2d       	mov	r30, r0
    1d54:	95 83       	std	Z+5, r25	; 0x05
    1d56:	84 83       	std	Z+4, r24	; 0x04

		callStateHandler(sm, sm->currentState, &enterEvent) ;
    1d58:	fe 01       	movw	r30, r28
    1d5a:	ec 5a       	subi	r30, 0xAC	; 172
    1d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5e:	01 90       	ld	r0, Z+
    1d60:	f0 81       	ld	r31, Z
    1d62:	e0 2d       	mov	r30, r0
    1d64:	84 81       	ldd	r24, Z+4	; 0x04
    1d66:	95 81       	ldd	r25, Z+5	; 0x05
    1d68:	ac 01       	movw	r20, r24
    1d6a:	fe 01       	movw	r30, r28
    1d6c:	ec 5a       	subi	r30, 0xAC	; 172
    1d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d70:	80 81       	ld	r24, Z
    1d72:	91 81       	ldd	r25, Z+1	; 0x01
    1d74:	21 ec       	ldi	r18, 0xC1	; 193
    1d76:	34 e0       	ldi	r19, 0x04	; 4
    1d78:	ba 01       	movw	r22, r20
    1d7a:	a9 01       	movw	r20, r18
    1d7c:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <callStateHandler>

		sm->stateMachineInitialized	= true ;
    1d80:	fe 01       	movw	r30, r28
    1d82:	ec 5a       	subi	r30, 0xAC	; 172
    1d84:	ff 4f       	sbci	r31, 0xFF	; 255
    1d86:	01 90       	ld	r0, Z+
    1d88:	f0 81       	ld	r31, Z
    1d8a:	e0 2d       	mov	r30, r0
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	80 8f       	std	Z+24, r24	; 0x18
		sm->forceTransition			= true ;
    1d90:	fe 01       	movw	r30, r28
    1d92:	ec 5a       	subi	r30, 0xAC	; 172
    1d94:	ff 4f       	sbci	r31, 0xFF	; 255
    1d96:	01 90       	ld	r0, Z+
    1d98:	f0 81       	ld	r31, Z
    1d9a:	e0 2d       	mov	r30, r0
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	81 8f       	std	Z+25, r24	; 0x19
	}

	/* Any pending events? */

	if((!eventQueue_isEmpty(&sm->eventQueue)) || (sm->forceTransition))
    1da0:	fe 01       	movw	r30, r28
    1da2:	ec 5a       	subi	r30, 0xAC	; 172
    1da4:	ff 4f       	sbci	r31, 0xFF	; 255
    1da6:	80 81       	ld	r24, Z
    1da8:	91 81       	ldd	r25, Z+1	; 0x01
    1daa:	08 96       	adiw	r24, 0x08	; 8
    1dac:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <eventQueue_isEmpty>
    1db0:	88 23       	and	r24, r24
    1db2:	51 f0       	breq	.+20     	; 0x1dc8 <iterateStateMachine+0xfc>
    1db4:	fe 01       	movw	r30, r28
    1db6:	ec 5a       	subi	r30, 0xAC	; 172
    1db8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dba:	01 90       	ld	r0, Z+
    1dbc:	f0 81       	ld	r31, Z
    1dbe:	e0 2d       	mov	r30, r0
    1dc0:	81 8d       	ldd	r24, Z+25	; 0x19
    1dc2:	88 23       	and	r24, r24
    1dc4:	09 f4       	brne	.+2      	; 0x1dc8 <iterateStateMachine+0xfc>
    1dc6:	2c c4       	rjmp	.+2136   	; 0x2620 <iterateStateMachine+0x954>
	{
		event_t*						eventToProcess ;
		state_t*						stateBeingProcessed	= sm->currentState ;
    1dc8:	fe 01       	movw	r30, r28
    1dca:	ec 5a       	subi	r30, 0xAC	; 172
    1dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dce:	01 90       	ld	r0, Z+
    1dd0:	f0 81       	ld	r31, Z
    1dd2:	e0 2d       	mov	r30, r0
    1dd4:	84 81       	ldd	r24, Z+4	; 0x04
    1dd6:	95 81       	ldd	r25, Z+5	; 0x05
    1dd8:	99 8b       	std	Y+17, r25	; 0x11
    1dda:	88 8b       	std	Y+16, r24	; 0x10
		stateMachine_stateResponse_t	action ;

		if(sm->forceTransition)
    1ddc:	fe 01       	movw	r30, r28
    1dde:	ec 5a       	subi	r30, 0xAC	; 172
    1de0:	ff 4f       	sbci	r31, 0xFF	; 255
    1de2:	01 90       	ld	r0, Z+
    1de4:	f0 81       	ld	r31, Z
    1de6:	e0 2d       	mov	r30, r0
    1de8:	81 8d       	ldd	r24, Z+25	; 0x19
    1dea:	88 23       	and	r24, r24
    1dec:	61 f0       	breq	.+24     	; 0x1e06 <iterateStateMachine+0x13a>
		{
			sm->forceTransition	= false ;
    1dee:	fe 01       	movw	r30, r28
    1df0:	ec 5a       	subi	r30, 0xAC	; 172
    1df2:	ff 4f       	sbci	r31, 0xFF	; 255
    1df4:	01 90       	ld	r0, Z+
    1df6:	f0 81       	ld	r31, Z
    1df8:	e0 2d       	mov	r30, r0
    1dfa:	11 8e       	std	Z+25, r1	; 0x19
			eventToProcess		= &initialTransitionEvent ;
    1dfc:	8f eb       	ldi	r24, 0xBF	; 191
    1dfe:	94 e0       	ldi	r25, 0x04	; 4
    1e00:	9b 8b       	std	Y+19, r25	; 0x13
    1e02:	8a 8b       	std	Y+18, r24	; 0x12
    1e04:	0a c0       	rjmp	.+20     	; 0x1e1a <iterateStateMachine+0x14e>
		}
		else
		{
			eventToProcess = eventQueue_remove(&sm->eventQueue) ; ;
    1e06:	fe 01       	movw	r30, r28
    1e08:	ec 5a       	subi	r30, 0xAC	; 172
    1e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0c:	80 81       	ld	r24, Z
    1e0e:	91 81       	ldd	r25, Z+1	; 0x01
    1e10:	08 96       	adiw	r24, 0x08	; 8
    1e12:	0e 94 a8 0a 	call	0x1550	; 0x1550 <eventQueue_remove>
    1e16:	9b 8b       	std	Y+19, r25	; 0x13
    1e18:	8a 8b       	std	Y+18, r24	; 0x12
		}

		sm->nextState = (state_t*)0 ;	/* just a little housecleaning */
    1e1a:	fe 01       	movw	r30, r28
    1e1c:	ec 5a       	subi	r30, 0xAC	; 172
    1e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e20:	01 90       	ld	r0, Z+
    1e22:	f0 81       	ld	r31, Z
    1e24:	e0 2d       	mov	r30, r0
    1e26:	17 82       	std	Z+7, r1	; 0x07
    1e28:	16 82       	std	Z+6, r1	; 0x06

#ifdef TRACING_ENABLED
		printf("\t\tProcessing event...\n") ;
    1e2a:	88 e2       	ldi	r24, 0x28	; 40
    1e2c:	95 e0       	ldi	r25, 0x05	; 5
    1e2e:	0e 94 46 14 	call	0x288c	; 0x288c <puts>
		 * and try again. When the top is reached, bail...
		 */

		do
		{
			action = callStateHandler(sm, stateBeingProcessed, eventToProcess) ;
    1e32:	fe 01       	movw	r30, r28
    1e34:	ec 5a       	subi	r30, 0xAC	; 172
    1e36:	ff 4f       	sbci	r31, 0xFF	; 255
    1e38:	80 81       	ld	r24, Z
    1e3a:	91 81       	ldd	r25, Z+1	; 0x01
    1e3c:	28 89       	ldd	r18, Y+16	; 0x10
    1e3e:	39 89       	ldd	r19, Y+17	; 0x11
    1e40:	4a 89       	ldd	r20, Y+18	; 0x12
    1e42:	5b 89       	ldd	r21, Y+19	; 0x13
    1e44:	b9 01       	movw	r22, r18
    1e46:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <callStateHandler>
    1e4a:	8f 87       	std	Y+15, r24	; 0x0f

			if((action == IGNORED) && (eventToProcess->eventType > SUBSTATE_EXIT))
    1e4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e4e:	88 23       	and	r24, r24
    1e50:	09 f0       	breq	.+2      	; 0x1e54 <iterateStateMachine+0x188>
    1e52:	95 c0       	rjmp	.+298    	; 0x1f7e <iterateStateMachine+0x2b2>
    1e54:	ea 89       	ldd	r30, Y+18	; 0x12
    1e56:	fb 89       	ldd	r31, Y+19	; 0x13
    1e58:	80 81       	ld	r24, Z
    1e5a:	86 30       	cpi	r24, 0x06	; 6
    1e5c:	08 f4       	brcc	.+2      	; 0x1e60 <iterateStateMachine+0x194>
    1e5e:	8f c0       	rjmp	.+286    	; 0x1f7e <iterateStateMachine+0x2b2>
			{
				stateBeingProcessed = (state_t*)(stateBeingProcessed->parent) ;
    1e60:	e8 89       	ldd	r30, Y+16	; 0x10
    1e62:	f9 89       	ldd	r31, Y+17	; 0x11
    1e64:	80 81       	ld	r24, Z
    1e66:	91 81       	ldd	r25, Z+1	; 0x01
    1e68:	99 8b       	std	Y+17, r25	; 0x11
    1e6a:	88 8b       	std	Y+16, r24	; 0x10

#ifdef TRACING_ENABLED
				printf("\t\t\t\t\t\t\tmoving to parent: %s\n", stateBeingProcessed ? stateBeingProcessed->stateName : "<root>") ;
    1e6c:	88 89       	ldd	r24, Y+16	; 0x10
    1e6e:	99 89       	ldd	r25, Y+17	; 0x11
    1e70:	00 97       	sbiw	r24, 0x00	; 0
    1e72:	49 f0       	breq	.+18     	; 0x1e86 <iterateStateMachine+0x1ba>
    1e74:	e8 89       	ldd	r30, Y+16	; 0x10
    1e76:	f9 89       	ldd	r31, Y+17	; 0x11
    1e78:	85 81       	ldd	r24, Z+5	; 0x05
    1e7a:	96 81       	ldd	r25, Z+6	; 0x06
    1e7c:	68 96       	adiw	r28, 0x18	; 24
    1e7e:	9f af       	std	Y+63, r25	; 0x3f
    1e80:	8e af       	std	Y+62, r24	; 0x3e
    1e82:	68 97       	sbiw	r28, 0x18	; 24
    1e84:	06 c0       	rjmp	.+12     	; 0x1e92 <iterateStateMachine+0x1c6>
    1e86:	8e e3       	ldi	r24, 0x3E	; 62
    1e88:	95 e0       	ldi	r25, 0x05	; 5
    1e8a:	68 96       	adiw	r28, 0x18	; 24
    1e8c:	9f af       	std	Y+63, r25	; 0x3f
    1e8e:	8e af       	std	Y+62, r24	; 0x3e
    1e90:	68 97       	sbiw	r28, 0x18	; 24
    1e92:	00 d0       	rcall	.+0      	; 0x1e94 <iterateStateMachine+0x1c8>
    1e94:	00 d0       	rcall	.+0      	; 0x1e96 <iterateStateMachine+0x1ca>
    1e96:	ed b7       	in	r30, 0x3d	; 61
    1e98:	fe b7       	in	r31, 0x3e	; 62
    1e9a:	31 96       	adiw	r30, 0x01	; 1
    1e9c:	85 e4       	ldi	r24, 0x45	; 69
    1e9e:	95 e0       	ldi	r25, 0x05	; 5
    1ea0:	91 83       	std	Z+1, r25	; 0x01
    1ea2:	80 83       	st	Z, r24
    1ea4:	68 96       	adiw	r28, 0x18	; 24
    1ea6:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ea8:	9f ad       	ldd	r25, Y+63	; 0x3f
    1eaa:	68 97       	sbiw	r28, 0x18	; 24
    1eac:	93 83       	std	Z+3, r25	; 0x03
    1eae:	82 83       	std	Z+2, r24	; 0x02
    1eb0:	0e 94 2a 14 	call	0x2854	; 0x2854 <printf>
    1eb4:	0f 90       	pop	r0
    1eb6:	0f 90       	pop	r0
    1eb8:	0f 90       	pop	r0
    1eba:	0f 90       	pop	r0
				/* The event was handled or a transition was taken.
				 * In either case, no need to continue up the chain. */

				break ;
			}
		} while(stateBeingProcessed) ;
    1ebc:	88 89       	ldd	r24, Y+16	; 0x10
    1ebe:	99 89       	ldd	r25, Y+17	; 0x11
    1ec0:	00 97       	sbiw	r24, 0x00	; 0
    1ec2:	09 f0       	breq	.+2      	; 0x1ec6 <iterateStateMachine+0x1fa>
    1ec4:	b6 cf       	rjmp	.-148    	; 0x1e32 <iterateStateMachine+0x166>
    1ec6:	5b c0       	rjmp	.+182    	; 0x1f7e <iterateStateMachine+0x2b2>

		while(action == TRANSITION_TO_HISTORY)
		{
			if(		(((state_t*)(sm->nextState))->type != STATE_WITH_SHALLOW_HISTORY)
    1ec8:	fe 01       	movw	r30, r28
    1eca:	ec 5a       	subi	r30, 0xAC	; 172
    1ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ece:	01 90       	ld	r0, Z+
    1ed0:	f0 81       	ld	r31, Z
    1ed2:	e0 2d       	mov	r30, r0
    1ed4:	86 81       	ldd	r24, Z+6	; 0x06
    1ed6:	97 81       	ldd	r25, Z+7	; 0x07
    1ed8:	fc 01       	movw	r30, r24
    1eda:	82 81       	ldd	r24, Z+2	; 0x02
    1edc:	82 30       	cpi	r24, 0x02	; 2
    1ede:	69 f0       	breq	.+26     	; 0x1efa <iterateStateMachine+0x22e>
    1ee0:	fe 01       	movw	r30, r28
    1ee2:	ec 5a       	subi	r30, 0xAC	; 172
    1ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee6:	01 90       	ld	r0, Z+
    1ee8:	f0 81       	ld	r31, Z
    1eea:	e0 2d       	mov	r30, r0
    1eec:	86 81       	ldd	r24, Z+6	; 0x06
    1eee:	97 81       	ldd	r25, Z+7	; 0x07
    1ef0:	fc 01       	movw	r30, r24
    1ef2:	82 81       	ldd	r24, Z+2	; 0x02
    1ef4:	83 30       	cpi	r24, 0x03	; 3
    1ef6:	09 f0       	breq	.+2      	; 0x1efa <iterateStateMachine+0x22e>
    1ef8:	46 c0       	rjmp	.+140    	; 0x1f86 <iterateStateMachine+0x2ba>

				break ;
			}
			else
			{
				state_t* nextState = sm->historicalMarkers[((state_with_history_t*)(sm->nextState))->historyMarkerIndex] ;
    1efa:	fe 01       	movw	r30, r28
    1efc:	ec 5a       	subi	r30, 0xAC	; 172
    1efe:	ff 4f       	sbci	r31, 0xFF	; 255
    1f00:	01 90       	ld	r0, Z+
    1f02:	f0 81       	ld	r31, Z
    1f04:	e0 2d       	mov	r30, r0
    1f06:	24 8d       	ldd	r18, Z+28	; 0x1c
    1f08:	35 8d       	ldd	r19, Z+29	; 0x1d
    1f0a:	fe 01       	movw	r30, r28
    1f0c:	ec 5a       	subi	r30, 0xAC	; 172
    1f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f10:	01 90       	ld	r0, Z+
    1f12:	f0 81       	ld	r31, Z
    1f14:	e0 2d       	mov	r30, r0
    1f16:	86 81       	ldd	r24, Z+6	; 0x06
    1f18:	97 81       	ldd	r25, Z+7	; 0x07
    1f1a:	fc 01       	movw	r30, r24
    1f1c:	87 81       	ldd	r24, Z+7	; 0x07
    1f1e:	90 85       	ldd	r25, Z+8	; 0x08
    1f20:	88 0f       	add	r24, r24
    1f22:	99 1f       	adc	r25, r25
    1f24:	f9 01       	movw	r30, r18
    1f26:	e8 0f       	add	r30, r24
    1f28:	f9 1f       	adc	r31, r25
    1f2a:	80 81       	ld	r24, Z
    1f2c:	91 81       	ldd	r25, Z+1	; 0x01
    1f2e:	9e 87       	std	Y+14, r25	; 0x0e
    1f30:	8d 87       	std	Y+13, r24	; 0x0d

				/* The target must be a state with history so see if it has some
				 */

				if(nextState != (void*)0)
    1f32:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f34:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f36:	00 97       	sbiw	r24, 0x00	; 0
    1f38:	59 f0       	breq	.+22     	; 0x1f50 <iterateStateMachine+0x284>
					/* Found a state that has some history tracking information so
					 * set the next state to that and then bail this loop so that
					 * the transition occurs normally.
					 */

					sm->nextState = nextState ;
    1f3a:	fe 01       	movw	r30, r28
    1f3c:	ec 5a       	subi	r30, 0xAC	; 172
    1f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f40:	01 90       	ld	r0, Z+
    1f42:	f0 81       	ld	r31, Z
    1f44:	e0 2d       	mov	r30, r0
    1f46:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f48:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f4a:	97 83       	std	Z+7, r25	; 0x07
    1f4c:	86 83       	std	Z+6, r24	; 0x06
    1f4e:	15 c0       	rjmp	.+42     	; 0x1f7a <iterateStateMachine+0x2ae>
					 * state without history is reached, a state that has history
					 * that has actually been filled in is reached OR a normal
					 * TRANSITION is returned from the following call.
					 */

					action = callStateHandler(sm, (state_t*)(sm->nextState), &jumpToHistoryEvent) ;
    1f50:	fe 01       	movw	r30, r28
    1f52:	ec 5a       	subi	r30, 0xAC	; 172
    1f54:	ff 4f       	sbci	r31, 0xFF	; 255
    1f56:	01 90       	ld	r0, Z+
    1f58:	f0 81       	ld	r31, Z
    1f5a:	e0 2d       	mov	r30, r0
    1f5c:	86 81       	ldd	r24, Z+6	; 0x06
    1f5e:	97 81       	ldd	r25, Z+7	; 0x07
    1f60:	ac 01       	movw	r20, r24
    1f62:	fe 01       	movw	r30, r28
    1f64:	ec 5a       	subi	r30, 0xAC	; 172
    1f66:	ff 4f       	sbci	r31, 0xFF	; 255
    1f68:	80 81       	ld	r24, Z
    1f6a:	91 81       	ldd	r25, Z+1	; 0x01
    1f6c:	20 ec       	ldi	r18, 0xC0	; 192
    1f6e:	34 e0       	ldi	r19, 0x04	; 4
    1f70:	ba 01       	movw	r22, r20
    1f72:	a9 01       	movw	r20, r18
    1f74:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <callStateHandler>
    1f78:	8f 87       	std	Y+15, r24	; 0x0f

			/* regardless of which condition clause gets executed above,
			 * a transition needs to happen to make sure it does.
			 */

			action = TRANSITION ;
    1f7a:	82 e0       	ldi	r24, 0x02	; 2
    1f7c:	8f 87       	std	Y+15, r24	; 0x0f

				break ;
			}
		} while(stateBeingProcessed) ;

		while(action == TRANSITION_TO_HISTORY)
    1f7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f80:	83 30       	cpi	r24, 0x03	; 3
    1f82:	09 f4       	brne	.+2      	; 0x1f86 <iterateStateMachine+0x2ba>
    1f84:	a1 cf       	rjmp	.-190    	; 0x1ec8 <iterateStateMachine+0x1fc>
			 */

			action = TRANSITION ;
		}

		if(action == TRANSITION)
    1f86:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f88:	82 30       	cpi	r24, 0x02	; 2
    1f8a:	09 f0       	breq	.+2      	; 0x1f8e <iterateStateMachine+0x2c2>
    1f8c:	49 c3       	rjmp	.+1682   	; 0x2620 <iterateStateMachine+0x954>
		{
			state_t*	source	= sm->currentState ;
    1f8e:	fe 01       	movw	r30, r28
    1f90:	ec 5a       	subi	r30, 0xAC	; 172
    1f92:	ff 4f       	sbci	r31, 0xFF	; 255
    1f94:	01 90       	ld	r0, Z+
    1f96:	f0 81       	ld	r31, Z
    1f98:	e0 2d       	mov	r30, r0
    1f9a:	84 81       	ldd	r24, Z+4	; 0x04
    1f9c:	95 81       	ldd	r25, Z+5	; 0x05
    1f9e:	9c 87       	std	Y+12, r25	; 0x0c
    1fa0:	8b 87       	std	Y+11, r24	; 0x0b
			state_t*	target	= sm->nextState ;
    1fa2:	fe 01       	movw	r30, r28
    1fa4:	ec 5a       	subi	r30, 0xAC	; 172
    1fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa8:	01 90       	ld	r0, Z+
    1faa:	f0 81       	ld	r31, Z
    1fac:	e0 2d       	mov	r30, r0
    1fae:	86 81       	ldd	r24, Z+6	; 0x06
    1fb0:	97 81       	ldd	r25, Z+7	; 0x07
    1fb2:	9a 87       	std	Y+10, r25	; 0x0a
    1fb4:	89 87       	std	Y+9, r24	; 0x09

			/* There are 8 different cases here. They are handled in case of complexity... */

			if(source == target)
    1fb6:	2b 85       	ldd	r18, Y+11	; 0x0b
    1fb8:	3c 85       	ldd	r19, Y+12	; 0x0c
    1fba:	89 85       	ldd	r24, Y+9	; 0x09
    1fbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fbe:	28 17       	cp	r18, r24
    1fc0:	39 07       	cpc	r19, r25
    1fc2:	39 f5       	brne	.+78     	; 0x2012 <iterateStateMachine+0x346>
			{
#ifdef TRACING_ENABLED
				printf("\t\t\t\tSelf transition.\n") ;
    1fc4:	82 e6       	ldi	r24, 0x62	; 98
    1fc6:	95 e0       	ldi	r25, 0x05	; 5
    1fc8:	0e 94 46 14 	call	0x288c	; 0x288c <puts>
#endif

				/* Self transition. Exit and then re-enter the same state */

				callStateHandler(sm, source, &exitEvent) ;
    1fcc:	fe 01       	movw	r30, r28
    1fce:	ec 5a       	subi	r30, 0xAC	; 172
    1fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd2:	80 81       	ld	r24, Z
    1fd4:	91 81       	ldd	r25, Z+1	; 0x01
    1fd6:	2b 85       	ldd	r18, Y+11	; 0x0b
    1fd8:	3c 85       	ldd	r19, Y+12	; 0x0c
    1fda:	42 ec       	ldi	r20, 0xC2	; 194
    1fdc:	54 e0       	ldi	r21, 0x04	; 4
    1fde:	b9 01       	movw	r22, r18
    1fe0:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <callStateHandler>
				sm->currentState = target ;
    1fe4:	fe 01       	movw	r30, r28
    1fe6:	ec 5a       	subi	r30, 0xAC	; 172
    1fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fea:	01 90       	ld	r0, Z+
    1fec:	f0 81       	ld	r31, Z
    1fee:	e0 2d       	mov	r30, r0
    1ff0:	89 85       	ldd	r24, Y+9	; 0x09
    1ff2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff4:	95 83       	std	Z+5, r25	; 0x05
    1ff6:	84 83       	std	Z+4, r24	; 0x04
				callStateHandler(sm, target, &enterEvent) ;
    1ff8:	fe 01       	movw	r30, r28
    1ffa:	ec 5a       	subi	r30, 0xAC	; 172
    1ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffe:	80 81       	ld	r24, Z
    2000:	91 81       	ldd	r25, Z+1	; 0x01
    2002:	29 85       	ldd	r18, Y+9	; 0x09
    2004:	3a 85       	ldd	r19, Y+10	; 0x0a
    2006:	41 ec       	ldi	r20, 0xC1	; 193
    2008:	54 e0       	ldi	r21, 0x04	; 4
    200a:	b9 01       	movw	r22, r18
    200c:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <callStateHandler>
    2010:	ff c2       	rjmp	.+1534   	; 0x2610 <iterateStateMachine+0x944>
			}
			else if(source == (state_t*)(target->parent))
    2012:	e9 85       	ldd	r30, Y+9	; 0x09
    2014:	fa 85       	ldd	r31, Y+10	; 0x0a
    2016:	80 81       	ld	r24, Z
    2018:	91 81       	ldd	r25, Z+1	; 0x01
    201a:	9c 01       	movw	r18, r24
    201c:	8b 85       	ldd	r24, Y+11	; 0x0b
    201e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2020:	28 17       	cp	r18, r24
    2022:	39 07       	cpc	r19, r25
    2024:	d9 f4       	brne	.+54     	; 0x205c <iterateStateMachine+0x390>
			{
#ifdef TRACING_ENABLED
				printf("\t\t\t\tTransition to direct child.\n") ;
    2026:	87 e7       	ldi	r24, 0x77	; 119
    2028:	95 e0       	ldi	r25, 0x05	; 5
    202a:	0e 94 46 14 	call	0x288c	; 0x288c <puts>
#endif

				/* target is a direct child of the source. Only need to enter
				 * the target here without having to exit the source. */

				sm->currentState = target ;
    202e:	fe 01       	movw	r30, r28
    2030:	ec 5a       	subi	r30, 0xAC	; 172
    2032:	ff 4f       	sbci	r31, 0xFF	; 255
    2034:	01 90       	ld	r0, Z+
    2036:	f0 81       	ld	r31, Z
    2038:	e0 2d       	mov	r30, r0
    203a:	89 85       	ldd	r24, Y+9	; 0x09
    203c:	9a 85       	ldd	r25, Y+10	; 0x0a
    203e:	95 83       	std	Z+5, r25	; 0x05
    2040:	84 83       	std	Z+4, r24	; 0x04
				callStateHandler(sm, target, &enterEvent) ;
    2042:	fe 01       	movw	r30, r28
    2044:	ec 5a       	subi	r30, 0xAC	; 172
    2046:	ff 4f       	sbci	r31, 0xFF	; 255
    2048:	80 81       	ld	r24, Z
    204a:	91 81       	ldd	r25, Z+1	; 0x01
    204c:	29 85       	ldd	r18, Y+9	; 0x09
    204e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2050:	41 ec       	ldi	r20, 0xC1	; 193
    2052:	54 e0       	ldi	r21, 0x04	; 4
    2054:	b9 01       	movw	r22, r18
    2056:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <callStateHandler>
    205a:	da c2       	rjmp	.+1460   	; 0x2610 <iterateStateMachine+0x944>
			}
			else if((state_t*)(source->parent) == (state_t*)(target->parent))
    205c:	eb 85       	ldd	r30, Y+11	; 0x0b
    205e:	fc 85       	ldd	r31, Y+12	; 0x0c
    2060:	80 81       	ld	r24, Z
    2062:	91 81       	ldd	r25, Z+1	; 0x01
    2064:	9c 01       	movw	r18, r24
    2066:	e9 85       	ldd	r30, Y+9	; 0x09
    2068:	fa 85       	ldd	r31, Y+10	; 0x0a
    206a:	80 81       	ld	r24, Z
    206c:	91 81       	ldd	r25, Z+1	; 0x01
    206e:	28 17       	cp	r18, r24
    2070:	39 07       	cpc	r19, r25
    2072:	39 f5       	brne	.+78     	; 0x20c2 <iterateStateMachine+0x3f6>
			{
#ifdef TRACING_ENABLED
				printf("\t\t\t\tTransition to direct peer.\n") ;
    2074:	87 e9       	ldi	r24, 0x97	; 151
    2076:	95 e0       	ldi	r25, 0x05	; 5
    2078:	0e 94 46 14 	call	0x288c	; 0x288c <puts>
#endif

				/* A direct peer transition within the same parent state.
				 * Exit the source and then enter the target. */

				callStateHandler(sm, source, &exitEvent) ;
    207c:	fe 01       	movw	r30, r28
    207e:	ec 5a       	subi	r30, 0xAC	; 172
    2080:	ff 4f       	sbci	r31, 0xFF	; 255
    2082:	80 81       	ld	r24, Z
    2084:	91 81       	ldd	r25, Z+1	; 0x01
    2086:	2b 85       	ldd	r18, Y+11	; 0x0b
    2088:	3c 85       	ldd	r19, Y+12	; 0x0c
    208a:	42 ec       	ldi	r20, 0xC2	; 194
    208c:	54 e0       	ldi	r21, 0x04	; 4
    208e:	b9 01       	movw	r22, r18
    2090:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <callStateHandler>
				sm->currentState = target ;
    2094:	fe 01       	movw	r30, r28
    2096:	ec 5a       	subi	r30, 0xAC	; 172
    2098:	ff 4f       	sbci	r31, 0xFF	; 255
    209a:	01 90       	ld	r0, Z+
    209c:	f0 81       	ld	r31, Z
    209e:	e0 2d       	mov	r30, r0
    20a0:	89 85       	ldd	r24, Y+9	; 0x09
    20a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a4:	95 83       	std	Z+5, r25	; 0x05
    20a6:	84 83       	std	Z+4, r24	; 0x04
				callStateHandler(sm, target, &enterEvent) ;
    20a8:	fe 01       	movw	r30, r28
    20aa:	ec 5a       	subi	r30, 0xAC	; 172
    20ac:	ff 4f       	sbci	r31, 0xFF	; 255
    20ae:	80 81       	ld	r24, Z
    20b0:	91 81       	ldd	r25, Z+1	; 0x01
    20b2:	29 85       	ldd	r18, Y+9	; 0x09
    20b4:	3a 85       	ldd	r19, Y+10	; 0x0a
    20b6:	41 ec       	ldi	r20, 0xC1	; 193
    20b8:	54 e0       	ldi	r21, 0x04	; 4
    20ba:	b9 01       	movw	r22, r18
    20bc:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <callStateHandler>
    20c0:	a7 c2       	rjmp	.+1358   	; 0x2610 <iterateStateMachine+0x944>
			}
			else if((state_t*)(source->parent) == target)
    20c2:	eb 85       	ldd	r30, Y+11	; 0x0b
    20c4:	fc 85       	ldd	r31, Y+12	; 0x0c
    20c6:	80 81       	ld	r24, Z
    20c8:	91 81       	ldd	r25, Z+1	; 0x01
    20ca:	9c 01       	movw	r18, r24
    20cc:	89 85       	ldd	r24, Y+9	; 0x09
    20ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    20d0:	28 17       	cp	r18, r24
    20d2:	39 07       	cpc	r19, r25
    20d4:	d9 f4       	brne	.+54     	; 0x210c <iterateStateMachine+0x440>
			{
#ifdef TRACING_ENABLED
				printf("\t\t\t\tTransition to direct parent.\n") ;
    20d6:	86 eb       	ldi	r24, 0xB6	; 182
    20d8:	95 e0       	ldi	r25, 0x05	; 5
    20da:	0e 94 46 14 	call	0x288c	; 0x288c <puts>

				/* target is the direct parent of the source. Only need to exit
				 * the source without having to re-enter the target since it
				 * was already active. */

				sm->currentState = target ;
    20de:	fe 01       	movw	r30, r28
    20e0:	ec 5a       	subi	r30, 0xAC	; 172
    20e2:	ff 4f       	sbci	r31, 0xFF	; 255
    20e4:	01 90       	ld	r0, Z+
    20e6:	f0 81       	ld	r31, Z
    20e8:	e0 2d       	mov	r30, r0
    20ea:	89 85       	ldd	r24, Y+9	; 0x09
    20ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ee:	95 83       	std	Z+5, r25	; 0x05
    20f0:	84 83       	std	Z+4, r24	; 0x04
				callStateHandler(sm, source, &exitEvent) ;
    20f2:	fe 01       	movw	r30, r28
    20f4:	ec 5a       	subi	r30, 0xAC	; 172
    20f6:	ff 4f       	sbci	r31, 0xFF	; 255
    20f8:	80 81       	ld	r24, Z
    20fa:	91 81       	ldd	r25, Z+1	; 0x01
    20fc:	2b 85       	ldd	r18, Y+11	; 0x0b
    20fe:	3c 85       	ldd	r19, Y+12	; 0x0c
    2100:	42 ec       	ldi	r20, 0xC2	; 194
    2102:	54 e0       	ldi	r21, 0x04	; 4
    2104:	b9 01       	movw	r22, r18
    2106:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <callStateHandler>
    210a:	82 c2       	rjmp	.+1284   	; 0x2610 <iterateStateMachine+0x944>
				uint8_t		exitIndex ;

				/* This is where things start to get complicated... */

#ifdef TRACING_ENABLED
				printf("\t\t\t\tScanning source hierarchy...\n") ;
    210c:	87 ed       	ldi	r24, 0xD7	; 215
    210e:	95 e0       	ldi	r25, 0x05	; 5
    2110:	0e 94 46 14 	call	0x288c	; 0x288c <puts>
#endif

				sourceIndex			= 0 ;
    2114:	18 86       	std	Y+8, r1	; 0x08
				targetIndex			= 0 ;
    2116:	1f 82       	std	Y+7, r1	; 0x07
				stateBeingProcessed	= source ;
    2118:	8b 85       	ldd	r24, Y+11	; 0x0b
    211a:	9c 85       	ldd	r25, Y+12	; 0x0c
    211c:	99 8b       	std	Y+17, r25	; 0x11
    211e:	88 8b       	std	Y+16, r24	; 0x10

				do
				{
					sourceHierarchy[sourceIndex++] = stateBeingProcessed ;
    2120:	88 85       	ldd	r24, Y+8	; 0x08
    2122:	88 2f       	mov	r24, r24
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	9c 01       	movw	r18, r24
    2128:	22 0f       	add	r18, r18
    212a:	33 1f       	adc	r19, r19
    212c:	ce 01       	movw	r24, r28
    212e:	01 96       	adiw	r24, 0x01	; 1
    2130:	82 0f       	add	r24, r18
    2132:	93 1f       	adc	r25, r19
    2134:	fc 01       	movw	r30, r24
    2136:	73 96       	adiw	r30, 0x13	; 19
    2138:	88 89       	ldd	r24, Y+16	; 0x10
    213a:	99 89       	ldd	r25, Y+17	; 0x11
    213c:	91 83       	std	Z+1, r25	; 0x01
    213e:	80 83       	st	Z, r24
    2140:	88 85       	ldd	r24, Y+8	; 0x08
    2142:	8f 5f       	subi	r24, 0xFF	; 255
    2144:	88 87       	std	Y+8, r24	; 0x08

#ifdef TRACING_ENABLED
					printf("\t\t\t\t\tsourceHierarchy[%d] = %s\n", sourceIndex - 1, stateBeingProcessed->stateName) ;
    2146:	88 85       	ldd	r24, Y+8	; 0x08
    2148:	88 2f       	mov	r24, r24
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	ac 01       	movw	r20, r24
    214e:	41 50       	subi	r20, 0x01	; 1
    2150:	50 40       	sbci	r21, 0x00	; 0
    2152:	e8 89       	ldd	r30, Y+16	; 0x10
    2154:	f9 89       	ldd	r31, Y+17	; 0x11
    2156:	25 81       	ldd	r18, Z+5	; 0x05
    2158:	36 81       	ldd	r19, Z+6	; 0x06
    215a:	00 d0       	rcall	.+0      	; 0x215c <iterateStateMachine+0x490>
    215c:	00 d0       	rcall	.+0      	; 0x215e <iterateStateMachine+0x492>
    215e:	00 d0       	rcall	.+0      	; 0x2160 <iterateStateMachine+0x494>
    2160:	ed b7       	in	r30, 0x3d	; 61
    2162:	fe b7       	in	r31, 0x3e	; 62
    2164:	31 96       	adiw	r30, 0x01	; 1
    2166:	88 ef       	ldi	r24, 0xF8	; 248
    2168:	95 e0       	ldi	r25, 0x05	; 5
    216a:	91 83       	std	Z+1, r25	; 0x01
    216c:	80 83       	st	Z, r24
    216e:	53 83       	std	Z+3, r21	; 0x03
    2170:	42 83       	std	Z+2, r20	; 0x02
    2172:	35 83       	std	Z+5, r19	; 0x05
    2174:	24 83       	std	Z+4, r18	; 0x04
    2176:	0e 94 2a 14 	call	0x2854	; 0x2854 <printf>
    217a:	8d b7       	in	r24, 0x3d	; 61
    217c:	9e b7       	in	r25, 0x3e	; 62
    217e:	06 96       	adiw	r24, 0x06	; 6
    2180:	0f b6       	in	r0, 0x3f	; 63
    2182:	f8 94       	cli
    2184:	9e bf       	out	0x3e, r25	; 62
    2186:	0f be       	out	0x3f, r0	; 63
    2188:	8d bf       	out	0x3d, r24	; 61
#endif

					if(stateBeingProcessed == target)
    218a:	28 89       	ldd	r18, Y+16	; 0x10
    218c:	39 89       	ldd	r19, Y+17	; 0x11
    218e:	89 85       	ldd	r24, Y+9	; 0x09
    2190:	9a 85       	ldd	r25, Y+10	; 0x0a
    2192:	28 17       	cp	r18, r24
    2194:	39 07       	cpc	r19, r25
    2196:	09 f0       	breq	.+2      	; 0x219a <iterateStateMachine+0x4ce>
    2198:	40 c0       	rjmp	.+128    	; 0x221a <iterateStateMachine+0x54e>
					{
						uint8_t	exitIndex = 0 ;
    219a:	1a 82       	std	Y+2, r1	; 0x02

#ifdef TRACING_ENABLED
						printf("\t\t\t\t\t\tFound target as ancestor of source\n") ;
    219c:	87 e1       	ldi	r24, 0x17	; 23
    219e:	96 e0       	ldi	r25, 0x06	; 6
    21a0:	0e 94 46 14 	call	0x288c	; 0x288c <puts>
#endif

						sourceIndex-- ;
    21a4:	88 85       	ldd	r24, Y+8	; 0x08
    21a6:	81 50       	subi	r24, 0x01	; 1
    21a8:	88 87       	std	Y+8, r24	; 0x08
    21aa:	28 c0       	rjmp	.+80     	; 0x21fc <iterateStateMachine+0x530>

						while(exitIndex < sourceIndex)
						{
#ifdef TRACING_ENABLED
							printf("\t\t\t\t") ;
    21ac:	00 d0       	rcall	.+0      	; 0x21ae <iterateStateMachine+0x4e2>
    21ae:	ed b7       	in	r30, 0x3d	; 61
    21b0:	fe b7       	in	r31, 0x3e	; 62
    21b2:	31 96       	adiw	r30, 0x01	; 1
    21b4:	80 e4       	ldi	r24, 0x40	; 64
    21b6:	96 e0       	ldi	r25, 0x06	; 6
    21b8:	91 83       	std	Z+1, r25	; 0x01
    21ba:	80 83       	st	Z, r24
    21bc:	0e 94 2a 14 	call	0x2854	; 0x2854 <printf>
    21c0:	0f 90       	pop	r0
    21c2:	0f 90       	pop	r0
#endif

							callStateHandler(sm, sourceHierarchy[exitIndex], &exitEvent) ;
    21c4:	8a 81       	ldd	r24, Y+2	; 0x02
    21c6:	88 2f       	mov	r24, r24
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	9c 01       	movw	r18, r24
    21cc:	22 0f       	add	r18, r18
    21ce:	33 1f       	adc	r19, r19
    21d0:	ce 01       	movw	r24, r28
    21d2:	01 96       	adiw	r24, 0x01	; 1
    21d4:	82 0f       	add	r24, r18
    21d6:	93 1f       	adc	r25, r19
    21d8:	fc 01       	movw	r30, r24
    21da:	73 96       	adiw	r30, 0x13	; 19
    21dc:	40 81       	ld	r20, Z
    21de:	51 81       	ldd	r21, Z+1	; 0x01
    21e0:	fe 01       	movw	r30, r28
    21e2:	ec 5a       	subi	r30, 0xAC	; 172
    21e4:	ff 4f       	sbci	r31, 0xFF	; 255
    21e6:	80 81       	ld	r24, Z
    21e8:	91 81       	ldd	r25, Z+1	; 0x01
    21ea:	22 ec       	ldi	r18, 0xC2	; 194
    21ec:	34 e0       	ldi	r19, 0x04	; 4
    21ee:	ba 01       	movw	r22, r20
    21f0:	a9 01       	movw	r20, r18
    21f2:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <callStateHandler>

							exitIndex++ ;
    21f6:	8a 81       	ldd	r24, Y+2	; 0x02
    21f8:	8f 5f       	subi	r24, 0xFF	; 255
    21fa:	8a 83       	std	Y+2, r24	; 0x02
						printf("\t\t\t\t\t\tFound target as ancestor of source\n") ;
#endif

						sourceIndex-- ;

						while(exitIndex < sourceIndex)
    21fc:	9a 81       	ldd	r25, Y+2	; 0x02
    21fe:	88 85       	ldd	r24, Y+8	; 0x08
    2200:	98 17       	cp	r25, r24
    2202:	a0 f2       	brcs	.-88     	; 0x21ac <iterateStateMachine+0x4e0>
							callStateHandler(sm, sourceHierarchy[exitIndex], &exitEvent) ;

							exitIndex++ ;
						}

						sm->currentState = target ;
    2204:	fe 01       	movw	r30, r28
    2206:	ec 5a       	subi	r30, 0xAC	; 172
    2208:	ff 4f       	sbci	r31, 0xFF	; 255
    220a:	01 90       	ld	r0, Z+
    220c:	f0 81       	ld	r31, Z
    220e:	e0 2d       	mov	r30, r0
    2210:	89 85       	ldd	r24, Y+9	; 0x09
    2212:	9a 85       	ldd	r25, Y+10	; 0x0a
    2214:	95 83       	std	Z+5, r25	; 0x05
    2216:	84 83       	std	Z+4, r24	; 0x04
    2218:	0b c0       	rjmp	.+22     	; 0x2230 <iterateStateMachine+0x564>

						break ;
					}

					stateBeingProcessed = (state_t*)(stateBeingProcessed->parent) ;
    221a:	e8 89       	ldd	r30, Y+16	; 0x10
    221c:	f9 89       	ldd	r31, Y+17	; 0x11
    221e:	80 81       	ld	r24, Z
    2220:	91 81       	ldd	r25, Z+1	; 0x01
    2222:	99 8b       	std	Y+17, r25	; 0x11
    2224:	88 8b       	std	Y+16, r24	; 0x10
				} while(stateBeingProcessed) ;
    2226:	88 89       	ldd	r24, Y+16	; 0x10
    2228:	99 89       	ldd	r25, Y+17	; 0x11
    222a:	00 97       	sbiw	r24, 0x00	; 0
    222c:	09 f0       	breq	.+2      	; 0x2230 <iterateStateMachine+0x564>
    222e:	78 cf       	rjmp	.-272    	; 0x2120 <iterateStateMachine+0x454>

				if(sm->currentState != target)
    2230:	fe 01       	movw	r30, r28
    2232:	ec 5a       	subi	r30, 0xAC	; 172
    2234:	ff 4f       	sbci	r31, 0xFF	; 255
    2236:	01 90       	ld	r0, Z+
    2238:	f0 81       	ld	r31, Z
    223a:	e0 2d       	mov	r30, r0
    223c:	24 81       	ldd	r18, Z+4	; 0x04
    223e:	35 81       	ldd	r19, Z+5	; 0x05
    2240:	89 85       	ldd	r24, Y+9	; 0x09
    2242:	9a 85       	ldd	r25, Y+10	; 0x0a
    2244:	28 17       	cp	r18, r24
    2246:	39 07       	cpc	r19, r25
    2248:	09 f4       	brne	.+2      	; 0x224c <iterateStateMachine+0x580>
    224a:	98 c0       	rjmp	.+304    	; 0x237c <iterateStateMachine+0x6b0>
				{
#ifdef TRACING_ENABLED
					printf("\t\t\t\tScanning target hierarchy...\n") ;
    224c:	85 e4       	ldi	r24, 0x45	; 69
    224e:	96 e0       	ldi	r25, 0x06	; 6
    2250:	0e 94 46 14 	call	0x288c	; 0x288c <puts>
#endif

					targetIndex			= 0 ;
    2254:	1f 82       	std	Y+7, r1	; 0x07
					stateBeingProcessed	= target ;
    2256:	89 85       	ldd	r24, Y+9	; 0x09
    2258:	9a 85       	ldd	r25, Y+10	; 0x0a
    225a:	99 8b       	std	Y+17, r25	; 0x11
    225c:	88 8b       	std	Y+16, r24	; 0x10

					do
					{
						targetHierarchy[targetIndex] = stateBeingProcessed ;
    225e:	8f 81       	ldd	r24, Y+7	; 0x07
    2260:	88 2f       	mov	r24, r24
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	9c 01       	movw	r18, r24
    2266:	22 0f       	add	r18, r18
    2268:	33 1f       	adc	r19, r19
    226a:	ce 01       	movw	r24, r28
    226c:	01 96       	adiw	r24, 0x01	; 1
    226e:	82 0f       	add	r24, r18
    2270:	93 1f       	adc	r25, r19
    2272:	fc 01       	movw	r30, r24
    2274:	f3 96       	adiw	r30, 0x33	; 51
    2276:	88 89       	ldd	r24, Y+16	; 0x10
    2278:	99 89       	ldd	r25, Y+17	; 0x11
    227a:	91 83       	std	Z+1, r25	; 0x01
    227c:	80 83       	st	Z, r24

#ifdef TRACING_ENABLED
						printf("\t\t\t\t\ttargetHierarchy[%d] = %s\n", targetIndex, stateBeingProcessed->stateName) ;
    227e:	8f 81       	ldd	r24, Y+7	; 0x07
    2280:	48 2f       	mov	r20, r24
    2282:	50 e0       	ldi	r21, 0x00	; 0
    2284:	e8 89       	ldd	r30, Y+16	; 0x10
    2286:	f9 89       	ldd	r31, Y+17	; 0x11
    2288:	25 81       	ldd	r18, Z+5	; 0x05
    228a:	36 81       	ldd	r19, Z+6	; 0x06
    228c:	00 d0       	rcall	.+0      	; 0x228e <iterateStateMachine+0x5c2>
    228e:	00 d0       	rcall	.+0      	; 0x2290 <iterateStateMachine+0x5c4>
    2290:	00 d0       	rcall	.+0      	; 0x2292 <iterateStateMachine+0x5c6>
    2292:	ed b7       	in	r30, 0x3d	; 61
    2294:	fe b7       	in	r31, 0x3e	; 62
    2296:	31 96       	adiw	r30, 0x01	; 1
    2298:	86 e6       	ldi	r24, 0x66	; 102
    229a:	96 e0       	ldi	r25, 0x06	; 6
    229c:	91 83       	std	Z+1, r25	; 0x01
    229e:	80 83       	st	Z, r24
    22a0:	53 83       	std	Z+3, r21	; 0x03
    22a2:	42 83       	std	Z+2, r20	; 0x02
    22a4:	35 83       	std	Z+5, r19	; 0x05
    22a6:	24 83       	std	Z+4, r18	; 0x04
    22a8:	0e 94 2a 14 	call	0x2854	; 0x2854 <printf>
    22ac:	8d b7       	in	r24, 0x3d	; 61
    22ae:	9e b7       	in	r25, 0x3e	; 62
    22b0:	06 96       	adiw	r24, 0x06	; 6
    22b2:	0f b6       	in	r0, 0x3f	; 63
    22b4:	f8 94       	cli
    22b6:	9e bf       	out	0x3e, r25	; 62
    22b8:	0f be       	out	0x3f, r0	; 63
    22ba:	8d bf       	out	0x3d, r24	; 61
#endif

						if(stateBeingProcessed == source)
    22bc:	28 89       	ldd	r18, Y+16	; 0x10
    22be:	39 89       	ldd	r19, Y+17	; 0x11
    22c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    22c2:	9c 85       	ldd	r25, Y+12	; 0x0c
    22c4:	28 17       	cp	r18, r24
    22c6:	39 07       	cpc	r19, r25
    22c8:	09 f0       	breq	.+2      	; 0x22cc <iterateStateMachine+0x600>
    22ca:	4a c0       	rjmp	.+148    	; 0x2360 <iterateStateMachine+0x694>
						{
#ifdef TRACING_ENABLED
							printf("\t\t\t\t\t\tFound source as ancestor of target\n") ;
    22cc:	85 e8       	ldi	r24, 0x85	; 133
    22ce:	96 e0       	ldi	r25, 0x06	; 6
    22d0:	0e 94 46 14 	call	0x288c	; 0x288c <puts>
    22d4:	25 c0       	rjmp	.+74     	; 0x2320 <iterateStateMachine+0x654>
#endif

							while(targetIndex--)
							{
#ifdef TRACING_ENABLED
								printf("\t\t\t\t") ;
    22d6:	00 d0       	rcall	.+0      	; 0x22d8 <iterateStateMachine+0x60c>
    22d8:	ed b7       	in	r30, 0x3d	; 61
    22da:	fe b7       	in	r31, 0x3e	; 62
    22dc:	31 96       	adiw	r30, 0x01	; 1
    22de:	80 e4       	ldi	r24, 0x40	; 64
    22e0:	96 e0       	ldi	r25, 0x06	; 6
    22e2:	91 83       	std	Z+1, r25	; 0x01
    22e4:	80 83       	st	Z, r24
    22e6:	0e 94 2a 14 	call	0x2854	; 0x2854 <printf>
    22ea:	0f 90       	pop	r0
    22ec:	0f 90       	pop	r0
#endif
								callStateHandler(sm, targetHierarchy[targetIndex], &enterEvent) ;
    22ee:	8f 81       	ldd	r24, Y+7	; 0x07
    22f0:	88 2f       	mov	r24, r24
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	9c 01       	movw	r18, r24
    22f6:	22 0f       	add	r18, r18
    22f8:	33 1f       	adc	r19, r19
    22fa:	ce 01       	movw	r24, r28
    22fc:	01 96       	adiw	r24, 0x01	; 1
    22fe:	82 0f       	add	r24, r18
    2300:	93 1f       	adc	r25, r19
    2302:	fc 01       	movw	r30, r24
    2304:	f3 96       	adiw	r30, 0x33	; 51
    2306:	40 81       	ld	r20, Z
    2308:	51 81       	ldd	r21, Z+1	; 0x01
    230a:	fe 01       	movw	r30, r28
    230c:	ec 5a       	subi	r30, 0xAC	; 172
    230e:	ff 4f       	sbci	r31, 0xFF	; 255
    2310:	80 81       	ld	r24, Z
    2312:	91 81       	ldd	r25, Z+1	; 0x01
    2314:	21 ec       	ldi	r18, 0xC1	; 193
    2316:	34 e0       	ldi	r19, 0x04	; 4
    2318:	ba 01       	movw	r22, r20
    231a:	a9 01       	movw	r20, r18
    231c:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <callStateHandler>
						{
#ifdef TRACING_ENABLED
							printf("\t\t\t\t\t\tFound source as ancestor of target\n") ;
#endif

							while(targetIndex--)
    2320:	9f 81       	ldd	r25, Y+7	; 0x07
    2322:	69 96       	adiw	r28, 0x19	; 25
    2324:	9f af       	std	Y+63, r25	; 0x3f
    2326:	69 97       	sbiw	r28, 0x19	; 25
    2328:	69 96       	adiw	r28, 0x19	; 25
    232a:	8f ad       	ldd	r24, Y+63	; 0x3f
    232c:	69 97       	sbiw	r28, 0x19	; 25
    232e:	88 23       	and	r24, r24
    2330:	21 f0       	breq	.+8      	; 0x233a <iterateStateMachine+0x66e>
    2332:	91 e0       	ldi	r25, 0x01	; 1
    2334:	69 96       	adiw	r28, 0x19	; 25
    2336:	9f af       	std	Y+63, r25	; 0x3f
    2338:	69 97       	sbiw	r28, 0x19	; 25
    233a:	69 96       	adiw	r28, 0x19	; 25
    233c:	8f ad       	ldd	r24, Y+63	; 0x3f
    233e:	69 97       	sbiw	r28, 0x19	; 25
    2340:	9f 81       	ldd	r25, Y+7	; 0x07
    2342:	91 50       	subi	r25, 0x01	; 1
    2344:	9f 83       	std	Y+7, r25	; 0x07
    2346:	88 23       	and	r24, r24
    2348:	31 f6       	brne	.-116    	; 0x22d6 <iterateStateMachine+0x60a>
								printf("\t\t\t\t") ;
#endif
								callStateHandler(sm, targetHierarchy[targetIndex], &enterEvent) ;
							}

							sm->currentState = target ;
    234a:	fe 01       	movw	r30, r28
    234c:	ec 5a       	subi	r30, 0xAC	; 172
    234e:	ff 4f       	sbci	r31, 0xFF	; 255
    2350:	01 90       	ld	r0, Z+
    2352:	f0 81       	ld	r31, Z
    2354:	e0 2d       	mov	r30, r0
    2356:	89 85       	ldd	r24, Y+9	; 0x09
    2358:	9a 85       	ldd	r25, Y+10	; 0x0a
    235a:	95 83       	std	Z+5, r25	; 0x05
    235c:	84 83       	std	Z+4, r24	; 0x04
    235e:	0e c0       	rjmp	.+28     	; 0x237c <iterateStateMachine+0x6b0>

							break ;
						}

						targetIndex++ ;
    2360:	8f 81       	ldd	r24, Y+7	; 0x07
    2362:	8f 5f       	subi	r24, 0xFF	; 255
    2364:	8f 83       	std	Y+7, r24	; 0x07
						stateBeingProcessed = (state_t*)(stateBeingProcessed->parent) ;
    2366:	e8 89       	ldd	r30, Y+16	; 0x10
    2368:	f9 89       	ldd	r31, Y+17	; 0x11
    236a:	80 81       	ld	r24, Z
    236c:	91 81       	ldd	r25, Z+1	; 0x01
    236e:	99 8b       	std	Y+17, r25	; 0x11
    2370:	88 8b       	std	Y+16, r24	; 0x10
					} while(stateBeingProcessed) ;
    2372:	88 89       	ldd	r24, Y+16	; 0x10
    2374:	99 89       	ldd	r25, Y+17	; 0x11
    2376:	00 97       	sbiw	r24, 0x00	; 0
    2378:	09 f0       	breq	.+2      	; 0x237c <iterateStateMachine+0x6b0>
    237a:	71 cf       	rjmp	.-286    	; 0x225e <iterateStateMachine+0x592>
				}

				if(sm->currentState != target)
    237c:	fe 01       	movw	r30, r28
    237e:	ec 5a       	subi	r30, 0xAC	; 172
    2380:	ff 4f       	sbci	r31, 0xFF	; 255
    2382:	01 90       	ld	r0, Z+
    2384:	f0 81       	ld	r31, Z
    2386:	e0 2d       	mov	r30, r0
    2388:	24 81       	ldd	r18, Z+4	; 0x04
    238a:	35 81       	ldd	r19, Z+5	; 0x05
    238c:	89 85       	ldd	r24, Y+9	; 0x09
    238e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2390:	28 17       	cp	r18, r24
    2392:	39 07       	cpc	r19, r25
    2394:	09 f4       	brne	.+2      	; 0x2398 <iterateStateMachine+0x6cc>
    2396:	3c c1       	rjmp	.+632    	; 0x2610 <iterateStateMachine+0x944>
				{
					uint8_t	LCAindex = 0 ;
    2398:	19 82       	std	Y+1, r1	; 0x01

#ifdef TRACING_ENABLED
					printf("\t\t\t\tStill haven't found relationship. Scanning for LCA...\n") ;
    239a:	8e ea       	ldi	r24, 0xAE	; 174
    239c:	96 e0       	ldi	r25, 0x06	; 6
    239e:	0e 94 46 14 	call	0x288c	; 0x288c <puts>
#endif
					LCA			= 0 ;
    23a2:	1e 82       	std	Y+6, r1	; 0x06
    23a4:	1d 82       	std	Y+5, r1	; 0x05
					entryIndex	= targetIndex - 1 ;
    23a6:	8f 81       	ldd	r24, Y+7	; 0x07
    23a8:	81 50       	subi	r24, 0x01	; 1
    23aa:	8c 83       	std	Y+4, r24	; 0x04
					exitIndex	= sourceIndex - 1 ;
    23ac:	88 85       	ldd	r24, Y+8	; 0x08
    23ae:	81 50       	subi	r24, 0x01	; 1
    23b0:	8b 83       	std	Y+3, r24	; 0x03
#ifdef TRACING_ENABLED
					printf("\t\t\t\t\tentryIndex = %d, exitIndex = %d\n", entryIndex, exitIndex) ;
    23b2:	8c 81       	ldd	r24, Y+4	; 0x04
    23b4:	48 2f       	mov	r20, r24
    23b6:	50 e0       	ldi	r21, 0x00	; 0
    23b8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ba:	28 2f       	mov	r18, r24
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	00 d0       	rcall	.+0      	; 0x23c0 <iterateStateMachine+0x6f4>
    23c0:	00 d0       	rcall	.+0      	; 0x23c2 <iterateStateMachine+0x6f6>
    23c2:	00 d0       	rcall	.+0      	; 0x23c4 <iterateStateMachine+0x6f8>
    23c4:	ed b7       	in	r30, 0x3d	; 61
    23c6:	fe b7       	in	r31, 0x3e	; 62
    23c8:	31 96       	adiw	r30, 0x01	; 1
    23ca:	88 ee       	ldi	r24, 0xE8	; 232
    23cc:	96 e0       	ldi	r25, 0x06	; 6
    23ce:	91 83       	std	Z+1, r25	; 0x01
    23d0:	80 83       	st	Z, r24
    23d2:	53 83       	std	Z+3, r21	; 0x03
    23d4:	42 83       	std	Z+2, r20	; 0x02
    23d6:	35 83       	std	Z+5, r19	; 0x05
    23d8:	24 83       	std	Z+4, r18	; 0x04
    23da:	0e 94 2a 14 	call	0x2854	; 0x2854 <printf>
    23de:	8d b7       	in	r24, 0x3d	; 61
    23e0:	9e b7       	in	r25, 0x3e	; 62
    23e2:	06 96       	adiw	r24, 0x06	; 6
    23e4:	0f b6       	in	r0, 0x3f	; 63
    23e6:	f8 94       	cli
    23e8:	9e bf       	out	0x3e, r25	; 62
    23ea:	0f be       	out	0x3f, r0	; 63
    23ec:	8d bf       	out	0x3d, r24	; 61
    23ee:	2e c0       	rjmp	.+92     	; 0x244c <iterateStateMachine+0x780>
#endif

					while(sourceHierarchy[exitIndex] == targetHierarchy[entryIndex])
					{
						LCA = sourceHierarchy[exitIndex] ;
    23f0:	8b 81       	ldd	r24, Y+3	; 0x03
    23f2:	88 2f       	mov	r24, r24
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	9c 01       	movw	r18, r24
    23f8:	22 0f       	add	r18, r18
    23fa:	33 1f       	adc	r19, r19
    23fc:	ce 01       	movw	r24, r28
    23fe:	01 96       	adiw	r24, 0x01	; 1
    2400:	82 0f       	add	r24, r18
    2402:	93 1f       	adc	r25, r19
    2404:	fc 01       	movw	r30, r24
    2406:	73 96       	adiw	r30, 0x13	; 19
    2408:	80 81       	ld	r24, Z
    240a:	91 81       	ldd	r25, Z+1	; 0x01
    240c:	9e 83       	std	Y+6, r25	; 0x06
    240e:	8d 83       	std	Y+5, r24	; 0x05

						entryIndex-- ;
    2410:	8c 81       	ldd	r24, Y+4	; 0x04
    2412:	81 50       	subi	r24, 0x01	; 1
    2414:	8c 83       	std	Y+4, r24	; 0x04
						exitIndex-- ;
    2416:	8b 81       	ldd	r24, Y+3	; 0x03
    2418:	81 50       	subi	r24, 0x01	; 1
    241a:	8b 83       	std	Y+3, r24	; 0x03

#ifdef TRACING_ENABLED
						printf("\t\t\t\t\tCurrent LCA candidate: %s\n", LCA->stateName) ;
    241c:	ed 81       	ldd	r30, Y+5	; 0x05
    241e:	fe 81       	ldd	r31, Y+6	; 0x06
    2420:	25 81       	ldd	r18, Z+5	; 0x05
    2422:	36 81       	ldd	r19, Z+6	; 0x06
    2424:	00 d0       	rcall	.+0      	; 0x2426 <iterateStateMachine+0x75a>
    2426:	00 d0       	rcall	.+0      	; 0x2428 <iterateStateMachine+0x75c>
    2428:	ed b7       	in	r30, 0x3d	; 61
    242a:	fe b7       	in	r31, 0x3e	; 62
    242c:	31 96       	adiw	r30, 0x01	; 1
    242e:	8e e0       	ldi	r24, 0x0E	; 14
    2430:	97 e0       	ldi	r25, 0x07	; 7
    2432:	91 83       	std	Z+1, r25	; 0x01
    2434:	80 83       	st	Z, r24
    2436:	33 83       	std	Z+3, r19	; 0x03
    2438:	22 83       	std	Z+2, r18	; 0x02
    243a:	0e 94 2a 14 	call	0x2854	; 0x2854 <printf>
    243e:	0f 90       	pop	r0
    2440:	0f 90       	pop	r0
    2442:	0f 90       	pop	r0
    2444:	0f 90       	pop	r0
#endif

						LCAindex++ ;
    2446:	89 81       	ldd	r24, Y+1	; 0x01
    2448:	8f 5f       	subi	r24, 0xFF	; 255
    244a:	89 83       	std	Y+1, r24	; 0x01
					exitIndex	= sourceIndex - 1 ;
#ifdef TRACING_ENABLED
					printf("\t\t\t\t\tentryIndex = %d, exitIndex = %d\n", entryIndex, exitIndex) ;
#endif

					while(sourceHierarchy[exitIndex] == targetHierarchy[entryIndex])
    244c:	8b 81       	ldd	r24, Y+3	; 0x03
    244e:	88 2f       	mov	r24, r24
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	9c 01       	movw	r18, r24
    2454:	22 0f       	add	r18, r18
    2456:	33 1f       	adc	r19, r19
    2458:	ce 01       	movw	r24, r28
    245a:	01 96       	adiw	r24, 0x01	; 1
    245c:	82 0f       	add	r24, r18
    245e:	93 1f       	adc	r25, r19
    2460:	fc 01       	movw	r30, r24
    2462:	73 96       	adiw	r30, 0x13	; 19
    2464:	40 81       	ld	r20, Z
    2466:	51 81       	ldd	r21, Z+1	; 0x01
    2468:	8c 81       	ldd	r24, Y+4	; 0x04
    246a:	88 2f       	mov	r24, r24
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	9c 01       	movw	r18, r24
    2470:	22 0f       	add	r18, r18
    2472:	33 1f       	adc	r19, r19
    2474:	ce 01       	movw	r24, r28
    2476:	01 96       	adiw	r24, 0x01	; 1
    2478:	82 0f       	add	r24, r18
    247a:	93 1f       	adc	r25, r19
    247c:	fc 01       	movw	r30, r24
    247e:	f3 96       	adiw	r30, 0x33	; 51
    2480:	80 81       	ld	r24, Z
    2482:	91 81       	ldd	r25, Z+1	; 0x01
    2484:	48 17       	cp	r20, r24
    2486:	59 07       	cpc	r21, r25
    2488:	09 f4       	brne	.+2      	; 0x248c <iterateStateMachine+0x7c0>
    248a:	b2 cf       	rjmp	.-156    	; 0x23f0 <iterateStateMachine+0x724>

						LCAindex++ ;
					}

#ifdef TRACING_ENABLED
					printf("\t\t\t\t\tLCA of %s and %s is: %s\n", source->stateName, target->stateName, LCA->stateName) ;
    248c:	eb 85       	ldd	r30, Y+11	; 0x0b
    248e:	fc 85       	ldd	r31, Y+12	; 0x0c
    2490:	25 81       	ldd	r18, Z+5	; 0x05
    2492:	36 81       	ldd	r19, Z+6	; 0x06
    2494:	e9 85       	ldd	r30, Y+9	; 0x09
    2496:	fa 85       	ldd	r31, Y+10	; 0x0a
    2498:	45 81       	ldd	r20, Z+5	; 0x05
    249a:	56 81       	ldd	r21, Z+6	; 0x06
    249c:	ed 81       	ldd	r30, Y+5	; 0x05
    249e:	fe 81       	ldd	r31, Y+6	; 0x06
    24a0:	65 81       	ldd	r22, Z+5	; 0x05
    24a2:	76 81       	ldd	r23, Z+6	; 0x06
    24a4:	8d b7       	in	r24, 0x3d	; 61
    24a6:	9e b7       	in	r25, 0x3e	; 62
    24a8:	08 97       	sbiw	r24, 0x08	; 8
    24aa:	0f b6       	in	r0, 0x3f	; 63
    24ac:	f8 94       	cli
    24ae:	9e bf       	out	0x3e, r25	; 62
    24b0:	0f be       	out	0x3f, r0	; 63
    24b2:	8d bf       	out	0x3d, r24	; 61
    24b4:	ed b7       	in	r30, 0x3d	; 61
    24b6:	fe b7       	in	r31, 0x3e	; 62
    24b8:	31 96       	adiw	r30, 0x01	; 1
    24ba:	8e e2       	ldi	r24, 0x2E	; 46
    24bc:	97 e0       	ldi	r25, 0x07	; 7
    24be:	91 83       	std	Z+1, r25	; 0x01
    24c0:	80 83       	st	Z, r24
    24c2:	33 83       	std	Z+3, r19	; 0x03
    24c4:	22 83       	std	Z+2, r18	; 0x02
    24c6:	55 83       	std	Z+5, r21	; 0x05
    24c8:	44 83       	std	Z+4, r20	; 0x04
    24ca:	77 83       	std	Z+7, r23	; 0x07
    24cc:	66 83       	std	Z+6, r22	; 0x06
    24ce:	0e 94 2a 14 	call	0x2854	; 0x2854 <printf>
    24d2:	8d b7       	in	r24, 0x3d	; 61
    24d4:	9e b7       	in	r25, 0x3e	; 62
    24d6:	08 96       	adiw	r24, 0x08	; 8
    24d8:	0f b6       	in	r0, 0x3f	; 63
    24da:	f8 94       	cli
    24dc:	9e bf       	out	0x3e, r25	; 62
    24de:	0f be       	out	0x3f, r0	; 63
    24e0:	8d bf       	out	0x3d, r24	; 61
					printf("\t\t\t\t\tentryIndex = %d, exitIndex = %d\n", entryIndex, exitIndex) ;
    24e2:	8c 81       	ldd	r24, Y+4	; 0x04
    24e4:	48 2f       	mov	r20, r24
    24e6:	50 e0       	ldi	r21, 0x00	; 0
    24e8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ea:	28 2f       	mov	r18, r24
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	00 d0       	rcall	.+0      	; 0x24f0 <iterateStateMachine+0x824>
    24f0:	00 d0       	rcall	.+0      	; 0x24f2 <iterateStateMachine+0x826>
    24f2:	00 d0       	rcall	.+0      	; 0x24f4 <iterateStateMachine+0x828>
    24f4:	ed b7       	in	r30, 0x3d	; 61
    24f6:	fe b7       	in	r31, 0x3e	; 62
    24f8:	31 96       	adiw	r30, 0x01	; 1
    24fa:	88 ee       	ldi	r24, 0xE8	; 232
    24fc:	96 e0       	ldi	r25, 0x06	; 6
    24fe:	91 83       	std	Z+1, r25	; 0x01
    2500:	80 83       	st	Z, r24
    2502:	53 83       	std	Z+3, r21	; 0x03
    2504:	42 83       	std	Z+2, r20	; 0x02
    2506:	35 83       	std	Z+5, r19	; 0x05
    2508:	24 83       	std	Z+4, r18	; 0x04
    250a:	0e 94 2a 14 	call	0x2854	; 0x2854 <printf>
    250e:	8d b7       	in	r24, 0x3d	; 61
    2510:	9e b7       	in	r25, 0x3e	; 62
    2512:	06 96       	adiw	r24, 0x06	; 6
    2514:	0f b6       	in	r0, 0x3f	; 63
    2516:	f8 94       	cli
    2518:	9e bf       	out	0x3e, r25	; 62
    251a:	0f be       	out	0x3f, r0	; 63
    251c:	8d bf       	out	0x3d, r24	; 61
#endif

					sourceIndex	= exitIndex + 1 ;
    251e:	8b 81       	ldd	r24, Y+3	; 0x03
    2520:	8f 5f       	subi	r24, 0xFF	; 255
    2522:	88 87       	std	Y+8, r24	; 0x08
					exitIndex	= 0 ;
    2524:	1b 82       	std	Y+3, r1	; 0x03
    2526:	28 c0       	rjmp	.+80     	; 0x2578 <iterateStateMachine+0x8ac>

					while(exitIndex < sourceIndex)
					{
#ifdef TRACING_ENABLED
						printf("\t\t\t\t") ;
    2528:	00 d0       	rcall	.+0      	; 0x252a <iterateStateMachine+0x85e>
    252a:	ed b7       	in	r30, 0x3d	; 61
    252c:	fe b7       	in	r31, 0x3e	; 62
    252e:	31 96       	adiw	r30, 0x01	; 1
    2530:	80 e4       	ldi	r24, 0x40	; 64
    2532:	96 e0       	ldi	r25, 0x06	; 6
    2534:	91 83       	std	Z+1, r25	; 0x01
    2536:	80 83       	st	Z, r24
    2538:	0e 94 2a 14 	call	0x2854	; 0x2854 <printf>
    253c:	0f 90       	pop	r0
    253e:	0f 90       	pop	r0
#endif

						callStateHandler(sm, sourceHierarchy[exitIndex], &exitEvent) ;
    2540:	8b 81       	ldd	r24, Y+3	; 0x03
    2542:	88 2f       	mov	r24, r24
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	9c 01       	movw	r18, r24
    2548:	22 0f       	add	r18, r18
    254a:	33 1f       	adc	r19, r19
    254c:	ce 01       	movw	r24, r28
    254e:	01 96       	adiw	r24, 0x01	; 1
    2550:	82 0f       	add	r24, r18
    2552:	93 1f       	adc	r25, r19
    2554:	fc 01       	movw	r30, r24
    2556:	73 96       	adiw	r30, 0x13	; 19
    2558:	40 81       	ld	r20, Z
    255a:	51 81       	ldd	r21, Z+1	; 0x01
    255c:	fe 01       	movw	r30, r28
    255e:	ec 5a       	subi	r30, 0xAC	; 172
    2560:	ff 4f       	sbci	r31, 0xFF	; 255
    2562:	80 81       	ld	r24, Z
    2564:	91 81       	ldd	r25, Z+1	; 0x01
    2566:	22 ec       	ldi	r18, 0xC2	; 194
    2568:	34 e0       	ldi	r19, 0x04	; 4
    256a:	ba 01       	movw	r22, r20
    256c:	a9 01       	movw	r20, r18
    256e:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <callStateHandler>

						exitIndex++ ;
    2572:	8b 81       	ldd	r24, Y+3	; 0x03
    2574:	8f 5f       	subi	r24, 0xFF	; 255
    2576:	8b 83       	std	Y+3, r24	; 0x03
#endif

					sourceIndex	= exitIndex + 1 ;
					exitIndex	= 0 ;

					while(exitIndex < sourceIndex)
    2578:	9b 81       	ldd	r25, Y+3	; 0x03
    257a:	88 85       	ldd	r24, Y+8	; 0x08
    257c:	98 17       	cp	r25, r24
    257e:	a0 f2       	brcs	.-88     	; 0x2528 <iterateStateMachine+0x85c>
						callStateHandler(sm, sourceHierarchy[exitIndex], &exitEvent) ;

						exitIndex++ ;
					}

					targetIndex = entryIndex + 1 ;
    2580:	8c 81       	ldd	r24, Y+4	; 0x04
    2582:	8f 5f       	subi	r24, 0xFF	; 255
    2584:	8f 83       	std	Y+7, r24	; 0x07
    2586:	25 c0       	rjmp	.+74     	; 0x25d2 <iterateStateMachine+0x906>

					while(targetIndex--)
					{
#ifdef TRACING_ENABLED
						printf("\t\t\t\t") ;
    2588:	00 d0       	rcall	.+0      	; 0x258a <iterateStateMachine+0x8be>
    258a:	ed b7       	in	r30, 0x3d	; 61
    258c:	fe b7       	in	r31, 0x3e	; 62
    258e:	31 96       	adiw	r30, 0x01	; 1
    2590:	80 e4       	ldi	r24, 0x40	; 64
    2592:	96 e0       	ldi	r25, 0x06	; 6
    2594:	91 83       	std	Z+1, r25	; 0x01
    2596:	80 83       	st	Z, r24
    2598:	0e 94 2a 14 	call	0x2854	; 0x2854 <printf>
    259c:	0f 90       	pop	r0
    259e:	0f 90       	pop	r0
#endif
						callStateHandler(sm, targetHierarchy[targetIndex], &enterEvent) ;
    25a0:	8f 81       	ldd	r24, Y+7	; 0x07
    25a2:	88 2f       	mov	r24, r24
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	9c 01       	movw	r18, r24
    25a8:	22 0f       	add	r18, r18
    25aa:	33 1f       	adc	r19, r19
    25ac:	ce 01       	movw	r24, r28
    25ae:	01 96       	adiw	r24, 0x01	; 1
    25b0:	82 0f       	add	r24, r18
    25b2:	93 1f       	adc	r25, r19
    25b4:	fc 01       	movw	r30, r24
    25b6:	f3 96       	adiw	r30, 0x33	; 51
    25b8:	40 81       	ld	r20, Z
    25ba:	51 81       	ldd	r21, Z+1	; 0x01
    25bc:	fe 01       	movw	r30, r28
    25be:	ec 5a       	subi	r30, 0xAC	; 172
    25c0:	ff 4f       	sbci	r31, 0xFF	; 255
    25c2:	80 81       	ld	r24, Z
    25c4:	91 81       	ldd	r25, Z+1	; 0x01
    25c6:	21 ec       	ldi	r18, 0xC1	; 193
    25c8:	34 e0       	ldi	r19, 0x04	; 4
    25ca:	ba 01       	movw	r22, r20
    25cc:	a9 01       	movw	r20, r18
    25ce:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <callStateHandler>
						exitIndex++ ;
					}

					targetIndex = entryIndex + 1 ;

					while(targetIndex--)
    25d2:	9f 81       	ldd	r25, Y+7	; 0x07
    25d4:	6a 96       	adiw	r28, 0x1a	; 26
    25d6:	9f af       	std	Y+63, r25	; 0x3f
    25d8:	6a 97       	sbiw	r28, 0x1a	; 26
    25da:	6a 96       	adiw	r28, 0x1a	; 26
    25dc:	8f ad       	ldd	r24, Y+63	; 0x3f
    25de:	6a 97       	sbiw	r28, 0x1a	; 26
    25e0:	88 23       	and	r24, r24
    25e2:	21 f0       	breq	.+8      	; 0x25ec <iterateStateMachine+0x920>
    25e4:	91 e0       	ldi	r25, 0x01	; 1
    25e6:	6a 96       	adiw	r28, 0x1a	; 26
    25e8:	9f af       	std	Y+63, r25	; 0x3f
    25ea:	6a 97       	sbiw	r28, 0x1a	; 26
    25ec:	6a 96       	adiw	r28, 0x1a	; 26
    25ee:	8f ad       	ldd	r24, Y+63	; 0x3f
    25f0:	6a 97       	sbiw	r28, 0x1a	; 26
    25f2:	9f 81       	ldd	r25, Y+7	; 0x07
    25f4:	91 50       	subi	r25, 0x01	; 1
    25f6:	9f 83       	std	Y+7, r25	; 0x07
    25f8:	88 23       	and	r24, r24
    25fa:	31 f6       	brne	.-116    	; 0x2588 <iterateStateMachine+0x8bc>
						printf("\t\t\t\t") ;
#endif
						callStateHandler(sm, targetHierarchy[targetIndex], &enterEvent) ;
					}

					sm->currentState = target ;
    25fc:	fe 01       	movw	r30, r28
    25fe:	ec 5a       	subi	r30, 0xAC	; 172
    2600:	ff 4f       	sbci	r31, 0xFF	; 255
    2602:	01 90       	ld	r0, Z+
    2604:	f0 81       	ld	r31, Z
    2606:	e0 2d       	mov	r30, r0
    2608:	89 85       	ldd	r24, Y+9	; 0x09
    260a:	9a 85       	ldd	r25, Y+10	; 0x0a
    260c:	95 83       	std	Z+5, r25	; 0x05
    260e:	84 83       	std	Z+4, r24	; 0x04

			/* Now force an initial transition event that will cause the
			 * target state to execute any initial transactions it might
			 * have so the next iteration through this loop will catch it. */

			sm->forceTransition = true ;
    2610:	fe 01       	movw	r30, r28
    2612:	ec 5a       	subi	r30, 0xAC	; 172
    2614:	ff 4f       	sbci	r31, 0xFF	; 255
    2616:	01 90       	ld	r0, Z+
    2618:	f0 81       	ld	r31, Z
    261a:	e0 2d       	mov	r30, r0
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	81 8f       	std	Z+25, r24	; 0x19
		}
	}

#ifdef TRACING_ENABLED
	printf("\t\tEvent queue empty.\n") ;
    2620:	8c e4       	ldi	r24, 0x4C	; 76
    2622:	97 e0       	ldi	r25, 0x07	; 7
    2624:	0e 94 46 14 	call	0x288c	; 0x288c <puts>
#endif
}
    2628:	c7 5a       	subi	r28, 0xA7	; 167
    262a:	df 4f       	sbci	r29, 0xFF	; 255
    262c:	0f b6       	in	r0, 0x3f	; 63
    262e:	f8 94       	cli
    2630:	de bf       	out	0x3e, r29	; 62
    2632:	0f be       	out	0x3f, r0	; 63
    2634:	cd bf       	out	0x3d, r28	; 61
    2636:	cf 91       	pop	r28
    2638:	df 91       	pop	r29
    263a:	08 95       	ret

0000263c <malloc>:
    263c:	cf 93       	push	r28
    263e:	df 93       	push	r29
    2640:	bc 01       	movw	r22, r24
    2642:	82 30       	cpi	r24, 0x02	; 2
    2644:	91 05       	cpc	r25, r1
    2646:	10 f4       	brcc	.+4      	; 0x264c <malloc+0x10>
    2648:	62 e0       	ldi	r22, 0x02	; 2
    264a:	70 e0       	ldi	r23, 0x00	; 0
    264c:	a0 91 ce 07 	lds	r26, 0x07CE
    2650:	b0 91 cf 07 	lds	r27, 0x07CF
    2654:	ed 01       	movw	r28, r26
    2656:	e0 e0       	ldi	r30, 0x00	; 0
    2658:	f0 e0       	ldi	r31, 0x00	; 0
    265a:	40 e0       	ldi	r20, 0x00	; 0
    265c:	50 e0       	ldi	r21, 0x00	; 0
    265e:	21 c0       	rjmp	.+66     	; 0x26a2 <malloc+0x66>
    2660:	88 81       	ld	r24, Y
    2662:	99 81       	ldd	r25, Y+1	; 0x01
    2664:	86 17       	cp	r24, r22
    2666:	97 07       	cpc	r25, r23
    2668:	69 f4       	brne	.+26     	; 0x2684 <malloc+0x48>
    266a:	8a 81       	ldd	r24, Y+2	; 0x02
    266c:	9b 81       	ldd	r25, Y+3	; 0x03
    266e:	30 97       	sbiw	r30, 0x00	; 0
    2670:	19 f0       	breq	.+6      	; 0x2678 <malloc+0x3c>
    2672:	93 83       	std	Z+3, r25	; 0x03
    2674:	82 83       	std	Z+2, r24	; 0x02
    2676:	04 c0       	rjmp	.+8      	; 0x2680 <malloc+0x44>
    2678:	90 93 cf 07 	sts	0x07CF, r25
    267c:	80 93 ce 07 	sts	0x07CE, r24
    2680:	fe 01       	movw	r30, r28
    2682:	34 c0       	rjmp	.+104    	; 0x26ec <malloc+0xb0>
    2684:	68 17       	cp	r22, r24
    2686:	79 07       	cpc	r23, r25
    2688:	38 f4       	brcc	.+14     	; 0x2698 <malloc+0x5c>
    268a:	41 15       	cp	r20, r1
    268c:	51 05       	cpc	r21, r1
    268e:	19 f0       	breq	.+6      	; 0x2696 <malloc+0x5a>
    2690:	84 17       	cp	r24, r20
    2692:	95 07       	cpc	r25, r21
    2694:	08 f4       	brcc	.+2      	; 0x2698 <malloc+0x5c>
    2696:	ac 01       	movw	r20, r24
    2698:	fe 01       	movw	r30, r28
    269a:	8a 81       	ldd	r24, Y+2	; 0x02
    269c:	9b 81       	ldd	r25, Y+3	; 0x03
    269e:	9c 01       	movw	r18, r24
    26a0:	e9 01       	movw	r28, r18
    26a2:	20 97       	sbiw	r28, 0x00	; 0
    26a4:	e9 f6       	brne	.-70     	; 0x2660 <malloc+0x24>
    26a6:	41 15       	cp	r20, r1
    26a8:	51 05       	cpc	r21, r1
    26aa:	a9 f1       	breq	.+106    	; 0x2716 <malloc+0xda>
    26ac:	ca 01       	movw	r24, r20
    26ae:	86 1b       	sub	r24, r22
    26b0:	97 0b       	sbc	r25, r23
    26b2:	04 97       	sbiw	r24, 0x04	; 4
    26b4:	08 f4       	brcc	.+2      	; 0x26b8 <malloc+0x7c>
    26b6:	ba 01       	movw	r22, r20
    26b8:	e0 e0       	ldi	r30, 0x00	; 0
    26ba:	f0 e0       	ldi	r31, 0x00	; 0
    26bc:	2a c0       	rjmp	.+84     	; 0x2712 <malloc+0xd6>
    26be:	8d 91       	ld	r24, X+
    26c0:	9c 91       	ld	r25, X
    26c2:	11 97       	sbiw	r26, 0x01	; 1
    26c4:	84 17       	cp	r24, r20
    26c6:	95 07       	cpc	r25, r21
    26c8:	f9 f4       	brne	.+62     	; 0x2708 <malloc+0xcc>
    26ca:	64 17       	cp	r22, r20
    26cc:	75 07       	cpc	r23, r21
    26ce:	81 f4       	brne	.+32     	; 0x26f0 <malloc+0xb4>
    26d0:	12 96       	adiw	r26, 0x02	; 2
    26d2:	8d 91       	ld	r24, X+
    26d4:	9c 91       	ld	r25, X
    26d6:	13 97       	sbiw	r26, 0x03	; 3
    26d8:	30 97       	sbiw	r30, 0x00	; 0
    26da:	19 f0       	breq	.+6      	; 0x26e2 <malloc+0xa6>
    26dc:	93 83       	std	Z+3, r25	; 0x03
    26de:	82 83       	std	Z+2, r24	; 0x02
    26e0:	04 c0       	rjmp	.+8      	; 0x26ea <malloc+0xae>
    26e2:	90 93 cf 07 	sts	0x07CF, r25
    26e6:	80 93 ce 07 	sts	0x07CE, r24
    26ea:	fd 01       	movw	r30, r26
    26ec:	32 96       	adiw	r30, 0x02	; 2
    26ee:	4f c0       	rjmp	.+158    	; 0x278e <malloc+0x152>
    26f0:	ca 01       	movw	r24, r20
    26f2:	86 1b       	sub	r24, r22
    26f4:	97 0b       	sbc	r25, r23
    26f6:	fd 01       	movw	r30, r26
    26f8:	e8 0f       	add	r30, r24
    26fa:	f9 1f       	adc	r31, r25
    26fc:	61 93       	st	Z+, r22
    26fe:	71 93       	st	Z+, r23
    2700:	02 97       	sbiw	r24, 0x02	; 2
    2702:	8d 93       	st	X+, r24
    2704:	9c 93       	st	X, r25
    2706:	43 c0       	rjmp	.+134    	; 0x278e <malloc+0x152>
    2708:	fd 01       	movw	r30, r26
    270a:	82 81       	ldd	r24, Z+2	; 0x02
    270c:	93 81       	ldd	r25, Z+3	; 0x03
    270e:	9c 01       	movw	r18, r24
    2710:	d9 01       	movw	r26, r18
    2712:	10 97       	sbiw	r26, 0x00	; 0
    2714:	a1 f6       	brne	.-88     	; 0x26be <malloc+0x82>
    2716:	80 91 cc 07 	lds	r24, 0x07CC
    271a:	90 91 cd 07 	lds	r25, 0x07CD
    271e:	89 2b       	or	r24, r25
    2720:	41 f4       	brne	.+16     	; 0x2732 <malloc+0xf6>
    2722:	80 91 63 07 	lds	r24, 0x0763
    2726:	90 91 64 07 	lds	r25, 0x0764
    272a:	90 93 cd 07 	sts	0x07CD, r25
    272e:	80 93 cc 07 	sts	0x07CC, r24
    2732:	40 91 65 07 	lds	r20, 0x0765
    2736:	50 91 66 07 	lds	r21, 0x0766
    273a:	41 15       	cp	r20, r1
    273c:	51 05       	cpc	r21, r1
    273e:	41 f4       	brne	.+16     	; 0x2750 <malloc+0x114>
    2740:	4d b7       	in	r20, 0x3d	; 61
    2742:	5e b7       	in	r21, 0x3e	; 62
    2744:	80 91 61 07 	lds	r24, 0x0761
    2748:	90 91 62 07 	lds	r25, 0x0762
    274c:	48 1b       	sub	r20, r24
    274e:	59 0b       	sbc	r21, r25
    2750:	20 91 cc 07 	lds	r18, 0x07CC
    2754:	30 91 cd 07 	lds	r19, 0x07CD
    2758:	24 17       	cp	r18, r20
    275a:	35 07       	cpc	r19, r21
    275c:	b0 f4       	brcc	.+44     	; 0x278a <malloc+0x14e>
    275e:	ca 01       	movw	r24, r20
    2760:	82 1b       	sub	r24, r18
    2762:	93 0b       	sbc	r25, r19
    2764:	86 17       	cp	r24, r22
    2766:	97 07       	cpc	r25, r23
    2768:	80 f0       	brcs	.+32     	; 0x278a <malloc+0x14e>
    276a:	ab 01       	movw	r20, r22
    276c:	4e 5f       	subi	r20, 0xFE	; 254
    276e:	5f 4f       	sbci	r21, 0xFF	; 255
    2770:	84 17       	cp	r24, r20
    2772:	95 07       	cpc	r25, r21
    2774:	50 f0       	brcs	.+20     	; 0x278a <malloc+0x14e>
    2776:	42 0f       	add	r20, r18
    2778:	53 1f       	adc	r21, r19
    277a:	50 93 cd 07 	sts	0x07CD, r21
    277e:	40 93 cc 07 	sts	0x07CC, r20
    2782:	f9 01       	movw	r30, r18
    2784:	61 93       	st	Z+, r22
    2786:	71 93       	st	Z+, r23
    2788:	02 c0       	rjmp	.+4      	; 0x278e <malloc+0x152>
    278a:	e0 e0       	ldi	r30, 0x00	; 0
    278c:	f0 e0       	ldi	r31, 0x00	; 0
    278e:	cf 01       	movw	r24, r30
    2790:	df 91       	pop	r29
    2792:	cf 91       	pop	r28
    2794:	08 95       	ret

00002796 <free>:
    2796:	cf 93       	push	r28
    2798:	df 93       	push	r29
    279a:	00 97       	sbiw	r24, 0x00	; 0
    279c:	09 f4       	brne	.+2      	; 0x27a0 <free+0xa>
    279e:	50 c0       	rjmp	.+160    	; 0x2840 <free+0xaa>
    27a0:	ec 01       	movw	r28, r24
    27a2:	22 97       	sbiw	r28, 0x02	; 2
    27a4:	1b 82       	std	Y+3, r1	; 0x03
    27a6:	1a 82       	std	Y+2, r1	; 0x02
    27a8:	a0 91 ce 07 	lds	r26, 0x07CE
    27ac:	b0 91 cf 07 	lds	r27, 0x07CF
    27b0:	10 97       	sbiw	r26, 0x00	; 0
    27b2:	09 f1       	breq	.+66     	; 0x27f6 <free+0x60>
    27b4:	40 e0       	ldi	r20, 0x00	; 0
    27b6:	50 e0       	ldi	r21, 0x00	; 0
    27b8:	ac 17       	cp	r26, r28
    27ba:	bd 07       	cpc	r27, r29
    27bc:	08 f1       	brcs	.+66     	; 0x2800 <free+0x6a>
    27be:	bb 83       	std	Y+3, r27	; 0x03
    27c0:	aa 83       	std	Y+2, r26	; 0x02
    27c2:	fe 01       	movw	r30, r28
    27c4:	21 91       	ld	r18, Z+
    27c6:	31 91       	ld	r19, Z+
    27c8:	e2 0f       	add	r30, r18
    27ca:	f3 1f       	adc	r31, r19
    27cc:	ae 17       	cp	r26, r30
    27ce:	bf 07       	cpc	r27, r31
    27d0:	79 f4       	brne	.+30     	; 0x27f0 <free+0x5a>
    27d2:	8d 91       	ld	r24, X+
    27d4:	9c 91       	ld	r25, X
    27d6:	11 97       	sbiw	r26, 0x01	; 1
    27d8:	28 0f       	add	r18, r24
    27da:	39 1f       	adc	r19, r25
    27dc:	2e 5f       	subi	r18, 0xFE	; 254
    27de:	3f 4f       	sbci	r19, 0xFF	; 255
    27e0:	39 83       	std	Y+1, r19	; 0x01
    27e2:	28 83       	st	Y, r18
    27e4:	12 96       	adiw	r26, 0x02	; 2
    27e6:	8d 91       	ld	r24, X+
    27e8:	9c 91       	ld	r25, X
    27ea:	13 97       	sbiw	r26, 0x03	; 3
    27ec:	9b 83       	std	Y+3, r25	; 0x03
    27ee:	8a 83       	std	Y+2, r24	; 0x02
    27f0:	41 15       	cp	r20, r1
    27f2:	51 05       	cpc	r21, r1
    27f4:	71 f4       	brne	.+28     	; 0x2812 <free+0x7c>
    27f6:	d0 93 cf 07 	sts	0x07CF, r29
    27fa:	c0 93 ce 07 	sts	0x07CE, r28
    27fe:	20 c0       	rjmp	.+64     	; 0x2840 <free+0xaa>
    2800:	12 96       	adiw	r26, 0x02	; 2
    2802:	8d 91       	ld	r24, X+
    2804:	9c 91       	ld	r25, X
    2806:	13 97       	sbiw	r26, 0x03	; 3
    2808:	ad 01       	movw	r20, r26
    280a:	00 97       	sbiw	r24, 0x00	; 0
    280c:	11 f0       	breq	.+4      	; 0x2812 <free+0x7c>
    280e:	dc 01       	movw	r26, r24
    2810:	d3 cf       	rjmp	.-90     	; 0x27b8 <free+0x22>
    2812:	fa 01       	movw	r30, r20
    2814:	d3 83       	std	Z+3, r29	; 0x03
    2816:	c2 83       	std	Z+2, r28	; 0x02
    2818:	21 91       	ld	r18, Z+
    281a:	31 91       	ld	r19, Z+
    281c:	e2 0f       	add	r30, r18
    281e:	f3 1f       	adc	r31, r19
    2820:	ce 17       	cp	r28, r30
    2822:	df 07       	cpc	r29, r31
    2824:	69 f4       	brne	.+26     	; 0x2840 <free+0xaa>
    2826:	88 81       	ld	r24, Y
    2828:	99 81       	ldd	r25, Y+1	; 0x01
    282a:	28 0f       	add	r18, r24
    282c:	39 1f       	adc	r19, r25
    282e:	2e 5f       	subi	r18, 0xFE	; 254
    2830:	3f 4f       	sbci	r19, 0xFF	; 255
    2832:	fa 01       	movw	r30, r20
    2834:	31 83       	std	Z+1, r19	; 0x01
    2836:	20 83       	st	Z, r18
    2838:	8a 81       	ldd	r24, Y+2	; 0x02
    283a:	9b 81       	ldd	r25, Y+3	; 0x03
    283c:	93 83       	std	Z+3, r25	; 0x03
    283e:	82 83       	std	Z+2, r24	; 0x02
    2840:	df 91       	pop	r29
    2842:	cf 91       	pop	r28
    2844:	08 95       	ret

00002846 <memset>:
    2846:	dc 01       	movw	r26, r24
    2848:	01 c0       	rjmp	.+2      	; 0x284c <memset+0x6>
    284a:	6d 93       	st	X+, r22
    284c:	41 50       	subi	r20, 0x01	; 1
    284e:	50 40       	sbci	r21, 0x00	; 0
    2850:	e0 f7       	brcc	.-8      	; 0x284a <memset+0x4>
    2852:	08 95       	ret

00002854 <printf>:
    2854:	a0 e0       	ldi	r26, 0x00	; 0
    2856:	b0 e0       	ldi	r27, 0x00	; 0
    2858:	e0 e3       	ldi	r30, 0x30	; 48
    285a:	f4 e1       	ldi	r31, 0x14	; 20
    285c:	0c 94 08 17 	jmp	0x2e10	; 0x2e10 <__prologue_saves__+0x20>
    2860:	fe 01       	movw	r30, r28
    2862:	35 96       	adiw	r30, 0x05	; 5
    2864:	61 91       	ld	r22, Z+
    2866:	71 91       	ld	r23, Z+
    2868:	80 91 d2 07 	lds	r24, 0x07D2
    286c:	90 91 d3 07 	lds	r25, 0x07D3
    2870:	af 01       	movw	r20, r30
    2872:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <vfprintf>
    2876:	20 96       	adiw	r28, 0x00	; 0
    2878:	e2 e0       	ldi	r30, 0x02	; 2
    287a:	0c 94 24 17 	jmp	0x2e48	; 0x2e48 <__epilogue_restores__+0x20>

0000287e <putchar>:
    287e:	60 91 d2 07 	lds	r22, 0x07D2
    2882:	70 91 d3 07 	lds	r23, 0x07D3
    2886:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <fputc>
    288a:	08 95       	ret

0000288c <puts>:
    288c:	0f 93       	push	r16
    288e:	1f 93       	push	r17
    2890:	cf 93       	push	r28
    2892:	df 93       	push	r29
    2894:	8c 01       	movw	r16, r24
    2896:	e0 91 d2 07 	lds	r30, 0x07D2
    289a:	f0 91 d3 07 	lds	r31, 0x07D3
    289e:	83 81       	ldd	r24, Z+3	; 0x03
    28a0:	81 ff       	sbrs	r24, 1
    28a2:	21 c0       	rjmp	.+66     	; 0x28e6 <puts+0x5a>
    28a4:	c0 e0       	ldi	r28, 0x00	; 0
    28a6:	d0 e0       	ldi	r29, 0x00	; 0
    28a8:	0d c0       	rjmp	.+26     	; 0x28c4 <puts+0x38>
    28aa:	e0 91 d2 07 	lds	r30, 0x07D2
    28ae:	f0 91 d3 07 	lds	r31, 0x07D3
    28b2:	20 85       	ldd	r18, Z+8	; 0x08
    28b4:	31 85       	ldd	r19, Z+9	; 0x09
    28b6:	bf 01       	movw	r22, r30
    28b8:	f9 01       	movw	r30, r18
    28ba:	09 95       	icall
    28bc:	89 2b       	or	r24, r25
    28be:	11 f0       	breq	.+4      	; 0x28c4 <puts+0x38>
    28c0:	cf ef       	ldi	r28, 0xFF	; 255
    28c2:	df ef       	ldi	r29, 0xFF	; 255
    28c4:	f8 01       	movw	r30, r16
    28c6:	81 91       	ld	r24, Z+
    28c8:	8f 01       	movw	r16, r30
    28ca:	88 23       	and	r24, r24
    28cc:	71 f7       	brne	.-36     	; 0x28aa <puts+0x1e>
    28ce:	e0 91 d2 07 	lds	r30, 0x07D2
    28d2:	f0 91 d3 07 	lds	r31, 0x07D3
    28d6:	20 85       	ldd	r18, Z+8	; 0x08
    28d8:	31 85       	ldd	r19, Z+9	; 0x09
    28da:	8a e0       	ldi	r24, 0x0A	; 10
    28dc:	bf 01       	movw	r22, r30
    28de:	f9 01       	movw	r30, r18
    28e0:	09 95       	icall
    28e2:	89 2b       	or	r24, r25
    28e4:	11 f0       	breq	.+4      	; 0x28ea <puts+0x5e>
    28e6:	cf ef       	ldi	r28, 0xFF	; 255
    28e8:	df ef       	ldi	r29, 0xFF	; 255
    28ea:	ce 01       	movw	r24, r28
    28ec:	df 91       	pop	r29
    28ee:	cf 91       	pop	r28
    28f0:	1f 91       	pop	r17
    28f2:	0f 91       	pop	r16
    28f4:	08 95       	ret

000028f6 <vfprintf>:
    28f6:	ab e0       	ldi	r26, 0x0B	; 11
    28f8:	b0 e0       	ldi	r27, 0x00	; 0
    28fa:	e1 e8       	ldi	r30, 0x81	; 129
    28fc:	f4 e1       	ldi	r31, 0x14	; 20
    28fe:	0c 94 f8 16 	jmp	0x2df0	; 0x2df0 <__prologue_saves__>
    2902:	3c 01       	movw	r6, r24
    2904:	2b 01       	movw	r4, r22
    2906:	5a 01       	movw	r10, r20
    2908:	fc 01       	movw	r30, r24
    290a:	17 82       	std	Z+7, r1	; 0x07
    290c:	16 82       	std	Z+6, r1	; 0x06
    290e:	83 81       	ldd	r24, Z+3	; 0x03
    2910:	81 fd       	sbrc	r24, 1
    2912:	03 c0       	rjmp	.+6      	; 0x291a <vfprintf+0x24>
    2914:	6f ef       	ldi	r22, 0xFF	; 255
    2916:	7f ef       	ldi	r23, 0xFF	; 255
    2918:	c6 c1       	rjmp	.+908    	; 0x2ca6 <vfprintf+0x3b0>
    291a:	9a e0       	ldi	r25, 0x0A	; 10
    291c:	89 2e       	mov	r8, r25
    291e:	1e 01       	movw	r2, r28
    2920:	08 94       	sec
    2922:	21 1c       	adc	r2, r1
    2924:	31 1c       	adc	r3, r1
    2926:	f3 01       	movw	r30, r6
    2928:	23 81       	ldd	r18, Z+3	; 0x03
    292a:	f2 01       	movw	r30, r4
    292c:	23 fd       	sbrc	r18, 3
    292e:	85 91       	lpm	r24, Z+
    2930:	23 ff       	sbrs	r18, 3
    2932:	81 91       	ld	r24, Z+
    2934:	2f 01       	movw	r4, r30
    2936:	88 23       	and	r24, r24
    2938:	09 f4       	brne	.+2      	; 0x293c <vfprintf+0x46>
    293a:	b2 c1       	rjmp	.+868    	; 0x2ca0 <vfprintf+0x3aa>
    293c:	85 32       	cpi	r24, 0x25	; 37
    293e:	39 f4       	brne	.+14     	; 0x294e <vfprintf+0x58>
    2940:	23 fd       	sbrc	r18, 3
    2942:	85 91       	lpm	r24, Z+
    2944:	23 ff       	sbrs	r18, 3
    2946:	81 91       	ld	r24, Z+
    2948:	2f 01       	movw	r4, r30
    294a:	85 32       	cpi	r24, 0x25	; 37
    294c:	29 f4       	brne	.+10     	; 0x2958 <vfprintf+0x62>
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	b3 01       	movw	r22, r6
    2952:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <fputc>
    2956:	e7 cf       	rjmp	.-50     	; 0x2926 <vfprintf+0x30>
    2958:	98 2f       	mov	r25, r24
    295a:	ff 24       	eor	r15, r15
    295c:	ee 24       	eor	r14, r14
    295e:	99 24       	eor	r9, r9
    2960:	ff e1       	ldi	r31, 0x1F	; 31
    2962:	ff 15       	cp	r31, r15
    2964:	d0 f0       	brcs	.+52     	; 0x299a <vfprintf+0xa4>
    2966:	9b 32       	cpi	r25, 0x2B	; 43
    2968:	69 f0       	breq	.+26     	; 0x2984 <vfprintf+0x8e>
    296a:	9c 32       	cpi	r25, 0x2C	; 44
    296c:	28 f4       	brcc	.+10     	; 0x2978 <vfprintf+0x82>
    296e:	90 32       	cpi	r25, 0x20	; 32
    2970:	59 f0       	breq	.+22     	; 0x2988 <vfprintf+0x92>
    2972:	93 32       	cpi	r25, 0x23	; 35
    2974:	91 f4       	brne	.+36     	; 0x299a <vfprintf+0xa4>
    2976:	0e c0       	rjmp	.+28     	; 0x2994 <vfprintf+0x9e>
    2978:	9d 32       	cpi	r25, 0x2D	; 45
    297a:	49 f0       	breq	.+18     	; 0x298e <vfprintf+0x98>
    297c:	90 33       	cpi	r25, 0x30	; 48
    297e:	69 f4       	brne	.+26     	; 0x299a <vfprintf+0xa4>
    2980:	41 e0       	ldi	r20, 0x01	; 1
    2982:	24 c0       	rjmp	.+72     	; 0x29cc <vfprintf+0xd6>
    2984:	52 e0       	ldi	r21, 0x02	; 2
    2986:	f5 2a       	or	r15, r21
    2988:	84 e0       	ldi	r24, 0x04	; 4
    298a:	f8 2a       	or	r15, r24
    298c:	28 c0       	rjmp	.+80     	; 0x29de <vfprintf+0xe8>
    298e:	98 e0       	ldi	r25, 0x08	; 8
    2990:	f9 2a       	or	r15, r25
    2992:	25 c0       	rjmp	.+74     	; 0x29de <vfprintf+0xe8>
    2994:	e0 e1       	ldi	r30, 0x10	; 16
    2996:	fe 2a       	or	r15, r30
    2998:	22 c0       	rjmp	.+68     	; 0x29de <vfprintf+0xe8>
    299a:	f7 fc       	sbrc	r15, 7
    299c:	29 c0       	rjmp	.+82     	; 0x29f0 <vfprintf+0xfa>
    299e:	89 2f       	mov	r24, r25
    29a0:	80 53       	subi	r24, 0x30	; 48
    29a2:	8a 30       	cpi	r24, 0x0A	; 10
    29a4:	70 f4       	brcc	.+28     	; 0x29c2 <vfprintf+0xcc>
    29a6:	f6 fe       	sbrs	r15, 6
    29a8:	05 c0       	rjmp	.+10     	; 0x29b4 <vfprintf+0xbe>
    29aa:	98 9c       	mul	r9, r8
    29ac:	90 2c       	mov	r9, r0
    29ae:	11 24       	eor	r1, r1
    29b0:	98 0e       	add	r9, r24
    29b2:	15 c0       	rjmp	.+42     	; 0x29de <vfprintf+0xe8>
    29b4:	e8 9c       	mul	r14, r8
    29b6:	e0 2c       	mov	r14, r0
    29b8:	11 24       	eor	r1, r1
    29ba:	e8 0e       	add	r14, r24
    29bc:	f0 e2       	ldi	r31, 0x20	; 32
    29be:	ff 2a       	or	r15, r31
    29c0:	0e c0       	rjmp	.+28     	; 0x29de <vfprintf+0xe8>
    29c2:	9e 32       	cpi	r25, 0x2E	; 46
    29c4:	29 f4       	brne	.+10     	; 0x29d0 <vfprintf+0xda>
    29c6:	f6 fc       	sbrc	r15, 6
    29c8:	6b c1       	rjmp	.+726    	; 0x2ca0 <vfprintf+0x3aa>
    29ca:	40 e4       	ldi	r20, 0x40	; 64
    29cc:	f4 2a       	or	r15, r20
    29ce:	07 c0       	rjmp	.+14     	; 0x29de <vfprintf+0xe8>
    29d0:	9c 36       	cpi	r25, 0x6C	; 108
    29d2:	19 f4       	brne	.+6      	; 0x29da <vfprintf+0xe4>
    29d4:	50 e8       	ldi	r21, 0x80	; 128
    29d6:	f5 2a       	or	r15, r21
    29d8:	02 c0       	rjmp	.+4      	; 0x29de <vfprintf+0xe8>
    29da:	98 36       	cpi	r25, 0x68	; 104
    29dc:	49 f4       	brne	.+18     	; 0x29f0 <vfprintf+0xfa>
    29de:	f2 01       	movw	r30, r4
    29e0:	23 fd       	sbrc	r18, 3
    29e2:	95 91       	lpm	r25, Z+
    29e4:	23 ff       	sbrs	r18, 3
    29e6:	91 91       	ld	r25, Z+
    29e8:	2f 01       	movw	r4, r30
    29ea:	99 23       	and	r25, r25
    29ec:	09 f0       	breq	.+2      	; 0x29f0 <vfprintf+0xfa>
    29ee:	b8 cf       	rjmp	.-144    	; 0x2960 <vfprintf+0x6a>
    29f0:	89 2f       	mov	r24, r25
    29f2:	85 54       	subi	r24, 0x45	; 69
    29f4:	83 30       	cpi	r24, 0x03	; 3
    29f6:	18 f0       	brcs	.+6      	; 0x29fe <vfprintf+0x108>
    29f8:	80 52       	subi	r24, 0x20	; 32
    29fa:	83 30       	cpi	r24, 0x03	; 3
    29fc:	38 f4       	brcc	.+14     	; 0x2a0c <vfprintf+0x116>
    29fe:	44 e0       	ldi	r20, 0x04	; 4
    2a00:	50 e0       	ldi	r21, 0x00	; 0
    2a02:	a4 0e       	add	r10, r20
    2a04:	b5 1e       	adc	r11, r21
    2a06:	5f e3       	ldi	r21, 0x3F	; 63
    2a08:	59 83       	std	Y+1, r21	; 0x01
    2a0a:	0f c0       	rjmp	.+30     	; 0x2a2a <vfprintf+0x134>
    2a0c:	93 36       	cpi	r25, 0x63	; 99
    2a0e:	31 f0       	breq	.+12     	; 0x2a1c <vfprintf+0x126>
    2a10:	93 37       	cpi	r25, 0x73	; 115
    2a12:	79 f0       	breq	.+30     	; 0x2a32 <vfprintf+0x13c>
    2a14:	93 35       	cpi	r25, 0x53	; 83
    2a16:	09 f0       	breq	.+2      	; 0x2a1a <vfprintf+0x124>
    2a18:	56 c0       	rjmp	.+172    	; 0x2ac6 <vfprintf+0x1d0>
    2a1a:	20 c0       	rjmp	.+64     	; 0x2a5c <vfprintf+0x166>
    2a1c:	f5 01       	movw	r30, r10
    2a1e:	80 81       	ld	r24, Z
    2a20:	89 83       	std	Y+1, r24	; 0x01
    2a22:	42 e0       	ldi	r20, 0x02	; 2
    2a24:	50 e0       	ldi	r21, 0x00	; 0
    2a26:	a4 0e       	add	r10, r20
    2a28:	b5 1e       	adc	r11, r21
    2a2a:	61 01       	movw	r12, r2
    2a2c:	01 e0       	ldi	r16, 0x01	; 1
    2a2e:	10 e0       	ldi	r17, 0x00	; 0
    2a30:	12 c0       	rjmp	.+36     	; 0x2a56 <vfprintf+0x160>
    2a32:	f5 01       	movw	r30, r10
    2a34:	c0 80       	ld	r12, Z
    2a36:	d1 80       	ldd	r13, Z+1	; 0x01
    2a38:	f6 fc       	sbrc	r15, 6
    2a3a:	03 c0       	rjmp	.+6      	; 0x2a42 <vfprintf+0x14c>
    2a3c:	6f ef       	ldi	r22, 0xFF	; 255
    2a3e:	7f ef       	ldi	r23, 0xFF	; 255
    2a40:	02 c0       	rjmp	.+4      	; 0x2a46 <vfprintf+0x150>
    2a42:	69 2d       	mov	r22, r9
    2a44:	70 e0       	ldi	r23, 0x00	; 0
    2a46:	42 e0       	ldi	r20, 0x02	; 2
    2a48:	50 e0       	ldi	r21, 0x00	; 0
    2a4a:	a4 0e       	add	r10, r20
    2a4c:	b5 1e       	adc	r11, r21
    2a4e:	c6 01       	movw	r24, r12
    2a50:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <strnlen>
    2a54:	8c 01       	movw	r16, r24
    2a56:	5f e7       	ldi	r21, 0x7F	; 127
    2a58:	f5 22       	and	r15, r21
    2a5a:	14 c0       	rjmp	.+40     	; 0x2a84 <vfprintf+0x18e>
    2a5c:	f5 01       	movw	r30, r10
    2a5e:	c0 80       	ld	r12, Z
    2a60:	d1 80       	ldd	r13, Z+1	; 0x01
    2a62:	f6 fc       	sbrc	r15, 6
    2a64:	03 c0       	rjmp	.+6      	; 0x2a6c <vfprintf+0x176>
    2a66:	6f ef       	ldi	r22, 0xFF	; 255
    2a68:	7f ef       	ldi	r23, 0xFF	; 255
    2a6a:	02 c0       	rjmp	.+4      	; 0x2a70 <vfprintf+0x17a>
    2a6c:	69 2d       	mov	r22, r9
    2a6e:	70 e0       	ldi	r23, 0x00	; 0
    2a70:	42 e0       	ldi	r20, 0x02	; 2
    2a72:	50 e0       	ldi	r21, 0x00	; 0
    2a74:	a4 0e       	add	r10, r20
    2a76:	b5 1e       	adc	r11, r21
    2a78:	c6 01       	movw	r24, r12
    2a7a:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <strnlen_P>
    2a7e:	8c 01       	movw	r16, r24
    2a80:	50 e8       	ldi	r21, 0x80	; 128
    2a82:	f5 2a       	or	r15, r21
    2a84:	f3 fe       	sbrs	r15, 3
    2a86:	07 c0       	rjmp	.+14     	; 0x2a96 <vfprintf+0x1a0>
    2a88:	1a c0       	rjmp	.+52     	; 0x2abe <vfprintf+0x1c8>
    2a8a:	80 e2       	ldi	r24, 0x20	; 32
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	b3 01       	movw	r22, r6
    2a90:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <fputc>
    2a94:	ea 94       	dec	r14
    2a96:	8e 2d       	mov	r24, r14
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	08 17       	cp	r16, r24
    2a9c:	19 07       	cpc	r17, r25
    2a9e:	a8 f3       	brcs	.-22     	; 0x2a8a <vfprintf+0x194>
    2aa0:	0e c0       	rjmp	.+28     	; 0x2abe <vfprintf+0x1c8>
    2aa2:	f6 01       	movw	r30, r12
    2aa4:	f7 fc       	sbrc	r15, 7
    2aa6:	85 91       	lpm	r24, Z+
    2aa8:	f7 fe       	sbrs	r15, 7
    2aaa:	81 91       	ld	r24, Z+
    2aac:	6f 01       	movw	r12, r30
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	b3 01       	movw	r22, r6
    2ab2:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <fputc>
    2ab6:	e1 10       	cpse	r14, r1
    2ab8:	ea 94       	dec	r14
    2aba:	01 50       	subi	r16, 0x01	; 1
    2abc:	10 40       	sbci	r17, 0x00	; 0
    2abe:	01 15       	cp	r16, r1
    2ac0:	11 05       	cpc	r17, r1
    2ac2:	79 f7       	brne	.-34     	; 0x2aa2 <vfprintf+0x1ac>
    2ac4:	ea c0       	rjmp	.+468    	; 0x2c9a <vfprintf+0x3a4>
    2ac6:	94 36       	cpi	r25, 0x64	; 100
    2ac8:	11 f0       	breq	.+4      	; 0x2ace <vfprintf+0x1d8>
    2aca:	99 36       	cpi	r25, 0x69	; 105
    2acc:	69 f5       	brne	.+90     	; 0x2b28 <vfprintf+0x232>
    2ace:	f7 fe       	sbrs	r15, 7
    2ad0:	08 c0       	rjmp	.+16     	; 0x2ae2 <vfprintf+0x1ec>
    2ad2:	f5 01       	movw	r30, r10
    2ad4:	20 81       	ld	r18, Z
    2ad6:	31 81       	ldd	r19, Z+1	; 0x01
    2ad8:	42 81       	ldd	r20, Z+2	; 0x02
    2ada:	53 81       	ldd	r21, Z+3	; 0x03
    2adc:	84 e0       	ldi	r24, 0x04	; 4
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	0a c0       	rjmp	.+20     	; 0x2af6 <vfprintf+0x200>
    2ae2:	f5 01       	movw	r30, r10
    2ae4:	80 81       	ld	r24, Z
    2ae6:	91 81       	ldd	r25, Z+1	; 0x01
    2ae8:	9c 01       	movw	r18, r24
    2aea:	44 27       	eor	r20, r20
    2aec:	37 fd       	sbrc	r19, 7
    2aee:	40 95       	com	r20
    2af0:	54 2f       	mov	r21, r20
    2af2:	82 e0       	ldi	r24, 0x02	; 2
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	a8 0e       	add	r10, r24
    2af8:	b9 1e       	adc	r11, r25
    2afa:	9f e6       	ldi	r25, 0x6F	; 111
    2afc:	f9 22       	and	r15, r25
    2afe:	57 ff       	sbrs	r21, 7
    2b00:	09 c0       	rjmp	.+18     	; 0x2b14 <vfprintf+0x21e>
    2b02:	50 95       	com	r21
    2b04:	40 95       	com	r20
    2b06:	30 95       	com	r19
    2b08:	21 95       	neg	r18
    2b0a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b0c:	4f 4f       	sbci	r20, 0xFF	; 255
    2b0e:	5f 4f       	sbci	r21, 0xFF	; 255
    2b10:	e0 e8       	ldi	r30, 0x80	; 128
    2b12:	fe 2a       	or	r15, r30
    2b14:	ca 01       	movw	r24, r20
    2b16:	b9 01       	movw	r22, r18
    2b18:	a1 01       	movw	r20, r2
    2b1a:	2a e0       	ldi	r18, 0x0A	; 10
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <__ultoa_invert>
    2b22:	d8 2e       	mov	r13, r24
    2b24:	d2 18       	sub	r13, r2
    2b26:	40 c0       	rjmp	.+128    	; 0x2ba8 <vfprintf+0x2b2>
    2b28:	95 37       	cpi	r25, 0x75	; 117
    2b2a:	29 f4       	brne	.+10     	; 0x2b36 <vfprintf+0x240>
    2b2c:	1f 2d       	mov	r17, r15
    2b2e:	1f 7e       	andi	r17, 0xEF	; 239
    2b30:	2a e0       	ldi	r18, 0x0A	; 10
    2b32:	30 e0       	ldi	r19, 0x00	; 0
    2b34:	1d c0       	rjmp	.+58     	; 0x2b70 <vfprintf+0x27a>
    2b36:	1f 2d       	mov	r17, r15
    2b38:	19 7f       	andi	r17, 0xF9	; 249
    2b3a:	9f 36       	cpi	r25, 0x6F	; 111
    2b3c:	61 f0       	breq	.+24     	; 0x2b56 <vfprintf+0x260>
    2b3e:	90 37       	cpi	r25, 0x70	; 112
    2b40:	20 f4       	brcc	.+8      	; 0x2b4a <vfprintf+0x254>
    2b42:	98 35       	cpi	r25, 0x58	; 88
    2b44:	09 f0       	breq	.+2      	; 0x2b48 <vfprintf+0x252>
    2b46:	ac c0       	rjmp	.+344    	; 0x2ca0 <vfprintf+0x3aa>
    2b48:	0f c0       	rjmp	.+30     	; 0x2b68 <vfprintf+0x272>
    2b4a:	90 37       	cpi	r25, 0x70	; 112
    2b4c:	39 f0       	breq	.+14     	; 0x2b5c <vfprintf+0x266>
    2b4e:	98 37       	cpi	r25, 0x78	; 120
    2b50:	09 f0       	breq	.+2      	; 0x2b54 <vfprintf+0x25e>
    2b52:	a6 c0       	rjmp	.+332    	; 0x2ca0 <vfprintf+0x3aa>
    2b54:	04 c0       	rjmp	.+8      	; 0x2b5e <vfprintf+0x268>
    2b56:	28 e0       	ldi	r18, 0x08	; 8
    2b58:	30 e0       	ldi	r19, 0x00	; 0
    2b5a:	0a c0       	rjmp	.+20     	; 0x2b70 <vfprintf+0x27a>
    2b5c:	10 61       	ori	r17, 0x10	; 16
    2b5e:	14 fd       	sbrc	r17, 4
    2b60:	14 60       	ori	r17, 0x04	; 4
    2b62:	20 e1       	ldi	r18, 0x10	; 16
    2b64:	30 e0       	ldi	r19, 0x00	; 0
    2b66:	04 c0       	rjmp	.+8      	; 0x2b70 <vfprintf+0x27a>
    2b68:	14 fd       	sbrc	r17, 4
    2b6a:	16 60       	ori	r17, 0x06	; 6
    2b6c:	20 e1       	ldi	r18, 0x10	; 16
    2b6e:	32 e0       	ldi	r19, 0x02	; 2
    2b70:	17 ff       	sbrs	r17, 7
    2b72:	08 c0       	rjmp	.+16     	; 0x2b84 <vfprintf+0x28e>
    2b74:	f5 01       	movw	r30, r10
    2b76:	60 81       	ld	r22, Z
    2b78:	71 81       	ldd	r23, Z+1	; 0x01
    2b7a:	82 81       	ldd	r24, Z+2	; 0x02
    2b7c:	93 81       	ldd	r25, Z+3	; 0x03
    2b7e:	44 e0       	ldi	r20, 0x04	; 4
    2b80:	50 e0       	ldi	r21, 0x00	; 0
    2b82:	08 c0       	rjmp	.+16     	; 0x2b94 <vfprintf+0x29e>
    2b84:	f5 01       	movw	r30, r10
    2b86:	80 81       	ld	r24, Z
    2b88:	91 81       	ldd	r25, Z+1	; 0x01
    2b8a:	bc 01       	movw	r22, r24
    2b8c:	80 e0       	ldi	r24, 0x00	; 0
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	42 e0       	ldi	r20, 0x02	; 2
    2b92:	50 e0       	ldi	r21, 0x00	; 0
    2b94:	a4 0e       	add	r10, r20
    2b96:	b5 1e       	adc	r11, r21
    2b98:	a1 01       	movw	r20, r2
    2b9a:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <__ultoa_invert>
    2b9e:	d8 2e       	mov	r13, r24
    2ba0:	d2 18       	sub	r13, r2
    2ba2:	8f e7       	ldi	r24, 0x7F	; 127
    2ba4:	f8 2e       	mov	r15, r24
    2ba6:	f1 22       	and	r15, r17
    2ba8:	f6 fe       	sbrs	r15, 6
    2baa:	0b c0       	rjmp	.+22     	; 0x2bc2 <vfprintf+0x2cc>
    2bac:	5e ef       	ldi	r21, 0xFE	; 254
    2bae:	f5 22       	and	r15, r21
    2bb0:	d9 14       	cp	r13, r9
    2bb2:	38 f4       	brcc	.+14     	; 0x2bc2 <vfprintf+0x2cc>
    2bb4:	f4 fe       	sbrs	r15, 4
    2bb6:	07 c0       	rjmp	.+14     	; 0x2bc6 <vfprintf+0x2d0>
    2bb8:	f2 fc       	sbrc	r15, 2
    2bba:	05 c0       	rjmp	.+10     	; 0x2bc6 <vfprintf+0x2d0>
    2bbc:	8f ee       	ldi	r24, 0xEF	; 239
    2bbe:	f8 22       	and	r15, r24
    2bc0:	02 c0       	rjmp	.+4      	; 0x2bc6 <vfprintf+0x2d0>
    2bc2:	1d 2d       	mov	r17, r13
    2bc4:	01 c0       	rjmp	.+2      	; 0x2bc8 <vfprintf+0x2d2>
    2bc6:	19 2d       	mov	r17, r9
    2bc8:	f4 fe       	sbrs	r15, 4
    2bca:	0d c0       	rjmp	.+26     	; 0x2be6 <vfprintf+0x2f0>
    2bcc:	fe 01       	movw	r30, r28
    2bce:	ed 0d       	add	r30, r13
    2bd0:	f1 1d       	adc	r31, r1
    2bd2:	80 81       	ld	r24, Z
    2bd4:	80 33       	cpi	r24, 0x30	; 48
    2bd6:	19 f4       	brne	.+6      	; 0x2bde <vfprintf+0x2e8>
    2bd8:	99 ee       	ldi	r25, 0xE9	; 233
    2bda:	f9 22       	and	r15, r25
    2bdc:	08 c0       	rjmp	.+16     	; 0x2bee <vfprintf+0x2f8>
    2bde:	1f 5f       	subi	r17, 0xFF	; 255
    2be0:	f2 fe       	sbrs	r15, 2
    2be2:	05 c0       	rjmp	.+10     	; 0x2bee <vfprintf+0x2f8>
    2be4:	03 c0       	rjmp	.+6      	; 0x2bec <vfprintf+0x2f6>
    2be6:	8f 2d       	mov	r24, r15
    2be8:	86 78       	andi	r24, 0x86	; 134
    2bea:	09 f0       	breq	.+2      	; 0x2bee <vfprintf+0x2f8>
    2bec:	1f 5f       	subi	r17, 0xFF	; 255
    2bee:	0f 2d       	mov	r16, r15
    2bf0:	f3 fc       	sbrc	r15, 3
    2bf2:	14 c0       	rjmp	.+40     	; 0x2c1c <vfprintf+0x326>
    2bf4:	f0 fe       	sbrs	r15, 0
    2bf6:	0f c0       	rjmp	.+30     	; 0x2c16 <vfprintf+0x320>
    2bf8:	1e 15       	cp	r17, r14
    2bfa:	10 f0       	brcs	.+4      	; 0x2c00 <vfprintf+0x30a>
    2bfc:	9d 2c       	mov	r9, r13
    2bfe:	0b c0       	rjmp	.+22     	; 0x2c16 <vfprintf+0x320>
    2c00:	9d 2c       	mov	r9, r13
    2c02:	9e 0c       	add	r9, r14
    2c04:	91 1a       	sub	r9, r17
    2c06:	1e 2d       	mov	r17, r14
    2c08:	06 c0       	rjmp	.+12     	; 0x2c16 <vfprintf+0x320>
    2c0a:	80 e2       	ldi	r24, 0x20	; 32
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	b3 01       	movw	r22, r6
    2c10:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <fputc>
    2c14:	1f 5f       	subi	r17, 0xFF	; 255
    2c16:	1e 15       	cp	r17, r14
    2c18:	c0 f3       	brcs	.-16     	; 0x2c0a <vfprintf+0x314>
    2c1a:	04 c0       	rjmp	.+8      	; 0x2c24 <vfprintf+0x32e>
    2c1c:	1e 15       	cp	r17, r14
    2c1e:	10 f4       	brcc	.+4      	; 0x2c24 <vfprintf+0x32e>
    2c20:	e1 1a       	sub	r14, r17
    2c22:	01 c0       	rjmp	.+2      	; 0x2c26 <vfprintf+0x330>
    2c24:	ee 24       	eor	r14, r14
    2c26:	04 ff       	sbrs	r16, 4
    2c28:	0f c0       	rjmp	.+30     	; 0x2c48 <vfprintf+0x352>
    2c2a:	80 e3       	ldi	r24, 0x30	; 48
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	b3 01       	movw	r22, r6
    2c30:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <fputc>
    2c34:	02 ff       	sbrs	r16, 2
    2c36:	1d c0       	rjmp	.+58     	; 0x2c72 <vfprintf+0x37c>
    2c38:	01 fd       	sbrc	r16, 1
    2c3a:	03 c0       	rjmp	.+6      	; 0x2c42 <vfprintf+0x34c>
    2c3c:	88 e7       	ldi	r24, 0x78	; 120
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	0e c0       	rjmp	.+28     	; 0x2c5e <vfprintf+0x368>
    2c42:	88 e5       	ldi	r24, 0x58	; 88
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	0b c0       	rjmp	.+22     	; 0x2c5e <vfprintf+0x368>
    2c48:	80 2f       	mov	r24, r16
    2c4a:	86 78       	andi	r24, 0x86	; 134
    2c4c:	91 f0       	breq	.+36     	; 0x2c72 <vfprintf+0x37c>
    2c4e:	01 ff       	sbrs	r16, 1
    2c50:	02 c0       	rjmp	.+4      	; 0x2c56 <vfprintf+0x360>
    2c52:	8b e2       	ldi	r24, 0x2B	; 43
    2c54:	01 c0       	rjmp	.+2      	; 0x2c58 <vfprintf+0x362>
    2c56:	80 e2       	ldi	r24, 0x20	; 32
    2c58:	f7 fc       	sbrc	r15, 7
    2c5a:	8d e2       	ldi	r24, 0x2D	; 45
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	b3 01       	movw	r22, r6
    2c60:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <fputc>
    2c64:	06 c0       	rjmp	.+12     	; 0x2c72 <vfprintf+0x37c>
    2c66:	80 e3       	ldi	r24, 0x30	; 48
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	b3 01       	movw	r22, r6
    2c6c:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <fputc>
    2c70:	9a 94       	dec	r9
    2c72:	d9 14       	cp	r13, r9
    2c74:	c0 f3       	brcs	.-16     	; 0x2c66 <vfprintf+0x370>
    2c76:	da 94       	dec	r13
    2c78:	f1 01       	movw	r30, r2
    2c7a:	ed 0d       	add	r30, r13
    2c7c:	f1 1d       	adc	r31, r1
    2c7e:	80 81       	ld	r24, Z
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	b3 01       	movw	r22, r6
    2c84:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <fputc>
    2c88:	dd 20       	and	r13, r13
    2c8a:	a9 f7       	brne	.-22     	; 0x2c76 <vfprintf+0x380>
    2c8c:	06 c0       	rjmp	.+12     	; 0x2c9a <vfprintf+0x3a4>
    2c8e:	80 e2       	ldi	r24, 0x20	; 32
    2c90:	90 e0       	ldi	r25, 0x00	; 0
    2c92:	b3 01       	movw	r22, r6
    2c94:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <fputc>
    2c98:	ea 94       	dec	r14
    2c9a:	ee 20       	and	r14, r14
    2c9c:	c1 f7       	brne	.-16     	; 0x2c8e <vfprintf+0x398>
    2c9e:	43 ce       	rjmp	.-890    	; 0x2926 <vfprintf+0x30>
    2ca0:	f3 01       	movw	r30, r6
    2ca2:	66 81       	ldd	r22, Z+6	; 0x06
    2ca4:	77 81       	ldd	r23, Z+7	; 0x07
    2ca6:	cb 01       	movw	r24, r22
    2ca8:	2b 96       	adiw	r28, 0x0b	; 11
    2caa:	e2 e1       	ldi	r30, 0x12	; 18
    2cac:	0c 94 14 17 	jmp	0x2e28	; 0x2e28 <__epilogue_restores__>

00002cb0 <strnlen_P>:
    2cb0:	fc 01       	movw	r30, r24
    2cb2:	05 90       	lpm	r0, Z+
    2cb4:	61 50       	subi	r22, 0x01	; 1
    2cb6:	70 40       	sbci	r23, 0x00	; 0
    2cb8:	01 10       	cpse	r0, r1
    2cba:	d8 f7       	brcc	.-10     	; 0x2cb2 <strnlen_P+0x2>
    2cbc:	80 95       	com	r24
    2cbe:	90 95       	com	r25
    2cc0:	8e 0f       	add	r24, r30
    2cc2:	9f 1f       	adc	r25, r31
    2cc4:	08 95       	ret

00002cc6 <strnlen>:
    2cc6:	fc 01       	movw	r30, r24
    2cc8:	61 50       	subi	r22, 0x01	; 1
    2cca:	70 40       	sbci	r23, 0x00	; 0
    2ccc:	01 90       	ld	r0, Z+
    2cce:	01 10       	cpse	r0, r1
    2cd0:	d8 f7       	brcc	.-10     	; 0x2cc8 <strnlen+0x2>
    2cd2:	80 95       	com	r24
    2cd4:	90 95       	com	r25
    2cd6:	8e 0f       	add	r24, r30
    2cd8:	9f 1f       	adc	r25, r31
    2cda:	08 95       	ret

00002cdc <fputc>:
    2cdc:	0f 93       	push	r16
    2cde:	1f 93       	push	r17
    2ce0:	cf 93       	push	r28
    2ce2:	df 93       	push	r29
    2ce4:	8c 01       	movw	r16, r24
    2ce6:	eb 01       	movw	r28, r22
    2ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cea:	81 ff       	sbrs	r24, 1
    2cec:	1b c0       	rjmp	.+54     	; 0x2d24 <fputc+0x48>
    2cee:	82 ff       	sbrs	r24, 2
    2cf0:	0d c0       	rjmp	.+26     	; 0x2d0c <fputc+0x30>
    2cf2:	2e 81       	ldd	r18, Y+6	; 0x06
    2cf4:	3f 81       	ldd	r19, Y+7	; 0x07
    2cf6:	8c 81       	ldd	r24, Y+4	; 0x04
    2cf8:	9d 81       	ldd	r25, Y+5	; 0x05
    2cfa:	28 17       	cp	r18, r24
    2cfc:	39 07       	cpc	r19, r25
    2cfe:	64 f4       	brge	.+24     	; 0x2d18 <fputc+0x3c>
    2d00:	e8 81       	ld	r30, Y
    2d02:	f9 81       	ldd	r31, Y+1	; 0x01
    2d04:	01 93       	st	Z+, r16
    2d06:	f9 83       	std	Y+1, r31	; 0x01
    2d08:	e8 83       	st	Y, r30
    2d0a:	06 c0       	rjmp	.+12     	; 0x2d18 <fputc+0x3c>
    2d0c:	e8 85       	ldd	r30, Y+8	; 0x08
    2d0e:	f9 85       	ldd	r31, Y+9	; 0x09
    2d10:	80 2f       	mov	r24, r16
    2d12:	09 95       	icall
    2d14:	89 2b       	or	r24, r25
    2d16:	31 f4       	brne	.+12     	; 0x2d24 <fputc+0x48>
    2d18:	8e 81       	ldd	r24, Y+6	; 0x06
    2d1a:	9f 81       	ldd	r25, Y+7	; 0x07
    2d1c:	01 96       	adiw	r24, 0x01	; 1
    2d1e:	9f 83       	std	Y+7, r25	; 0x07
    2d20:	8e 83       	std	Y+6, r24	; 0x06
    2d22:	02 c0       	rjmp	.+4      	; 0x2d28 <fputc+0x4c>
    2d24:	0f ef       	ldi	r16, 0xFF	; 255
    2d26:	1f ef       	ldi	r17, 0xFF	; 255
    2d28:	c8 01       	movw	r24, r16
    2d2a:	df 91       	pop	r29
    2d2c:	cf 91       	pop	r28
    2d2e:	1f 91       	pop	r17
    2d30:	0f 91       	pop	r16
    2d32:	08 95       	ret

00002d34 <__ultoa_invert>:
    2d34:	fa 01       	movw	r30, r20
    2d36:	aa 27       	eor	r26, r26
    2d38:	28 30       	cpi	r18, 0x08	; 8
    2d3a:	51 f1       	breq	.+84     	; 0x2d90 <__ultoa_invert+0x5c>
    2d3c:	20 31       	cpi	r18, 0x10	; 16
    2d3e:	81 f1       	breq	.+96     	; 0x2da0 <__ultoa_invert+0x6c>
    2d40:	e8 94       	clt
    2d42:	6f 93       	push	r22
    2d44:	6e 7f       	andi	r22, 0xFE	; 254
    2d46:	6e 5f       	subi	r22, 0xFE	; 254
    2d48:	7f 4f       	sbci	r23, 0xFF	; 255
    2d4a:	8f 4f       	sbci	r24, 0xFF	; 255
    2d4c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d4e:	af 4f       	sbci	r26, 0xFF	; 255
    2d50:	b1 e0       	ldi	r27, 0x01	; 1
    2d52:	3e d0       	rcall	.+124    	; 0x2dd0 <__ultoa_invert+0x9c>
    2d54:	b4 e0       	ldi	r27, 0x04	; 4
    2d56:	3c d0       	rcall	.+120    	; 0x2dd0 <__ultoa_invert+0x9c>
    2d58:	67 0f       	add	r22, r23
    2d5a:	78 1f       	adc	r23, r24
    2d5c:	89 1f       	adc	r24, r25
    2d5e:	9a 1f       	adc	r25, r26
    2d60:	a1 1d       	adc	r26, r1
    2d62:	68 0f       	add	r22, r24
    2d64:	79 1f       	adc	r23, r25
    2d66:	8a 1f       	adc	r24, r26
    2d68:	91 1d       	adc	r25, r1
    2d6a:	a1 1d       	adc	r26, r1
    2d6c:	6a 0f       	add	r22, r26
    2d6e:	71 1d       	adc	r23, r1
    2d70:	81 1d       	adc	r24, r1
    2d72:	91 1d       	adc	r25, r1
    2d74:	a1 1d       	adc	r26, r1
    2d76:	20 d0       	rcall	.+64     	; 0x2db8 <__ultoa_invert+0x84>
    2d78:	09 f4       	brne	.+2      	; 0x2d7c <__ultoa_invert+0x48>
    2d7a:	68 94       	set
    2d7c:	3f 91       	pop	r19
    2d7e:	2a e0       	ldi	r18, 0x0A	; 10
    2d80:	26 9f       	mul	r18, r22
    2d82:	11 24       	eor	r1, r1
    2d84:	30 19       	sub	r19, r0
    2d86:	30 5d       	subi	r19, 0xD0	; 208
    2d88:	31 93       	st	Z+, r19
    2d8a:	de f6       	brtc	.-74     	; 0x2d42 <__ultoa_invert+0xe>
    2d8c:	cf 01       	movw	r24, r30
    2d8e:	08 95       	ret
    2d90:	46 2f       	mov	r20, r22
    2d92:	47 70       	andi	r20, 0x07	; 7
    2d94:	40 5d       	subi	r20, 0xD0	; 208
    2d96:	41 93       	st	Z+, r20
    2d98:	b3 e0       	ldi	r27, 0x03	; 3
    2d9a:	0f d0       	rcall	.+30     	; 0x2dba <__ultoa_invert+0x86>
    2d9c:	c9 f7       	brne	.-14     	; 0x2d90 <__ultoa_invert+0x5c>
    2d9e:	f6 cf       	rjmp	.-20     	; 0x2d8c <__ultoa_invert+0x58>
    2da0:	46 2f       	mov	r20, r22
    2da2:	4f 70       	andi	r20, 0x0F	; 15
    2da4:	40 5d       	subi	r20, 0xD0	; 208
    2da6:	4a 33       	cpi	r20, 0x3A	; 58
    2da8:	18 f0       	brcs	.+6      	; 0x2db0 <__ultoa_invert+0x7c>
    2daa:	49 5d       	subi	r20, 0xD9	; 217
    2dac:	31 fd       	sbrc	r19, 1
    2dae:	40 52       	subi	r20, 0x20	; 32
    2db0:	41 93       	st	Z+, r20
    2db2:	02 d0       	rcall	.+4      	; 0x2db8 <__ultoa_invert+0x84>
    2db4:	a9 f7       	brne	.-22     	; 0x2da0 <__ultoa_invert+0x6c>
    2db6:	ea cf       	rjmp	.-44     	; 0x2d8c <__ultoa_invert+0x58>
    2db8:	b4 e0       	ldi	r27, 0x04	; 4
    2dba:	a6 95       	lsr	r26
    2dbc:	97 95       	ror	r25
    2dbe:	87 95       	ror	r24
    2dc0:	77 95       	ror	r23
    2dc2:	67 95       	ror	r22
    2dc4:	ba 95       	dec	r27
    2dc6:	c9 f7       	brne	.-14     	; 0x2dba <__ultoa_invert+0x86>
    2dc8:	00 97       	sbiw	r24, 0x00	; 0
    2dca:	61 05       	cpc	r22, r1
    2dcc:	71 05       	cpc	r23, r1
    2dce:	08 95       	ret
    2dd0:	9b 01       	movw	r18, r22
    2dd2:	ac 01       	movw	r20, r24
    2dd4:	0a 2e       	mov	r0, r26
    2dd6:	06 94       	lsr	r0
    2dd8:	57 95       	ror	r21
    2dda:	47 95       	ror	r20
    2ddc:	37 95       	ror	r19
    2dde:	27 95       	ror	r18
    2de0:	ba 95       	dec	r27
    2de2:	c9 f7       	brne	.-14     	; 0x2dd6 <__ultoa_invert+0xa2>
    2de4:	62 0f       	add	r22, r18
    2de6:	73 1f       	adc	r23, r19
    2de8:	84 1f       	adc	r24, r20
    2dea:	95 1f       	adc	r25, r21
    2dec:	a0 1d       	adc	r26, r0
    2dee:	08 95       	ret

00002df0 <__prologue_saves__>:
    2df0:	2f 92       	push	r2
    2df2:	3f 92       	push	r3
    2df4:	4f 92       	push	r4
    2df6:	5f 92       	push	r5
    2df8:	6f 92       	push	r6
    2dfa:	7f 92       	push	r7
    2dfc:	8f 92       	push	r8
    2dfe:	9f 92       	push	r9
    2e00:	af 92       	push	r10
    2e02:	bf 92       	push	r11
    2e04:	cf 92       	push	r12
    2e06:	df 92       	push	r13
    2e08:	ef 92       	push	r14
    2e0a:	ff 92       	push	r15
    2e0c:	0f 93       	push	r16
    2e0e:	1f 93       	push	r17
    2e10:	cf 93       	push	r28
    2e12:	df 93       	push	r29
    2e14:	cd b7       	in	r28, 0x3d	; 61
    2e16:	de b7       	in	r29, 0x3e	; 62
    2e18:	ca 1b       	sub	r28, r26
    2e1a:	db 0b       	sbc	r29, r27
    2e1c:	0f b6       	in	r0, 0x3f	; 63
    2e1e:	f8 94       	cli
    2e20:	de bf       	out	0x3e, r29	; 62
    2e22:	0f be       	out	0x3f, r0	; 63
    2e24:	cd bf       	out	0x3d, r28	; 61
    2e26:	09 94       	ijmp

00002e28 <__epilogue_restores__>:
    2e28:	2a 88       	ldd	r2, Y+18	; 0x12
    2e2a:	39 88       	ldd	r3, Y+17	; 0x11
    2e2c:	48 88       	ldd	r4, Y+16	; 0x10
    2e2e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e30:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e32:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e34:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e36:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e38:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e3a:	b9 84       	ldd	r11, Y+9	; 0x09
    2e3c:	c8 84       	ldd	r12, Y+8	; 0x08
    2e3e:	df 80       	ldd	r13, Y+7	; 0x07
    2e40:	ee 80       	ldd	r14, Y+6	; 0x06
    2e42:	fd 80       	ldd	r15, Y+5	; 0x05
    2e44:	0c 81       	ldd	r16, Y+4	; 0x04
    2e46:	1b 81       	ldd	r17, Y+3	; 0x03
    2e48:	aa 81       	ldd	r26, Y+2	; 0x02
    2e4a:	b9 81       	ldd	r27, Y+1	; 0x01
    2e4c:	ce 0f       	add	r28, r30
    2e4e:	d1 1d       	adc	r29, r1
    2e50:	0f b6       	in	r0, 0x3f	; 63
    2e52:	f8 94       	cli
    2e54:	de bf       	out	0x3e, r29	; 62
    2e56:	0f be       	out	0x3f, r0	; 63
    2e58:	cd bf       	out	0x3d, r28	; 61
    2e5a:	ed 01       	movw	r28, r26
    2e5c:	08 95       	ret

00002e5e <_exit>:
    2e5e:	f8 94       	cli

00002e60 <__stop_program>:
    2e60:	ff cf       	rjmp	.-2      	; 0x2e60 <__stop_program>
