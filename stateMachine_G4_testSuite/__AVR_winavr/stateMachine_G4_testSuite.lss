
stateMachine_G4_testSuite.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000006b2  00800060  000028fc  00002990  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006e  00800712  00800712  00003042  2**0
                  ALLOC
  3 .stab         0000318c  00000000  00000000  00003044  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002972  00000000  00000000  000061d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	17 e0       	ldi	r17, 0x07	; 7
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ef       	ldi	r30, 0xFC	; 252
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 31       	cpi	r26, 0x12	; 18
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	17 e0       	ldi	r17, 0x07	; 7
      78:	a2 e1       	ldi	r26, 0x12	; 18
      7a:	b7 e0       	ldi	r27, 0x07	; 7
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 38       	cpi	r26, 0x80	; 128
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#if defined(__TS7800__) || defined(__cygwin__) || defined(__AVR_ARCH__)
int main()
#else
void main(	void)
#endif
{
      92:	0f 93       	push	r16
      94:	1f 93       	push	r17
      96:	df 93       	push	r29
      98:	cf 93       	push	r28
      9a:	cd b7       	in	r28, 0x3d	; 61
      9c:	de b7       	in	r29, 0x3e	; 62
      9e:	28 97       	sbiw	r28, 0x08	; 8
      a0:	0f b6       	in	r0, 0x3f	; 63
      a2:	f8 94       	cli
      a4:	de bf       	out	0x3e, r29	; 62
      a6:	0f be       	out	0x3f, r0	; 63
      a8:	cd bf       	out	0x3d, r28	; 61
#if defined(__TS7800__) || defined(__cygwin__)
	int				rc ;
	pthread_t		ISR_threadHandle ;
	void*			ISR_threadStatus ;
#endif
	bool			ok = true ;
      aa:	81 e0       	ldi	r24, 0x01	; 1
      ac:	8d 83       	std	Y+5, r24	; 0x05
	stateMachine_t*	bomb ;
	stateMachine_t*	calculator ;
	static int iterationMax = 10 ;

	puts("4th Generation state machine test started.") ;
      ae:	82 e6       	ldi	r24, 0x62	; 98
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	0e 94 93 11 	call	0x2326	; 0x2326 <puts>
	task_UART_init(0) ;

	portENABLE_INTERRUPTS() ;
#endif

	puts("Generating timebomb") ;
      b6:	8d e8       	ldi	r24, 0x8D	; 141
      b8:	90 e0       	ldi	r25, 0x00	; 0
      ba:	0e 94 93 11 	call	0x2326	; 0x2326 <puts>

	bomb = STATE_MACHINE_CREATE_INSTANCE_OF(timeBomb) ;
      be:	0e 94 cf 05 	call	0xb9e	; 0xb9e <timeBomb_getMachineSize>
      c2:	8c 01       	movw	r16, r24
      c4:	0e 94 8f 05 	call	0xb1e	; 0xb1e <timeBomb_getEventQueueDepth>
      c8:	9c 01       	movw	r18, r24
      ca:	48 e9       	ldi	r20, 0x98	; 152
      cc:	55 e0       	ldi	r21, 0x05	; 5
      ce:	c8 01       	movw	r24, r16
      d0:	b9 01       	movw	r22, r18
      d2:	0e 94 6f 0a 	call	0x14de	; 0x14de <allocateStateMachineMemory>
      d6:	9c 83       	std	Y+4, r25	; 0x04
      d8:	8b 83       	std	Y+3, r24	; 0x03

	if(bomb)
      da:	8b 81       	ldd	r24, Y+3	; 0x03
      dc:	9c 81       	ldd	r25, Y+4	; 0x04
      de:	00 97       	sbiw	r24, 0x00	; 0
      e0:	21 f0       	breq	.+8      	; 0xea <main+0x58>
	{
		REGISTER_STATE_MACHINE(bomb) ;
      e2:	8b 81       	ldd	r24, Y+3	; 0x03
      e4:	9c 81       	ldd	r25, Y+4	; 0x04
      e6:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <registerStateMachine>
	}

	puts("Generating calculator") ;
      ea:	81 ea       	ldi	r24, 0xA1	; 161
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	0e 94 93 11 	call	0x2326	; 0x2326 <puts>

	calculator = STATE_MACHINE_CREATE_INSTANCE_OF(calculator) ;
      f2:	0e 94 2c 01 	call	0x258	; 0x258 <calculator_getMachineSize>
      f6:	8c 01       	movw	r16, r24
      f8:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <calculator_getEventQueueDepth>
      fc:	9c 01       	movw	r18, r24
      fe:	45 ef       	ldi	r20, 0xF5	; 245
     100:	50 e0       	ldi	r21, 0x00	; 0
     102:	c8 01       	movw	r24, r16
     104:	b9 01       	movw	r22, r18
     106:	0e 94 6f 0a 	call	0x14de	; 0x14de <allocateStateMachineMemory>
     10a:	9a 83       	std	Y+2, r25	; 0x02
     10c:	89 83       	std	Y+1, r24	; 0x01

	if(calculator)
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	9a 81       	ldd	r25, Y+2	; 0x02
     112:	00 97       	sbiw	r24, 0x00	; 0
     114:	41 f0       	breq	.+16     	; 0x126 <main+0x94>
	{
		puts("Registering calculator") ;
     116:	87 eb       	ldi	r24, 0xB7	; 183
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	0e 94 93 11 	call	0x2326	; 0x2326 <puts>

		REGISTER_STATE_MACHINE(calculator) ;
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	9a 81       	ldd	r25, Y+2	; 0x02
     122:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <registerStateMachine>
	}

	puts("Iterating state machines") ;
     126:	8e ec       	ldi	r24, 0xCE	; 206
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	0e 94 93 11 	call	0x2326	; 0x2326 <puts>
     12e:	1e c0       	rjmp	.+60     	; 0x16c <main+0xda>

	while(ok)
	{
		if(iterationMax-- == 0)
     130:	80 91 60 00 	lds	r24, 0x0060
     134:	90 91 61 00 	lds	r25, 0x0061
     138:	98 87       	std	Y+8, r25	; 0x08
     13a:	8f 83       	std	Y+7, r24	; 0x07
     13c:	1e 82       	std	Y+6, r1	; 0x06
     13e:	8f 81       	ldd	r24, Y+7	; 0x07
     140:	98 85       	ldd	r25, Y+8	; 0x08
     142:	00 97       	sbiw	r24, 0x00	; 0
     144:	11 f4       	brne	.+4      	; 0x14a <main+0xb8>
     146:	91 e0       	ldi	r25, 0x01	; 1
     148:	9e 83       	std	Y+6, r25	; 0x06
     14a:	8f 81       	ldd	r24, Y+7	; 0x07
     14c:	98 85       	ldd	r25, Y+8	; 0x08
     14e:	01 97       	sbiw	r24, 0x01	; 1
     150:	90 93 61 00 	sts	0x0061, r25
     154:	80 93 60 00 	sts	0x0060, r24
     158:	8e 81       	ldd	r24, Y+6	; 0x06
     15a:	88 23       	and	r24, r24
     15c:	09 f0       	breq	.+2      	; 0x160 <main+0xce>
		{
			ok = false ;
     15e:	1d 82       	std	Y+5, r1	; 0x05
		}

		puts("loop") ;
     160:	87 ee       	ldi	r24, 0xE7	; 231
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	0e 94 93 11 	call	0x2326	; 0x2326 <puts>

		ITERATE_ALL_STATE_MACHINES() ;
     168:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <iterateAllStateMachines>
		REGISTER_STATE_MACHINE(calculator) ;
	}

	puts("Iterating state machines") ;

	while(ok)
     16c:	8d 81       	ldd	r24, Y+5	; 0x05
     16e:	88 23       	and	r24, r24
     170:	f9 f6       	brne	.-66     	; 0x130 <main+0x9e>

#if defined(__TS7800__) || defined(__cygwin__)
	pthread_join(ISR_threadHandle, &ISR_threadStatus) ;
#endif

	if(calculator)
     172:	89 81       	ldd	r24, Y+1	; 0x01
     174:	9a 81       	ldd	r25, Y+2	; 0x02
     176:	00 97       	sbiw	r24, 0x00	; 0
     178:	69 f0       	breq	.+26     	; 0x194 <main+0x102>
	{
		UNREGISTER_STATE_MACHINE(calculator) ;
     17a:	89 81       	ldd	r24, Y+1	; 0x01
     17c:	9a 81       	ldd	r25, Y+2	; 0x02
     17e:	0e 94 19 0b 	call	0x1632	; 0x1632 <unregisterStateMachine>

		STATE_MACHINE_DESTROY_INSTANCE_OF(calculator, calculator) ;
     182:	89 81       	ldd	r24, Y+1	; 0x01
     184:	9a 81       	ldd	r25, Y+2	; 0x02
     186:	2c e1       	ldi	r18, 0x1C	; 28
     188:	31 e0       	ldi	r19, 0x01	; 1
     18a:	b9 01       	movw	r22, r18
     18c:	0e 94 c3 0a 	call	0x1586	; 0x1586 <deallocateStateMachineMemory>

		calculator = 0 ;
     190:	1a 82       	std	Y+2, r1	; 0x02
     192:	19 82       	std	Y+1, r1	; 0x01
	}

	if(bomb)
     194:	8b 81       	ldd	r24, Y+3	; 0x03
     196:	9c 81       	ldd	r25, Y+4	; 0x04
     198:	00 97       	sbiw	r24, 0x00	; 0
     19a:	69 f0       	breq	.+26     	; 0x1b6 <main+0x124>
	{
		UNREGISTER_STATE_MACHINE(bomb) ;
     19c:	8b 81       	ldd	r24, Y+3	; 0x03
     19e:	9c 81       	ldd	r25, Y+4	; 0x04
     1a0:	0e 94 19 0b 	call	0x1632	; 0x1632 <unregisterStateMachine>

		STATE_MACHINE_DESTROY_INSTANCE_OF(timeBomb, bomb) ;
     1a4:	8b 81       	ldd	r24, Y+3	; 0x03
     1a6:	9c 81       	ldd	r25, Y+4	; 0x04
     1a8:	2f eb       	ldi	r18, 0xBF	; 191
     1aa:	35 e0       	ldi	r19, 0x05	; 5
     1ac:	b9 01       	movw	r22, r18
     1ae:	0e 94 c3 0a 	call	0x1586	; 0x1586 <deallocateStateMachineMemory>

		bomb = 0 ;
     1b2:	1c 82       	std	Y+4, r1	; 0x04
     1b4:	1b 82       	std	Y+3, r1	; 0x03
	}
#endif
	puts("\n4th Generation state machine test done.") ;
     1b6:	8c ee       	ldi	r24, 0xEC	; 236
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	0e 94 93 11 	call	0x2326	; 0x2326 <puts>

#if defined(__TS7800__) || defined(__cygwin__) || defined(__AVR_ARCH__)
	return EXIT_SUCCESS ;
     1be:	80 e0       	ldi	r24, 0x00	; 0
     1c0:	90 e0       	ldi	r25, 0x00	; 0
#endif
}
     1c2:	28 96       	adiw	r28, 0x08	; 8
     1c4:	0f b6       	in	r0, 0x3f	; 63
     1c6:	f8 94       	cli
     1c8:	de bf       	out	0x3e, r29	; 62
     1ca:	0f be       	out	0x3f, r0	; 63
     1cc:	cd bf       	out	0x3d, r28	; 61
     1ce:	cf 91       	pop	r28
     1d0:	df 91       	pop	r29
     1d2:	1f 91       	pop	r17
     1d4:	0f 91       	pop	r16
     1d6:	08 95       	ret

000001d8 <calculator_getEventQueueDepth>:
DEFINE_STATE_MACHINE() ;
	DECLARE_STATE_MACHINE_VARIABLES() ;
		uint32_t	result ;
	END_STATE_MACHINE_VARIABLES() ;

	SET_EVENT_QUEUE_DEPTH(config_CalcEVENT_QUEUE_DEPTH) ;
     1d8:	df 93       	push	r29
     1da:	cf 93       	push	r28
     1dc:	cd b7       	in	r28, 0x3d	; 61
     1de:	de b7       	in	r29, 0x3e	; 62
     1e0:	80 e1       	ldi	r24, 0x10	; 16
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	cf 91       	pop	r28
     1e6:	df 91       	pop	r29
     1e8:	08 95       	ret

000001ea <calculator_constructor>:

		ADD_SUB_STATE(operand2, PARENT_STATE(on)) ;
			ADD_SUB_STATE(zero2, PARENT_STATE(operand2)) ;
			ADD_SUB_STATE(int2, PARENT_STATE(operand2)) ;
			ADD_SUB_STATE(frac2, PARENT_STATE(operand2)) ;
END_STATE_MACHINE_DEFINITION() ;
     1ea:	df 93       	push	r29
     1ec:	cf 93       	push	r28
     1ee:	00 d0       	rcall	.+0      	; 0x1f0 <calculator_constructor+0x6>
     1f0:	cd b7       	in	r28, 0x3d	; 61
     1f2:	de b7       	in	r29, 0x3e	; 62
     1f4:	9a 83       	std	Y+2, r25	; 0x02
     1f6:	89 83       	std	Y+1, r24	; 0x01
     1f8:	e9 81       	ldd	r30, Y+1	; 0x01
     1fa:	fa 81       	ldd	r31, Y+2	; 0x02
     1fc:	81 e3       	ldi	r24, 0x31	; 49
     1fe:	91 e0       	ldi	r25, 0x01	; 1
     200:	91 83       	std	Z+1, r25	; 0x01
     202:	80 83       	st	Z, r24
     204:	e9 81       	ldd	r30, Y+1	; 0x01
     206:	fa 81       	ldd	r31, Y+2	; 0x02
     208:	81 e3       	ldi	r24, 0x31	; 49
     20a:	91 e0       	ldi	r25, 0x01	; 1
     20c:	96 83       	std	Z+6, r25	; 0x06
     20e:	85 83       	std	Z+5, r24	; 0x05
     210:	e9 81       	ldd	r30, Y+1	; 0x01
     212:	fa 81       	ldd	r31, Y+2	; 0x02
     214:	12 82       	std	Z+2, r1	; 0x02
     216:	80 91 20 01 	lds	r24, 0x0120
     21a:	90 91 21 01 	lds	r25, 0x0121
     21e:	e9 81       	ldd	r30, Y+1	; 0x01
     220:	fa 81       	ldd	r31, Y+2	; 0x02
     222:	94 83       	std	Z+4, r25	; 0x04
     224:	83 83       	std	Z+3, r24	; 0x03
     226:	89 81       	ldd	r24, Y+1	; 0x01
     228:	9a 81       	ldd	r25, Y+2	; 0x02
     22a:	0e 94 35 01 	call	0x26a	; 0x26a <calculator_constructor2>
     22e:	0f 90       	pop	r0
     230:	0f 90       	pop	r0
     232:	cf 91       	pop	r28
     234:	df 91       	pop	r29
     236:	08 95       	ret

00000238 <calculator_destructor>:
     238:	df 93       	push	r29
     23a:	cf 93       	push	r28
     23c:	00 d0       	rcall	.+0      	; 0x23e <calculator_destructor+0x6>
     23e:	cd b7       	in	r28, 0x3d	; 61
     240:	de b7       	in	r29, 0x3e	; 62
     242:	9a 83       	std	Y+2, r25	; 0x02
     244:	89 83       	std	Y+1, r24	; 0x01
     246:	89 81       	ldd	r24, Y+1	; 0x01
     248:	9a 81       	ldd	r25, Y+2	; 0x02
     24a:	0e 94 47 01 	call	0x28e	; 0x28e <calculator_destructor2>
     24e:	0f 90       	pop	r0
     250:	0f 90       	pop	r0
     252:	cf 91       	pop	r28
     254:	df 91       	pop	r29
     256:	08 95       	ret

00000258 <calculator_getMachineSize>:
     258:	df 93       	push	r29
     25a:	cf 93       	push	r28
     25c:	cd b7       	in	r28, 0x3d	; 61
     25e:	de b7       	in	r29, 0x3e	; 62
     260:	85 e1       	ldi	r24, 0x15	; 21
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	cf 91       	pop	r28
     266:	df 91       	pop	r29
     268:	08 95       	ret

0000026a <calculator_constructor2>:


STATE_MACHINE_CONSTRUCTOR()
{
     26a:	df 93       	push	r29
     26c:	cf 93       	push	r28
     26e:	00 d0       	rcall	.+0      	; 0x270 <calculator_constructor2+0x6>
     270:	cd b7       	in	r28, 0x3d	; 61
     272:	de b7       	in	r29, 0x3e	; 62
     274:	9a 83       	std	Y+2, r25	; 0x02
     276:	89 83       	std	Y+1, r24	; 0x01
	self->result = 0 ;
     278:	e9 81       	ldd	r30, Y+1	; 0x01
     27a:	fa 81       	ldd	r31, Y+2	; 0x02
     27c:	11 8a       	std	Z+17, r1	; 0x11
     27e:	12 8a       	std	Z+18, r1	; 0x12
     280:	13 8a       	std	Z+19, r1	; 0x13
     282:	14 8a       	std	Z+20, r1	; 0x14
}
     284:	0f 90       	pop	r0
     286:	0f 90       	pop	r0
     288:	cf 91       	pop	r28
     28a:	df 91       	pop	r29
     28c:	08 95       	ret

0000028e <calculator_destructor2>:


STATE_MACHINE_DESTRUCTOR()
{
     28e:	df 93       	push	r29
     290:	cf 93       	push	r28
     292:	00 d0       	rcall	.+0      	; 0x294 <calculator_destructor2+0x6>
     294:	cd b7       	in	r28, 0x3d	; 61
     296:	de b7       	in	r29, 0x3e	; 62
     298:	9a 83       	std	Y+2, r25	; 0x02
     29a:	89 83       	std	Y+1, r24	; 0x01
	(void)self ;	/* Nothing to do here */
}
     29c:	0f 90       	pop	r0
     29e:	0f 90       	pop	r0
     2a0:	cf 91       	pop	r28
     2a2:	df 91       	pop	r29
     2a4:	08 95       	ret

000002a6 <calculator_TOP_handler>:


DEFINE_TOP_STATE()
     2a6:	df 93       	push	r29
     2a8:	cf 93       	push	r28
     2aa:	00 d0       	rcall	.+0      	; 0x2ac <calculator_TOP_handler+0x6>
     2ac:	00 d0       	rcall	.+0      	; 0x2ae <calculator_TOP_handler+0x8>
     2ae:	00 d0       	rcall	.+0      	; 0x2b0 <calculator_TOP_handler+0xa>
     2b0:	cd b7       	in	r28, 0x3d	; 61
     2b2:	de b7       	in	r29, 0x3e	; 62
     2b4:	9b 83       	std	Y+3, r25	; 0x03
     2b6:	8a 83       	std	Y+2, r24	; 0x02
     2b8:	7d 83       	std	Y+5, r23	; 0x05
     2ba:	6c 83       	std	Y+4, r22	; 0x04
     2bc:	19 82       	std	Y+1, r1	; 0x01
{
	INITIAL_TRANSITION(TO(begin),																	NO_ACTION) ;
     2be:	ec 81       	ldd	r30, Y+4	; 0x04
     2c0:	fd 81       	ldd	r31, Y+5	; 0x05
     2c2:	80 81       	ld	r24, Z
     2c4:	82 30       	cpi	r24, 0x02	; 2
     2c6:	49 f4       	brne	.+18     	; 0x2da <calculator_TOP_handler+0x34>
     2c8:	ea 81       	ldd	r30, Y+2	; 0x02
     2ca:	fb 81       	ldd	r31, Y+3	; 0x03
     2cc:	8f e8       	ldi	r24, 0x8F	; 143
     2ce:	91 e0       	ldi	r25, 0x01	; 1
     2d0:	90 87       	std	Z+8, r25	; 0x08
     2d2:	87 83       	std	Z+7, r24	; 0x07
     2d4:	82 e0       	ldi	r24, 0x02	; 2
     2d6:	8e 83       	std	Y+6, r24	; 0x06
     2d8:	02 c0       	rjmp	.+4      	; 0x2de <calculator_TOP_handler+0x38>
}
END_DEFINE_STATE()
     2da:	89 81       	ldd	r24, Y+1	; 0x01
     2dc:	8e 83       	std	Y+6, r24	; 0x06
     2de:	8e 81       	ldd	r24, Y+6	; 0x06
     2e0:	26 96       	adiw	r28, 0x06	; 6
     2e2:	0f b6       	in	r0, 0x3f	; 63
     2e4:	f8 94       	cli
     2e6:	de bf       	out	0x3e, r29	; 62
     2e8:	0f be       	out	0x3f, r0	; 63
     2ea:	cd bf       	out	0x3d, r28	; 61
     2ec:	cf 91       	pop	r28
     2ee:	df 91       	pop	r29
     2f0:	08 95       	ret

000002f2 <calculator_on_handler>:


DEFINE_STATE(on)
     2f2:	df 93       	push	r29
     2f4:	cf 93       	push	r28
     2f6:	00 d0       	rcall	.+0      	; 0x2f8 <calculator_on_handler+0x6>
     2f8:	00 d0       	rcall	.+0      	; 0x2fa <calculator_on_handler+0x8>
     2fa:	00 d0       	rcall	.+0      	; 0x2fc <calculator_on_handler+0xa>
     2fc:	cd b7       	in	r28, 0x3d	; 61
     2fe:	de b7       	in	r29, 0x3e	; 62
     300:	9b 83       	std	Y+3, r25	; 0x03
     302:	8a 83       	std	Y+2, r24	; 0x02
     304:	7d 83       	std	Y+5, r23	; 0x05
     306:	6c 83       	std	Y+4, r22	; 0x04
     308:	19 82       	std	Y+1, r1	; 0x01
{
	INITIAL_TRANSITION(TO(ready),																NO_ACTION) ;
     30a:	ec 81       	ldd	r30, Y+4	; 0x04
     30c:	fd 81       	ldd	r31, Y+5	; 0x05
     30e:	80 81       	ld	r24, Z
     310:	82 30       	cpi	r24, 0x02	; 2
     312:	49 f4       	brne	.+18     	; 0x326 <calculator_on_handler+0x34>
     314:	ea 81       	ldd	r30, Y+2	; 0x02
     316:	fb 81       	ldd	r31, Y+3	; 0x03
     318:	8e e5       	ldi	r24, 0x5E	; 94
     31a:	91 e0       	ldi	r25, 0x01	; 1
     31c:	90 87       	std	Z+8, r25	; 0x08
     31e:	87 83       	std	Z+7, r24	; 0x07
     320:	82 e0       	ldi	r24, 0x02	; 2
     322:	8e 83       	std	Y+6, r24	; 0x06
     324:	1e c0       	rjmp	.+60     	; 0x362 <calculator_on_handler+0x70>

	TRANSITION_ON(CLEAR,		UNCONDITIONALLY,						TO(on),					NO_ACTION) ;
     326:	ec 81       	ldd	r30, Y+4	; 0x04
     328:	fd 81       	ldd	r31, Y+5	; 0x05
     32a:	80 81       	ld	r24, Z
     32c:	84 30       	cpi	r24, 0x04	; 4
     32e:	49 f4       	brne	.+18     	; 0x342 <calculator_on_handler+0x50>
     330:	ea 81       	ldd	r30, Y+2	; 0x02
     332:	fb 81       	ldd	r31, Y+3	; 0x03
     334:	86 e4       	ldi	r24, 0x46	; 70
     336:	91 e0       	ldi	r25, 0x01	; 1
     338:	90 87       	std	Z+8, r25	; 0x08
     33a:	87 83       	std	Z+7, r24	; 0x07
     33c:	82 e0       	ldi	r24, 0x02	; 2
     33e:	8e 83       	std	Y+6, r24	; 0x06
     340:	10 c0       	rjmp	.+32     	; 0x362 <calculator_on_handler+0x70>
	TRANSITION_ON(OFF,			UNCONDITIONALLY,						TO(STATE_MACHINE_EXIT),	NO_ACTION) ;
     342:	ec 81       	ldd	r30, Y+4	; 0x04
     344:	fd 81       	ldd	r31, Y+5	; 0x05
     346:	80 81       	ld	r24, Z
     348:	8b 30       	cpi	r24, 0x0B	; 11
     34a:	49 f4       	brne	.+18     	; 0x35e <calculator_on_handler+0x6c>
     34c:	ea 81       	ldd	r30, Y+2	; 0x02
     34e:	fb 81       	ldd	r31, Y+3	; 0x03
     350:	81 e3       	ldi	r24, 0x31	; 49
     352:	91 e0       	ldi	r25, 0x01	; 1
     354:	90 87       	std	Z+8, r25	; 0x08
     356:	87 83       	std	Z+7, r24	; 0x07
     358:	82 e0       	ldi	r24, 0x02	; 2
     35a:	8e 83       	std	Y+6, r24	; 0x06
     35c:	02 c0       	rjmp	.+4      	; 0x362 <calculator_on_handler+0x70>
}
END_DEFINE_STATE()
     35e:	89 81       	ldd	r24, Y+1	; 0x01
     360:	8e 83       	std	Y+6, r24	; 0x06
     362:	8e 81       	ldd	r24, Y+6	; 0x06
     364:	26 96       	adiw	r28, 0x06	; 6
     366:	0f b6       	in	r0, 0x3f	; 63
     368:	f8 94       	cli
     36a:	de bf       	out	0x3e, r29	; 62
     36c:	0f be       	out	0x3f, r0	; 63
     36e:	cd bf       	out	0x3d, r28	; 61
     370:	cf 91       	pop	r28
     372:	df 91       	pop	r29
     374:	08 95       	ret

00000376 <calculator_ready_handler>:


DEFINE_STATE(ready)
     376:	df 93       	push	r29
     378:	cf 93       	push	r28
     37a:	00 d0       	rcall	.+0      	; 0x37c <calculator_ready_handler+0x6>
     37c:	00 d0       	rcall	.+0      	; 0x37e <calculator_ready_handler+0x8>
     37e:	00 d0       	rcall	.+0      	; 0x380 <calculator_ready_handler+0xa>
     380:	cd b7       	in	r28, 0x3d	; 61
     382:	de b7       	in	r29, 0x3e	; 62
     384:	9b 83       	std	Y+3, r25	; 0x03
     386:	8a 83       	std	Y+2, r24	; 0x02
     388:	7d 83       	std	Y+5, r23	; 0x05
     38a:	6c 83       	std	Y+4, r22	; 0x04
     38c:	19 82       	std	Y+1, r1	; 0x01
{
	INITIAL_TRANSITION(TO(zero1),																NO_ACTION) ;
     38e:	ec 81       	ldd	r30, Y+4	; 0x04
     390:	fd 81       	ldd	r31, Y+5	; 0x05
     392:	80 81       	ld	r24, Z
     394:	82 30       	cpi	r24, 0x02	; 2
     396:	49 f4       	brne	.+18     	; 0x3aa <calculator_ready_handler+0x34>
     398:	ea 81       	ldd	r30, Y+2	; 0x02
     39a:	fb 81       	ldd	r31, Y+3	; 0x03
     39c:	8d ed       	ldi	r24, 0xDD	; 221
     39e:	91 e0       	ldi	r25, 0x01	; 1
     3a0:	90 87       	std	Z+8, r25	; 0x08
     3a2:	87 83       	std	Z+7, r24	; 0x07
     3a4:	82 e0       	ldi	r24, 0x02	; 2
     3a6:	8e 83       	std	Y+6, r24	; 0x06
     3a8:	10 c0       	rjmp	.+32     	; 0x3ca <calculator_ready_handler+0x54>

	TRANSITION_ON(OPERATION,	UNCONDITIONALLY,						TO(opEntered),			NO_ACTION) ;
     3aa:	ec 81       	ldd	r30, Y+4	; 0x04
     3ac:	fd 81       	ldd	r31, Y+5	; 0x05
     3ae:	80 81       	ld	r24, Z
     3b0:	89 30       	cpi	r24, 0x09	; 9
     3b2:	49 f4       	brne	.+18     	; 0x3c6 <calculator_ready_handler+0x50>
     3b4:	ea 81       	ldd	r30, Y+2	; 0x02
     3b6:	fb 81       	ldd	r31, Y+3	; 0x03
     3b8:	80 e4       	ldi	r24, 0x40	; 64
     3ba:	92 e0       	ldi	r25, 0x02	; 2
     3bc:	90 87       	std	Z+8, r25	; 0x08
     3be:	87 83       	std	Z+7, r24	; 0x07
     3c0:	82 e0       	ldi	r24, 0x02	; 2
     3c2:	8e 83       	std	Y+6, r24	; 0x06
     3c4:	02 c0       	rjmp	.+4      	; 0x3ca <calculator_ready_handler+0x54>
}
END_DEFINE_STATE()
     3c6:	89 81       	ldd	r24, Y+1	; 0x01
     3c8:	8e 83       	std	Y+6, r24	; 0x06
     3ca:	8e 81       	ldd	r24, Y+6	; 0x06
     3cc:	26 96       	adiw	r28, 0x06	; 6
     3ce:	0f b6       	in	r0, 0x3f	; 63
     3d0:	f8 94       	cli
     3d2:	de bf       	out	0x3e, r29	; 62
     3d4:	0f be       	out	0x3f, r0	; 63
     3d6:	cd bf       	out	0x3d, r28	; 61
     3d8:	cf 91       	pop	r28
     3da:	df 91       	pop	r29
     3dc:	08 95       	ret

000003de <calculator_result_handler>:


DEFINE_STATE(result)
     3de:	df 93       	push	r29
     3e0:	cf 93       	push	r28
     3e2:	00 d0       	rcall	.+0      	; 0x3e4 <calculator_result_handler+0x6>
     3e4:	00 d0       	rcall	.+0      	; 0x3e6 <calculator_result_handler+0x8>
     3e6:	0f 92       	push	r0
     3e8:	cd b7       	in	r28, 0x3d	; 61
     3ea:	de b7       	in	r29, 0x3e	; 62
     3ec:	9b 83       	std	Y+3, r25	; 0x03
     3ee:	8a 83       	std	Y+2, r24	; 0x02
     3f0:	7d 83       	std	Y+5, r23	; 0x05
     3f2:	6c 83       	std	Y+4, r22	; 0x04
     3f4:	19 82       	std	Y+1, r1	; 0x01
{
}
END_DEFINE_STATE()
     3f6:	89 81       	ldd	r24, Y+1	; 0x01
     3f8:	0f 90       	pop	r0
     3fa:	0f 90       	pop	r0
     3fc:	0f 90       	pop	r0
     3fe:	0f 90       	pop	r0
     400:	0f 90       	pop	r0
     402:	cf 91       	pop	r28
     404:	df 91       	pop	r29
     406:	08 95       	ret

00000408 <calculator_begin_handler>:


DEFINE_STATE(begin)
     408:	df 93       	push	r29
     40a:	cf 93       	push	r28
     40c:	00 d0       	rcall	.+0      	; 0x40e <calculator_begin_handler+0x6>
     40e:	00 d0       	rcall	.+0      	; 0x410 <calculator_begin_handler+0x8>
     410:	00 d0       	rcall	.+0      	; 0x412 <calculator_begin_handler+0xa>
     412:	cd b7       	in	r28, 0x3d	; 61
     414:	de b7       	in	r29, 0x3e	; 62
     416:	9b 83       	std	Y+3, r25	; 0x03
     418:	8a 83       	std	Y+2, r24	; 0x02
     41a:	7d 83       	std	Y+5, r23	; 0x05
     41c:	6c 83       	std	Y+4, r22	; 0x04
     41e:	19 82       	std	Y+1, r1	; 0x01
{
	/* This will cause a loop in the state machine, but for testing purposes, it tests a couple of cases */
	INITIAL_TRANSITION(TO(on),																	NO_ACTION) ;
     420:	ec 81       	ldd	r30, Y+4	; 0x04
     422:	fd 81       	ldd	r31, Y+5	; 0x05
     424:	80 81       	ld	r24, Z
     426:	82 30       	cpi	r24, 0x02	; 2
     428:	49 f4       	brne	.+18     	; 0x43c <calculator_begin_handler+0x34>
     42a:	ea 81       	ldd	r30, Y+2	; 0x02
     42c:	fb 81       	ldd	r31, Y+3	; 0x03
     42e:	86 e4       	ldi	r24, 0x46	; 70
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	90 87       	std	Z+8, r25	; 0x08
     434:	87 83       	std	Z+7, r24	; 0x07
     436:	82 e0       	ldi	r24, 0x02	; 2
     438:	8e 83       	std	Y+6, r24	; 0x06
     43a:	3f c0       	rjmp	.+126    	; 0x4ba <__stack+0x5b>

	TRANSITION_ON(OPERATION,	IF(EVENT_IS(keyEvent_t)->key == '-'),	TO(negated1),			NO_ACTION) ;
     43c:	ec 81       	ldd	r30, Y+4	; 0x04
     43e:	fd 81       	ldd	r31, Y+5	; 0x05
     440:	80 81       	ld	r24, Z
     442:	89 30       	cpi	r24, 0x09	; 9
     444:	71 f4       	brne	.+28     	; 0x462 <__stack+0x3>
     446:	ec 81       	ldd	r30, Y+4	; 0x04
     448:	fd 81       	ldd	r31, Y+5	; 0x05
     44a:	81 81       	ldd	r24, Z+1	; 0x01
     44c:	8d 32       	cpi	r24, 0x2D	; 45
     44e:	49 f4       	brne	.+18     	; 0x462 <__stack+0x3>
     450:	ea 81       	ldd	r30, Y+2	; 0x02
     452:	fb 81       	ldd	r31, Y+3	; 0x03
     454:	8a ea       	ldi	r24, 0xAA	; 170
     456:	91 e0       	ldi	r25, 0x01	; 1
     458:	90 87       	std	Z+8, r25	; 0x08
     45a:	87 83       	std	Z+7, r24	; 0x07
     45c:	82 e0       	ldi	r24, 0x02	; 2
     45e:	8e 83       	std	Y+6, r24	; 0x06
     460:	2c c0       	rjmp	.+88     	; 0x4ba <__stack+0x5b>
	TRANSITION_ON(DIGIT_0,		UNCONDITIONALLY,						TO(zero1),				NO_ACTION) ;
     462:	ec 81       	ldd	r30, Y+4	; 0x04
     464:	fd 81       	ldd	r31, Y+5	; 0x05
     466:	80 81       	ld	r24, Z
     468:	86 30       	cpi	r24, 0x06	; 6
     46a:	49 f4       	brne	.+18     	; 0x47e <__stack+0x1f>
     46c:	ea 81       	ldd	r30, Y+2	; 0x02
     46e:	fb 81       	ldd	r31, Y+3	; 0x03
     470:	8d ed       	ldi	r24, 0xDD	; 221
     472:	91 e0       	ldi	r25, 0x01	; 1
     474:	90 87       	std	Z+8, r25	; 0x08
     476:	87 83       	std	Z+7, r24	; 0x07
     478:	82 e0       	ldi	r24, 0x02	; 2
     47a:	8e 83       	std	Y+6, r24	; 0x06
     47c:	1e c0       	rjmp	.+60     	; 0x4ba <__stack+0x5b>
	TRANSITION_ON(DIGIT_1_9,	UNCONDITIONALLY,						TO(int1),				NO_ACTION) ;
     47e:	ec 81       	ldd	r30, Y+4	; 0x04
     480:	fd 81       	ldd	r31, Y+5	; 0x05
     482:	80 81       	ld	r24, Z
     484:	87 30       	cpi	r24, 0x07	; 7
     486:	49 f4       	brne	.+18     	; 0x49a <__stack+0x3b>
     488:	ea 81       	ldd	r30, Y+2	; 0x02
     48a:	fb 81       	ldd	r31, Y+3	; 0x03
     48c:	84 ef       	ldi	r24, 0xF4	; 244
     48e:	91 e0       	ldi	r25, 0x01	; 1
     490:	90 87       	std	Z+8, r25	; 0x08
     492:	87 83       	std	Z+7, r24	; 0x07
     494:	82 e0       	ldi	r24, 0x02	; 2
     496:	8e 83       	std	Y+6, r24	; 0x06
     498:	10 c0       	rjmp	.+32     	; 0x4ba <__stack+0x5b>
	TRANSITION_ON(POINT,		UNCONDITIONALLY,						TO(frac1),				NO_ACTION) ;
     49a:	ec 81       	ldd	r30, Y+4	; 0x04
     49c:	fd 81       	ldd	r31, Y+5	; 0x05
     49e:	80 81       	ld	r24, Z
     4a0:	88 30       	cpi	r24, 0x08	; 8
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	ea 81       	ldd	r30, Y+2	; 0x02
     4a6:	fb 81       	ldd	r31, Y+3	; 0x03
     4a8:	8c e0       	ldi	r24, 0x0C	; 12
     4aa:	92 e0       	ldi	r25, 0x02	; 2
     4ac:	90 87       	std	Z+8, r25	; 0x08
     4ae:	87 83       	std	Z+7, r24	; 0x07
     4b0:	82 e0       	ldi	r24, 0x02	; 2
     4b2:	8e 83       	std	Y+6, r24	; 0x06
     4b4:	02 c0       	rjmp	.+4      	; 0x4ba <__stack+0x5b>
}
END_DEFINE_STATE()
     4b6:	89 81       	ldd	r24, Y+1	; 0x01
     4b8:	8e 83       	std	Y+6, r24	; 0x06
     4ba:	8e 81       	ldd	r24, Y+6	; 0x06
     4bc:	26 96       	adiw	r28, 0x06	; 6
     4be:	0f b6       	in	r0, 0x3f	; 63
     4c0:	f8 94       	cli
     4c2:	de bf       	out	0x3e, r29	; 62
     4c4:	0f be       	out	0x3f, r0	; 63
     4c6:	cd bf       	out	0x3d, r28	; 61
     4c8:	cf 91       	pop	r28
     4ca:	df 91       	pop	r29
     4cc:	08 95       	ret

000004ce <calculator_negated1_handler>:


DEFINE_STATE(negated1)
     4ce:	df 93       	push	r29
     4d0:	cf 93       	push	r28
     4d2:	00 d0       	rcall	.+0      	; 0x4d4 <calculator_negated1_handler+0x6>
     4d4:	00 d0       	rcall	.+0      	; 0x4d6 <calculator_negated1_handler+0x8>
     4d6:	00 d0       	rcall	.+0      	; 0x4d8 <calculator_negated1_handler+0xa>
     4d8:	cd b7       	in	r28, 0x3d	; 61
     4da:	de b7       	in	r29, 0x3e	; 62
     4dc:	9b 83       	std	Y+3, r25	; 0x03
     4de:	8a 83       	std	Y+2, r24	; 0x02
     4e0:	7d 83       	std	Y+5, r23	; 0x05
     4e2:	6c 83       	std	Y+4, r22	; 0x04
     4e4:	19 82       	std	Y+1, r1	; 0x01
{
	TRANSITION_ON(CLEAR_ENTRY,	UNCONDITIONALLY,						TO(begin),				NO_ACTION) ;
     4e6:	ec 81       	ldd	r30, Y+4	; 0x04
     4e8:	fd 81       	ldd	r31, Y+5	; 0x05
     4ea:	80 81       	ld	r24, Z
     4ec:	85 30       	cpi	r24, 0x05	; 5
     4ee:	49 f4       	brne	.+18     	; 0x502 <calculator_negated1_handler+0x34>
     4f0:	ea 81       	ldd	r30, Y+2	; 0x02
     4f2:	fb 81       	ldd	r31, Y+3	; 0x03
     4f4:	8f e8       	ldi	r24, 0x8F	; 143
     4f6:	91 e0       	ldi	r25, 0x01	; 1
     4f8:	90 87       	std	Z+8, r25	; 0x08
     4fa:	87 83       	std	Z+7, r24	; 0x07
     4fc:	82 e0       	ldi	r24, 0x02	; 2
     4fe:	8e 83       	std	Y+6, r24	; 0x06
     500:	39 c0       	rjmp	.+114    	; 0x574 <calculator_negated1_handler+0xa6>
	TRANSITION_ON(DIGIT_0,		UNCONDITIONALLY,						TO(zero1),				NO_ACTION) ;
     502:	ec 81       	ldd	r30, Y+4	; 0x04
     504:	fd 81       	ldd	r31, Y+5	; 0x05
     506:	80 81       	ld	r24, Z
     508:	86 30       	cpi	r24, 0x06	; 6
     50a:	49 f4       	brne	.+18     	; 0x51e <calculator_negated1_handler+0x50>
     50c:	ea 81       	ldd	r30, Y+2	; 0x02
     50e:	fb 81       	ldd	r31, Y+3	; 0x03
     510:	8d ed       	ldi	r24, 0xDD	; 221
     512:	91 e0       	ldi	r25, 0x01	; 1
     514:	90 87       	std	Z+8, r25	; 0x08
     516:	87 83       	std	Z+7, r24	; 0x07
     518:	82 e0       	ldi	r24, 0x02	; 2
     51a:	8e 83       	std	Y+6, r24	; 0x06
     51c:	2b c0       	rjmp	.+86     	; 0x574 <calculator_negated1_handler+0xa6>
	TRANSITION_ON(DIGIT_1_9,	UNCONDITIONALLY,						TO(int1),				NO_ACTION) ;
     51e:	ec 81       	ldd	r30, Y+4	; 0x04
     520:	fd 81       	ldd	r31, Y+5	; 0x05
     522:	80 81       	ld	r24, Z
     524:	87 30       	cpi	r24, 0x07	; 7
     526:	49 f4       	brne	.+18     	; 0x53a <calculator_negated1_handler+0x6c>
     528:	ea 81       	ldd	r30, Y+2	; 0x02
     52a:	fb 81       	ldd	r31, Y+3	; 0x03
     52c:	84 ef       	ldi	r24, 0xF4	; 244
     52e:	91 e0       	ldi	r25, 0x01	; 1
     530:	90 87       	std	Z+8, r25	; 0x08
     532:	87 83       	std	Z+7, r24	; 0x07
     534:	82 e0       	ldi	r24, 0x02	; 2
     536:	8e 83       	std	Y+6, r24	; 0x06
     538:	1d c0       	rjmp	.+58     	; 0x574 <calculator_negated1_handler+0xa6>
	TRANSITION_ON(POINT,		UNCONDITIONALLY,						TO(frac1),				NO_ACTION) ;
     53a:	ec 81       	ldd	r30, Y+4	; 0x04
     53c:	fd 81       	ldd	r31, Y+5	; 0x05
     53e:	80 81       	ld	r24, Z
     540:	88 30       	cpi	r24, 0x08	; 8
     542:	49 f4       	brne	.+18     	; 0x556 <calculator_negated1_handler+0x88>
     544:	ea 81       	ldd	r30, Y+2	; 0x02
     546:	fb 81       	ldd	r31, Y+3	; 0x03
     548:	8c e0       	ldi	r24, 0x0C	; 12
     54a:	92 e0       	ldi	r25, 0x02	; 2
     54c:	90 87       	std	Z+8, r25	; 0x08
     54e:	87 83       	std	Z+7, r24	; 0x07
     550:	82 e0       	ldi	r24, 0x02	; 2
     552:	8e 83       	std	Y+6, r24	; 0x06
     554:	0f c0       	rjmp	.+30     	; 0x574 <calculator_negated1_handler+0xa6>
	CONSUME_EVENT_IF(OPERATION,	IF(EVENT_IS(keyEvent_t)->key == '-'),							NO_ACTION) ;
     556:	ec 81       	ldd	r30, Y+4	; 0x04
     558:	fd 81       	ldd	r31, Y+5	; 0x05
     55a:	80 81       	ld	r24, Z
     55c:	89 30       	cpi	r24, 0x09	; 9
     55e:	41 f4       	brne	.+16     	; 0x570 <calculator_negated1_handler+0xa2>
     560:	ec 81       	ldd	r30, Y+4	; 0x04
     562:	fd 81       	ldd	r31, Y+5	; 0x05
     564:	81 81       	ldd	r24, Z+1	; 0x01
     566:	8d 32       	cpi	r24, 0x2D	; 45
     568:	19 f4       	brne	.+6      	; 0x570 <calculator_negated1_handler+0xa2>
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	8e 83       	std	Y+6, r24	; 0x06
     56e:	02 c0       	rjmp	.+4      	; 0x574 <calculator_negated1_handler+0xa6>
}
END_DEFINE_STATE()
     570:	89 81       	ldd	r24, Y+1	; 0x01
     572:	8e 83       	std	Y+6, r24	; 0x06
     574:	8e 81       	ldd	r24, Y+6	; 0x06
     576:	26 96       	adiw	r28, 0x06	; 6
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	f8 94       	cli
     57c:	de bf       	out	0x3e, r29	; 62
     57e:	0f be       	out	0x3f, r0	; 63
     580:	cd bf       	out	0x3d, r28	; 61
     582:	cf 91       	pop	r28
     584:	df 91       	pop	r29
     586:	08 95       	ret

00000588 <calculator_operand1_handler>:


DEFINE_STATE(operand1)
     588:	df 93       	push	r29
     58a:	cf 93       	push	r28
     58c:	00 d0       	rcall	.+0      	; 0x58e <calculator_operand1_handler+0x6>
     58e:	00 d0       	rcall	.+0      	; 0x590 <calculator_operand1_handler+0x8>
     590:	00 d0       	rcall	.+0      	; 0x592 <calculator_operand1_handler+0xa>
     592:	cd b7       	in	r28, 0x3d	; 61
     594:	de b7       	in	r29, 0x3e	; 62
     596:	9b 83       	std	Y+3, r25	; 0x03
     598:	8a 83       	std	Y+2, r24	; 0x02
     59a:	7d 83       	std	Y+5, r23	; 0x05
     59c:	6c 83       	std	Y+4, r22	; 0x04
     59e:	19 82       	std	Y+1, r1	; 0x01
{
	TRANSITION_ON(CLEAR_ENTRY,	UNCONDITIONALLY,						TO(ready),				NO_ACTION) ;
     5a0:	ec 81       	ldd	r30, Y+4	; 0x04
     5a2:	fd 81       	ldd	r31, Y+5	; 0x05
     5a4:	80 81       	ld	r24, Z
     5a6:	85 30       	cpi	r24, 0x05	; 5
     5a8:	49 f4       	brne	.+18     	; 0x5bc <calculator_operand1_handler+0x34>
     5aa:	ea 81       	ldd	r30, Y+2	; 0x02
     5ac:	fb 81       	ldd	r31, Y+3	; 0x03
     5ae:	8e e5       	ldi	r24, 0x5E	; 94
     5b0:	91 e0       	ldi	r25, 0x01	; 1
     5b2:	90 87       	std	Z+8, r25	; 0x08
     5b4:	87 83       	std	Z+7, r24	; 0x07
     5b6:	82 e0       	ldi	r24, 0x02	; 2
     5b8:	8e 83       	std	Y+6, r24	; 0x06
     5ba:	10 c0       	rjmp	.+32     	; 0x5dc <calculator_operand1_handler+0x54>
	TRANSITION_ON(OPERATION,	UNCONDITIONALLY,						TO(opEntered),			NO_ACTION) ;
     5bc:	ec 81       	ldd	r30, Y+4	; 0x04
     5be:	fd 81       	ldd	r31, Y+5	; 0x05
     5c0:	80 81       	ld	r24, Z
     5c2:	89 30       	cpi	r24, 0x09	; 9
     5c4:	49 f4       	brne	.+18     	; 0x5d8 <calculator_operand1_handler+0x50>
     5c6:	ea 81       	ldd	r30, Y+2	; 0x02
     5c8:	fb 81       	ldd	r31, Y+3	; 0x03
     5ca:	80 e4       	ldi	r24, 0x40	; 64
     5cc:	92 e0       	ldi	r25, 0x02	; 2
     5ce:	90 87       	std	Z+8, r25	; 0x08
     5d0:	87 83       	std	Z+7, r24	; 0x07
     5d2:	82 e0       	ldi	r24, 0x02	; 2
     5d4:	8e 83       	std	Y+6, r24	; 0x06
     5d6:	02 c0       	rjmp	.+4      	; 0x5dc <calculator_operand1_handler+0x54>
}
END_DEFINE_STATE()
     5d8:	89 81       	ldd	r24, Y+1	; 0x01
     5da:	8e 83       	std	Y+6, r24	; 0x06
     5dc:	8e 81       	ldd	r24, Y+6	; 0x06
     5de:	26 96       	adiw	r28, 0x06	; 6
     5e0:	0f b6       	in	r0, 0x3f	; 63
     5e2:	f8 94       	cli
     5e4:	de bf       	out	0x3e, r29	; 62
     5e6:	0f be       	out	0x3f, r0	; 63
     5e8:	cd bf       	out	0x3d, r28	; 61
     5ea:	cf 91       	pop	r28
     5ec:	df 91       	pop	r29
     5ee:	08 95       	ret

000005f0 <calculator_zero1_handler>:


DEFINE_STATE(zero1)
     5f0:	df 93       	push	r29
     5f2:	cf 93       	push	r28
     5f4:	00 d0       	rcall	.+0      	; 0x5f6 <calculator_zero1_handler+0x6>
     5f6:	00 d0       	rcall	.+0      	; 0x5f8 <calculator_zero1_handler+0x8>
     5f8:	00 d0       	rcall	.+0      	; 0x5fa <calculator_zero1_handler+0xa>
     5fa:	cd b7       	in	r28, 0x3d	; 61
     5fc:	de b7       	in	r29, 0x3e	; 62
     5fe:	9b 83       	std	Y+3, r25	; 0x03
     600:	8a 83       	std	Y+2, r24	; 0x02
     602:	7d 83       	std	Y+5, r23	; 0x05
     604:	6c 83       	std	Y+4, r22	; 0x04
     606:	19 82       	std	Y+1, r1	; 0x01
{
	INITIAL_TRANSITION(TO(zero2),																NO_ACTION) ;
     608:	ec 81       	ldd	r30, Y+4	; 0x04
     60a:	fd 81       	ldd	r31, Y+5	; 0x05
     60c:	80 81       	ld	r24, Z
     60e:	82 30       	cpi	r24, 0x02	; 2
     610:	49 f4       	brne	.+18     	; 0x624 <calculator_zero1_handler+0x34>
     612:	ea 81       	ldd	r30, Y+2	; 0x02
     614:	fb 81       	ldd	r31, Y+3	; 0x03
     616:	8e e8       	ldi	r24, 0x8E	; 142
     618:	92 e0       	ldi	r25, 0x02	; 2
     61a:	90 87       	std	Z+8, r25	; 0x08
     61c:	87 83       	std	Z+7, r24	; 0x07
     61e:	82 e0       	ldi	r24, 0x02	; 2
     620:	8e 83       	std	Y+6, r24	; 0x06
     622:	26 c0       	rjmp	.+76     	; 0x670 <calculator_zero1_handler+0x80>
	CONSUME_EVENT(DIGIT_0,																		NO_ACTION) ;
     624:	ec 81       	ldd	r30, Y+4	; 0x04
     626:	fd 81       	ldd	r31, Y+5	; 0x05
     628:	80 81       	ld	r24, Z
     62a:	86 30       	cpi	r24, 0x06	; 6
     62c:	19 f4       	brne	.+6      	; 0x634 <calculator_zero1_handler+0x44>
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	8e 83       	std	Y+6, r24	; 0x06
     632:	1e c0       	rjmp	.+60     	; 0x670 <calculator_zero1_handler+0x80>
	TRANSITION_ON(DIGIT_1_9,	UNCONDITIONALLY,						TO(int1),				NO_ACTION) ;
     634:	ec 81       	ldd	r30, Y+4	; 0x04
     636:	fd 81       	ldd	r31, Y+5	; 0x05
     638:	80 81       	ld	r24, Z
     63a:	87 30       	cpi	r24, 0x07	; 7
     63c:	49 f4       	brne	.+18     	; 0x650 <calculator_zero1_handler+0x60>
     63e:	ea 81       	ldd	r30, Y+2	; 0x02
     640:	fb 81       	ldd	r31, Y+3	; 0x03
     642:	84 ef       	ldi	r24, 0xF4	; 244
     644:	91 e0       	ldi	r25, 0x01	; 1
     646:	90 87       	std	Z+8, r25	; 0x08
     648:	87 83       	std	Z+7, r24	; 0x07
     64a:	82 e0       	ldi	r24, 0x02	; 2
     64c:	8e 83       	std	Y+6, r24	; 0x06
     64e:	10 c0       	rjmp	.+32     	; 0x670 <calculator_zero1_handler+0x80>
	TRANSITION_ON(POINT,		UNCONDITIONALLY,						TO(frac1),				NO_ACTION) ;
     650:	ec 81       	ldd	r30, Y+4	; 0x04
     652:	fd 81       	ldd	r31, Y+5	; 0x05
     654:	80 81       	ld	r24, Z
     656:	88 30       	cpi	r24, 0x08	; 8
     658:	49 f4       	brne	.+18     	; 0x66c <calculator_zero1_handler+0x7c>
     65a:	ea 81       	ldd	r30, Y+2	; 0x02
     65c:	fb 81       	ldd	r31, Y+3	; 0x03
     65e:	8c e0       	ldi	r24, 0x0C	; 12
     660:	92 e0       	ldi	r25, 0x02	; 2
     662:	90 87       	std	Z+8, r25	; 0x08
     664:	87 83       	std	Z+7, r24	; 0x07
     666:	82 e0       	ldi	r24, 0x02	; 2
     668:	8e 83       	std	Y+6, r24	; 0x06
     66a:	02 c0       	rjmp	.+4      	; 0x670 <calculator_zero1_handler+0x80>
}
END_DEFINE_STATE()
     66c:	89 81       	ldd	r24, Y+1	; 0x01
     66e:	8e 83       	std	Y+6, r24	; 0x06
     670:	8e 81       	ldd	r24, Y+6	; 0x06
     672:	26 96       	adiw	r28, 0x06	; 6
     674:	0f b6       	in	r0, 0x3f	; 63
     676:	f8 94       	cli
     678:	de bf       	out	0x3e, r29	; 62
     67a:	0f be       	out	0x3f, r0	; 63
     67c:	cd bf       	out	0x3d, r28	; 61
     67e:	cf 91       	pop	r28
     680:	df 91       	pop	r29
     682:	08 95       	ret

00000684 <calculator_int1_handler>:


DEFINE_STATE(int1)
     684:	df 93       	push	r29
     686:	cf 93       	push	r28
     688:	00 d0       	rcall	.+0      	; 0x68a <calculator_int1_handler+0x6>
     68a:	00 d0       	rcall	.+0      	; 0x68c <calculator_int1_handler+0x8>
     68c:	00 d0       	rcall	.+0      	; 0x68e <calculator_int1_handler+0xa>
     68e:	cd b7       	in	r28, 0x3d	; 61
     690:	de b7       	in	r29, 0x3e	; 62
     692:	9b 83       	std	Y+3, r25	; 0x03
     694:	8a 83       	std	Y+2, r24	; 0x02
     696:	7d 83       	std	Y+5, r23	; 0x05
     698:	6c 83       	std	Y+4, r22	; 0x04
     69a:	19 82       	std	Y+1, r1	; 0x01
{
	TRANSITION_ON(POINT,		UNCONDITIONALLY,						TO(frac1),				NO_ACTION) ;
     69c:	ec 81       	ldd	r30, Y+4	; 0x04
     69e:	fd 81       	ldd	r31, Y+5	; 0x05
     6a0:	80 81       	ld	r24, Z
     6a2:	88 30       	cpi	r24, 0x08	; 8
     6a4:	49 f4       	brne	.+18     	; 0x6b8 <calculator_int1_handler+0x34>
     6a6:	ea 81       	ldd	r30, Y+2	; 0x02
     6a8:	fb 81       	ldd	r31, Y+3	; 0x03
     6aa:	8c e0       	ldi	r24, 0x0C	; 12
     6ac:	92 e0       	ldi	r25, 0x02	; 2
     6ae:	90 87       	std	Z+8, r25	; 0x08
     6b0:	87 83       	std	Z+7, r24	; 0x07
     6b2:	82 e0       	ldi	r24, 0x02	; 2
     6b4:	8e 83       	std	Y+6, r24	; 0x06
     6b6:	02 c0       	rjmp	.+4      	; 0x6bc <calculator_int1_handler+0x38>
}
END_DEFINE_STATE()
     6b8:	89 81       	ldd	r24, Y+1	; 0x01
     6ba:	8e 83       	std	Y+6, r24	; 0x06
     6bc:	8e 81       	ldd	r24, Y+6	; 0x06
     6be:	26 96       	adiw	r28, 0x06	; 6
     6c0:	0f b6       	in	r0, 0x3f	; 63
     6c2:	f8 94       	cli
     6c4:	de bf       	out	0x3e, r29	; 62
     6c6:	0f be       	out	0x3f, r0	; 63
     6c8:	cd bf       	out	0x3d, r28	; 61
     6ca:	cf 91       	pop	r28
     6cc:	df 91       	pop	r29
     6ce:	08 95       	ret

000006d0 <calculator_frac1_handler>:


DEFINE_STATE(frac1)
     6d0:	df 93       	push	r29
     6d2:	cf 93       	push	r28
     6d4:	00 d0       	rcall	.+0      	; 0x6d6 <calculator_frac1_handler+0x6>
     6d6:	00 d0       	rcall	.+0      	; 0x6d8 <calculator_frac1_handler+0x8>
     6d8:	00 d0       	rcall	.+0      	; 0x6da <calculator_frac1_handler+0xa>
     6da:	cd b7       	in	r28, 0x3d	; 61
     6dc:	de b7       	in	r29, 0x3e	; 62
     6de:	9b 83       	std	Y+3, r25	; 0x03
     6e0:	8a 83       	std	Y+2, r24	; 0x02
     6e2:	7d 83       	std	Y+5, r23	; 0x05
     6e4:	6c 83       	std	Y+4, r22	; 0x04
     6e6:	19 82       	std	Y+1, r1	; 0x01
{
	CONSUME_EVENT(POINT,																		NO_ACTION) ;
     6e8:	ec 81       	ldd	r30, Y+4	; 0x04
     6ea:	fd 81       	ldd	r31, Y+5	; 0x05
     6ec:	80 81       	ld	r24, Z
     6ee:	88 30       	cpi	r24, 0x08	; 8
     6f0:	19 f4       	brne	.+6      	; 0x6f8 <calculator_frac1_handler+0x28>
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	8e 83       	std	Y+6, r24	; 0x06
     6f6:	02 c0       	rjmp	.+4      	; 0x6fc <calculator_frac1_handler+0x2c>
}
END_DEFINE_STATE()
     6f8:	89 81       	ldd	r24, Y+1	; 0x01
     6fa:	8e 83       	std	Y+6, r24	; 0x06
     6fc:	8e 81       	ldd	r24, Y+6	; 0x06
     6fe:	26 96       	adiw	r28, 0x06	; 6
     700:	0f b6       	in	r0, 0x3f	; 63
     702:	f8 94       	cli
     704:	de bf       	out	0x3e, r29	; 62
     706:	0f be       	out	0x3f, r0	; 63
     708:	cd bf       	out	0x3d, r28	; 61
     70a:	cf 91       	pop	r28
     70c:	df 91       	pop	r29
     70e:	08 95       	ret

00000710 <calculator_error_handler>:


DEFINE_STATE(error)
     710:	df 93       	push	r29
     712:	cf 93       	push	r28
     714:	00 d0       	rcall	.+0      	; 0x716 <calculator_error_handler+0x6>
     716:	00 d0       	rcall	.+0      	; 0x718 <calculator_error_handler+0x8>
     718:	00 d0       	rcall	.+0      	; 0x71a <calculator_error_handler+0xa>
     71a:	cd b7       	in	r28, 0x3d	; 61
     71c:	de b7       	in	r29, 0x3e	; 62
     71e:	9b 83       	std	Y+3, r25	; 0x03
     720:	8a 83       	std	Y+2, r24	; 0x02
     722:	7d 83       	std	Y+5, r23	; 0x05
     724:	6c 83       	std	Y+4, r22	; 0x04
     726:	19 82       	std	Y+1, r1	; 0x01
{
	INITIAL_TRANSITION(TO(frac2),																NO_ACTION) ;
     728:	ec 81       	ldd	r30, Y+4	; 0x04
     72a:	fd 81       	ldd	r31, Y+5	; 0x05
     72c:	80 81       	ld	r24, Z
     72e:	82 30       	cpi	r24, 0x02	; 2
     730:	49 f4       	brne	.+18     	; 0x744 <calculator_error_handler+0x34>
     732:	ea 81       	ldd	r30, Y+2	; 0x02
     734:	fb 81       	ldd	r31, Y+3	; 0x03
     736:	8d eb       	ldi	r24, 0xBD	; 189
     738:	92 e0       	ldi	r25, 0x02	; 2
     73a:	90 87       	std	Z+8, r25	; 0x08
     73c:	87 83       	std	Z+7, r24	; 0x07
     73e:	82 e0       	ldi	r24, 0x02	; 2
     740:	8e 83       	std	Y+6, r24	; 0x06
     742:	02 c0       	rjmp	.+4      	; 0x748 <calculator_error_handler+0x38>
}
END_DEFINE_STATE()
     744:	89 81       	ldd	r24, Y+1	; 0x01
     746:	8e 83       	std	Y+6, r24	; 0x06
     748:	8e 81       	ldd	r24, Y+6	; 0x06
     74a:	26 96       	adiw	r28, 0x06	; 6
     74c:	0f b6       	in	r0, 0x3f	; 63
     74e:	f8 94       	cli
     750:	de bf       	out	0x3e, r29	; 62
     752:	0f be       	out	0x3f, r0	; 63
     754:	cd bf       	out	0x3d, r28	; 61
     756:	cf 91       	pop	r28
     758:	df 91       	pop	r29
     75a:	08 95       	ret

0000075c <calculator_opEntered_handler>:


DEFINE_STATE(opEntered)
     75c:	df 93       	push	r29
     75e:	cf 93       	push	r28
     760:	00 d0       	rcall	.+0      	; 0x762 <calculator_opEntered_handler+0x6>
     762:	00 d0       	rcall	.+0      	; 0x764 <calculator_opEntered_handler+0x8>
     764:	00 d0       	rcall	.+0      	; 0x766 <calculator_opEntered_handler+0xa>
     766:	cd b7       	in	r28, 0x3d	; 61
     768:	de b7       	in	r29, 0x3e	; 62
     76a:	9b 83       	std	Y+3, r25	; 0x03
     76c:	8a 83       	std	Y+2, r24	; 0x02
     76e:	7d 83       	std	Y+5, r23	; 0x05
     770:	6c 83       	std	Y+4, r22	; 0x04
     772:	19 82       	std	Y+1, r1	; 0x01
{
	TRANSITION_ON(OPERATION,	IF(EVENT_IS(keyEvent_t)->key == '-'),	TO(negated2),			NO_ACTION) ;
     774:	ec 81       	ldd	r30, Y+4	; 0x04
     776:	fd 81       	ldd	r31, Y+5	; 0x05
     778:	80 81       	ld	r24, Z
     77a:	89 30       	cpi	r24, 0x09	; 9
     77c:	71 f4       	brne	.+28     	; 0x79a <calculator_opEntered_handler+0x3e>
     77e:	ec 81       	ldd	r30, Y+4	; 0x04
     780:	fd 81       	ldd	r31, Y+5	; 0x05
     782:	81 81       	ldd	r24, Z+1	; 0x01
     784:	8d 32       	cpi	r24, 0x2D	; 45
     786:	49 f4       	brne	.+18     	; 0x79a <calculator_opEntered_handler+0x3e>
     788:	ea 81       	ldd	r30, Y+2	; 0x02
     78a:	fb 81       	ldd	r31, Y+3	; 0x03
     78c:	8b e5       	ldi	r24, 0x5B	; 91
     78e:	92 e0       	ldi	r25, 0x02	; 2
     790:	90 87       	std	Z+8, r25	; 0x08
     792:	87 83       	std	Z+7, r24	; 0x07
     794:	82 e0       	ldi	r24, 0x02	; 2
     796:	8e 83       	std	Y+6, r24	; 0x06
     798:	2c c0       	rjmp	.+88     	; 0x7f2 <calculator_opEntered_handler+0x96>
	TRANSITION_ON(DIGIT_0,		UNCONDITIONALLY,						TO(zero2),				NO_ACTION) ;
     79a:	ec 81       	ldd	r30, Y+4	; 0x04
     79c:	fd 81       	ldd	r31, Y+5	; 0x05
     79e:	80 81       	ld	r24, Z
     7a0:	86 30       	cpi	r24, 0x06	; 6
     7a2:	49 f4       	brne	.+18     	; 0x7b6 <calculator_opEntered_handler+0x5a>
     7a4:	ea 81       	ldd	r30, Y+2	; 0x02
     7a6:	fb 81       	ldd	r31, Y+3	; 0x03
     7a8:	8e e8       	ldi	r24, 0x8E	; 142
     7aa:	92 e0       	ldi	r25, 0x02	; 2
     7ac:	90 87       	std	Z+8, r25	; 0x08
     7ae:	87 83       	std	Z+7, r24	; 0x07
     7b0:	82 e0       	ldi	r24, 0x02	; 2
     7b2:	8e 83       	std	Y+6, r24	; 0x06
     7b4:	1e c0       	rjmp	.+60     	; 0x7f2 <calculator_opEntered_handler+0x96>
	TRANSITION_ON(DIGIT_1_9,	UNCONDITIONALLY,						TO(int2),				NO_ACTION) ;
     7b6:	ec 81       	ldd	r30, Y+4	; 0x04
     7b8:	fd 81       	ldd	r31, Y+5	; 0x05
     7ba:	80 81       	ld	r24, Z
     7bc:	87 30       	cpi	r24, 0x07	; 7
     7be:	49 f4       	brne	.+18     	; 0x7d2 <calculator_opEntered_handler+0x76>
     7c0:	ea 81       	ldd	r30, Y+2	; 0x02
     7c2:	fb 81       	ldd	r31, Y+3	; 0x03
     7c4:	85 ea       	ldi	r24, 0xA5	; 165
     7c6:	92 e0       	ldi	r25, 0x02	; 2
     7c8:	90 87       	std	Z+8, r25	; 0x08
     7ca:	87 83       	std	Z+7, r24	; 0x07
     7cc:	82 e0       	ldi	r24, 0x02	; 2
     7ce:	8e 83       	std	Y+6, r24	; 0x06
     7d0:	10 c0       	rjmp	.+32     	; 0x7f2 <calculator_opEntered_handler+0x96>
	TRANSITION_ON(POINT,		UNCONDITIONALLY,						TO(frac2),				NO_ACTION) ;
     7d2:	ec 81       	ldd	r30, Y+4	; 0x04
     7d4:	fd 81       	ldd	r31, Y+5	; 0x05
     7d6:	80 81       	ld	r24, Z
     7d8:	88 30       	cpi	r24, 0x08	; 8
     7da:	49 f4       	brne	.+18     	; 0x7ee <calculator_opEntered_handler+0x92>
     7dc:	ea 81       	ldd	r30, Y+2	; 0x02
     7de:	fb 81       	ldd	r31, Y+3	; 0x03
     7e0:	8d eb       	ldi	r24, 0xBD	; 189
     7e2:	92 e0       	ldi	r25, 0x02	; 2
     7e4:	90 87       	std	Z+8, r25	; 0x08
     7e6:	87 83       	std	Z+7, r24	; 0x07
     7e8:	82 e0       	ldi	r24, 0x02	; 2
     7ea:	8e 83       	std	Y+6, r24	; 0x06
     7ec:	02 c0       	rjmp	.+4      	; 0x7f2 <calculator_opEntered_handler+0x96>
}
END_DEFINE_STATE()
     7ee:	89 81       	ldd	r24, Y+1	; 0x01
     7f0:	8e 83       	std	Y+6, r24	; 0x06
     7f2:	8e 81       	ldd	r24, Y+6	; 0x06
     7f4:	26 96       	adiw	r28, 0x06	; 6
     7f6:	0f b6       	in	r0, 0x3f	; 63
     7f8:	f8 94       	cli
     7fa:	de bf       	out	0x3e, r29	; 62
     7fc:	0f be       	out	0x3f, r0	; 63
     7fe:	cd bf       	out	0x3d, r28	; 61
     800:	cf 91       	pop	r28
     802:	df 91       	pop	r29
     804:	08 95       	ret

00000806 <calculator_negated2_handler>:


DEFINE_STATE(negated2)
     806:	df 93       	push	r29
     808:	cf 93       	push	r28
     80a:	00 d0       	rcall	.+0      	; 0x80c <calculator_negated2_handler+0x6>
     80c:	00 d0       	rcall	.+0      	; 0x80e <calculator_negated2_handler+0x8>
     80e:	00 d0       	rcall	.+0      	; 0x810 <calculator_negated2_handler+0xa>
     810:	cd b7       	in	r28, 0x3d	; 61
     812:	de b7       	in	r29, 0x3e	; 62
     814:	9b 83       	std	Y+3, r25	; 0x03
     816:	8a 83       	std	Y+2, r24	; 0x02
     818:	7d 83       	std	Y+5, r23	; 0x05
     81a:	6c 83       	std	Y+4, r22	; 0x04
     81c:	19 82       	std	Y+1, r1	; 0x01
{
	TRANSITION_ON(CLEAR_ENTRY,	UNCONDITIONALLY,						TO(opEntered),			NO_ACTION) ;
     81e:	ec 81       	ldd	r30, Y+4	; 0x04
     820:	fd 81       	ldd	r31, Y+5	; 0x05
     822:	80 81       	ld	r24, Z
     824:	85 30       	cpi	r24, 0x05	; 5
     826:	49 f4       	brne	.+18     	; 0x83a <calculator_negated2_handler+0x34>
     828:	ea 81       	ldd	r30, Y+2	; 0x02
     82a:	fb 81       	ldd	r31, Y+3	; 0x03
     82c:	80 e4       	ldi	r24, 0x40	; 64
     82e:	92 e0       	ldi	r25, 0x02	; 2
     830:	90 87       	std	Z+8, r25	; 0x08
     832:	87 83       	std	Z+7, r24	; 0x07
     834:	82 e0       	ldi	r24, 0x02	; 2
     836:	8e 83       	std	Y+6, r24	; 0x06
     838:	39 c0       	rjmp	.+114    	; 0x8ac <calculator_negated2_handler+0xa6>
	TRANSITION_ON(DIGIT_0,		UNCONDITIONALLY,						TO(zero2),				NO_ACTION) ;
     83a:	ec 81       	ldd	r30, Y+4	; 0x04
     83c:	fd 81       	ldd	r31, Y+5	; 0x05
     83e:	80 81       	ld	r24, Z
     840:	86 30       	cpi	r24, 0x06	; 6
     842:	49 f4       	brne	.+18     	; 0x856 <calculator_negated2_handler+0x50>
     844:	ea 81       	ldd	r30, Y+2	; 0x02
     846:	fb 81       	ldd	r31, Y+3	; 0x03
     848:	8e e8       	ldi	r24, 0x8E	; 142
     84a:	92 e0       	ldi	r25, 0x02	; 2
     84c:	90 87       	std	Z+8, r25	; 0x08
     84e:	87 83       	std	Z+7, r24	; 0x07
     850:	82 e0       	ldi	r24, 0x02	; 2
     852:	8e 83       	std	Y+6, r24	; 0x06
     854:	2b c0       	rjmp	.+86     	; 0x8ac <calculator_negated2_handler+0xa6>
	TRANSITION_ON(DIGIT_1_9,	UNCONDITIONALLY,						TO(int2),				NO_ACTION) ;
     856:	ec 81       	ldd	r30, Y+4	; 0x04
     858:	fd 81       	ldd	r31, Y+5	; 0x05
     85a:	80 81       	ld	r24, Z
     85c:	87 30       	cpi	r24, 0x07	; 7
     85e:	49 f4       	brne	.+18     	; 0x872 <calculator_negated2_handler+0x6c>
     860:	ea 81       	ldd	r30, Y+2	; 0x02
     862:	fb 81       	ldd	r31, Y+3	; 0x03
     864:	85 ea       	ldi	r24, 0xA5	; 165
     866:	92 e0       	ldi	r25, 0x02	; 2
     868:	90 87       	std	Z+8, r25	; 0x08
     86a:	87 83       	std	Z+7, r24	; 0x07
     86c:	82 e0       	ldi	r24, 0x02	; 2
     86e:	8e 83       	std	Y+6, r24	; 0x06
     870:	1d c0       	rjmp	.+58     	; 0x8ac <calculator_negated2_handler+0xa6>
	TRANSITION_ON(POINT,		UNCONDITIONALLY,						TO(frac2),				NO_ACTION) ;
     872:	ec 81       	ldd	r30, Y+4	; 0x04
     874:	fd 81       	ldd	r31, Y+5	; 0x05
     876:	80 81       	ld	r24, Z
     878:	88 30       	cpi	r24, 0x08	; 8
     87a:	49 f4       	brne	.+18     	; 0x88e <calculator_negated2_handler+0x88>
     87c:	ea 81       	ldd	r30, Y+2	; 0x02
     87e:	fb 81       	ldd	r31, Y+3	; 0x03
     880:	8d eb       	ldi	r24, 0xBD	; 189
     882:	92 e0       	ldi	r25, 0x02	; 2
     884:	90 87       	std	Z+8, r25	; 0x08
     886:	87 83       	std	Z+7, r24	; 0x07
     888:	82 e0       	ldi	r24, 0x02	; 2
     88a:	8e 83       	std	Y+6, r24	; 0x06
     88c:	0f c0       	rjmp	.+30     	; 0x8ac <calculator_negated2_handler+0xa6>
	CONSUME_EVENT_IF(OPERATION,	IF(EVENT_IS(keyEvent_t)->key == '-'),							NO_ACTION) ;
     88e:	ec 81       	ldd	r30, Y+4	; 0x04
     890:	fd 81       	ldd	r31, Y+5	; 0x05
     892:	80 81       	ld	r24, Z
     894:	89 30       	cpi	r24, 0x09	; 9
     896:	41 f4       	brne	.+16     	; 0x8a8 <calculator_negated2_handler+0xa2>
     898:	ec 81       	ldd	r30, Y+4	; 0x04
     89a:	fd 81       	ldd	r31, Y+5	; 0x05
     89c:	81 81       	ldd	r24, Z+1	; 0x01
     89e:	8d 32       	cpi	r24, 0x2D	; 45
     8a0:	19 f4       	brne	.+6      	; 0x8a8 <calculator_negated2_handler+0xa2>
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	8e 83       	std	Y+6, r24	; 0x06
     8a6:	02 c0       	rjmp	.+4      	; 0x8ac <calculator_negated2_handler+0xa6>
}
END_DEFINE_STATE()
     8a8:	89 81       	ldd	r24, Y+1	; 0x01
     8aa:	8e 83       	std	Y+6, r24	; 0x06
     8ac:	8e 81       	ldd	r24, Y+6	; 0x06
     8ae:	26 96       	adiw	r28, 0x06	; 6
     8b0:	0f b6       	in	r0, 0x3f	; 63
     8b2:	f8 94       	cli
     8b4:	de bf       	out	0x3e, r29	; 62
     8b6:	0f be       	out	0x3f, r0	; 63
     8b8:	cd bf       	out	0x3d, r28	; 61
     8ba:	cf 91       	pop	r28
     8bc:	df 91       	pop	r29
     8be:	08 95       	ret

000008c0 <doCalculation>:


uint8_t doCalculation(	uint8_t type)
{
     8c0:	df 93       	push	r29
     8c2:	cf 93       	push	r28
     8c4:	00 d0       	rcall	.+0      	; 0x8c6 <doCalculation+0x6>
     8c6:	00 d0       	rcall	.+0      	; 0x8c8 <doCalculation+0x8>
     8c8:	cd b7       	in	r28, 0x3d	; 61
     8ca:	de b7       	in	r29, 0x3e	; 62
     8cc:	89 83       	std	Y+1, r24	; 0x01
	switch(type)
     8ce:	89 81       	ldd	r24, Y+1	; 0x01
     8d0:	28 2f       	mov	r18, r24
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	3c 83       	std	Y+4, r19	; 0x04
     8d6:	2b 83       	std	Y+3, r18	; 0x03
     8d8:	8b 81       	ldd	r24, Y+3	; 0x03
     8da:	9c 81       	ldd	r25, Y+4	; 0x04
     8dc:	8b 32       	cpi	r24, 0x2B	; 43
     8de:	91 05       	cpc	r25, r1
     8e0:	b1 f0       	breq	.+44     	; 0x90e <doCalculation+0x4e>
     8e2:	2b 81       	ldd	r18, Y+3	; 0x03
     8e4:	3c 81       	ldd	r19, Y+4	; 0x04
     8e6:	2c 32       	cpi	r18, 0x2C	; 44
     8e8:	31 05       	cpc	r19, r1
     8ea:	34 f4       	brge	.+12     	; 0x8f8 <doCalculation+0x38>
     8ec:	8b 81       	ldd	r24, Y+3	; 0x03
     8ee:	9c 81       	ldd	r25, Y+4	; 0x04
     8f0:	8a 32       	cpi	r24, 0x2A	; 42
     8f2:	91 05       	cpc	r25, r1
     8f4:	91 f0       	breq	.+36     	; 0x91a <doCalculation+0x5a>
     8f6:	17 c0       	rjmp	.+46     	; 0x926 <doCalculation+0x66>
     8f8:	2b 81       	ldd	r18, Y+3	; 0x03
     8fa:	3c 81       	ldd	r19, Y+4	; 0x04
     8fc:	2d 32       	cpi	r18, 0x2D	; 45
     8fe:	31 05       	cpc	r19, r1
     900:	49 f0       	breq	.+18     	; 0x914 <doCalculation+0x54>
     902:	8b 81       	ldd	r24, Y+3	; 0x03
     904:	9c 81       	ldd	r25, Y+4	; 0x04
     906:	8f 32       	cpi	r24, 0x2F	; 47
     908:	91 05       	cpc	r25, r1
     90a:	51 f0       	breq	.+20     	; 0x920 <doCalculation+0x60>
     90c:	0c c0       	rjmp	.+24     	; 0x926 <doCalculation+0x66>
	{
		case '+': { return true ; }
     90e:	91 e0       	ldi	r25, 0x01	; 1
     910:	9a 83       	std	Y+2, r25	; 0x02
     912:	0a c0       	rjmp	.+20     	; 0x928 <doCalculation+0x68>
		case '-': { return true ; }
     914:	21 e0       	ldi	r18, 0x01	; 1
     916:	2a 83       	std	Y+2, r18	; 0x02
     918:	07 c0       	rjmp	.+14     	; 0x928 <doCalculation+0x68>
		case '*': { return true ; }
     91a:	31 e0       	ldi	r19, 0x01	; 1
     91c:	3a 83       	std	Y+2, r19	; 0x02
     91e:	04 c0       	rjmp	.+8      	; 0x928 <doCalculation+0x68>
		case '/': { return true ; }
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	8a 83       	std	Y+2, r24	; 0x02
     924:	01 c0       	rjmp	.+2      	; 0x928 <doCalculation+0x68>
		default:  { return false ; }
     926:	1a 82       	std	Y+2, r1	; 0x02
     928:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
     92a:	0f 90       	pop	r0
     92c:	0f 90       	pop	r0
     92e:	0f 90       	pop	r0
     930:	0f 90       	pop	r0
     932:	cf 91       	pop	r28
     934:	df 91       	pop	r29
     936:	08 95       	ret

00000938 <calculator_operand2_handler>:


DEFINE_STATE(operand2)
     938:	df 93       	push	r29
     93a:	cf 93       	push	r28
     93c:	cd b7       	in	r28, 0x3d	; 61
     93e:	de b7       	in	r29, 0x3e	; 62
     940:	27 97       	sbiw	r28, 0x07	; 7
     942:	0f b6       	in	r0, 0x3f	; 63
     944:	f8 94       	cli
     946:	de bf       	out	0x3e, r29	; 62
     948:	0f be       	out	0x3f, r0	; 63
     94a:	cd bf       	out	0x3d, r28	; 61
     94c:	9c 83       	std	Y+4, r25	; 0x04
     94e:	8b 83       	std	Y+3, r24	; 0x03
     950:	7e 83       	std	Y+6, r23	; 0x06
     952:	6d 83       	std	Y+5, r22	; 0x05
     954:	1a 82       	std	Y+2, r1	; 0x02
{
	TRANSITION_ON(CLEAR_ENTRY,	UNCONDITIONALLY,						TO(opEntered),			NO_ACTION) ;
     956:	ed 81       	ldd	r30, Y+5	; 0x05
     958:	fe 81       	ldd	r31, Y+6	; 0x06
     95a:	80 81       	ld	r24, Z
     95c:	85 30       	cpi	r24, 0x05	; 5
     95e:	49 f4       	brne	.+18     	; 0x972 <calculator_operand2_handler+0x3a>
     960:	eb 81       	ldd	r30, Y+3	; 0x03
     962:	fc 81       	ldd	r31, Y+4	; 0x04
     964:	80 e4       	ldi	r24, 0x40	; 64
     966:	92 e0       	ldi	r25, 0x02	; 2
     968:	90 87       	std	Z+8, r25	; 0x08
     96a:	87 83       	std	Z+7, r24	; 0x07
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	8f 83       	std	Y+7, r24	; 0x07
     970:	3c c0       	rjmp	.+120    	; 0x9ea <calculator_operand2_handler+0xb2>

	HANDLE_STATE_EVENTS
     972:	ed 81       	ldd	r30, Y+5	; 0x05
     974:	fe 81       	ldd	r31, Y+6	; 0x06
     976:	80 81       	ld	r24, Z
     978:	88 2f       	mov	r24, r24
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	09 97       	sbiw	r24, 0x09	; 9
     97e:	82 30       	cpi	r24, 0x02	; 2
     980:	91 05       	cpc	r25, r1
     982:	88 f5       	brcc	.+98     	; 0x9e6 <calculator_operand2_handler+0xae>
	{
		EVENT(OPERATION)
		EVENT(EQUALS)
		{
			uint8_t goodCalc = doCalculation(EVENT_IS(keyEvent_t)->key) ;
     984:	ed 81       	ldd	r30, Y+5	; 0x05
     986:	fe 81       	ldd	r31, Y+6	; 0x06
     988:	81 81       	ldd	r24, Z+1	; 0x01
     98a:	0e 94 60 04 	call	0x8c0	; 0x8c0 <doCalculation>
     98e:	89 83       	std	Y+1, r24	; 0x01

			if(goodCalc)
     990:	89 81       	ldd	r24, Y+1	; 0x01
     992:	88 23       	and	r24, r24
     994:	f9 f0       	breq	.+62     	; 0x9d4 <calculator_operand2_handler+0x9c>
			{
				TRANSITION_ON(OPERATION,	UNCONDITIONALLY,			TO(opEntered),			NO_ACTION) ;
     996:	ed 81       	ldd	r30, Y+5	; 0x05
     998:	fe 81       	ldd	r31, Y+6	; 0x06
     99a:	80 81       	ld	r24, Z
     99c:	89 30       	cpi	r24, 0x09	; 9
     99e:	49 f4       	brne	.+18     	; 0x9b2 <calculator_operand2_handler+0x7a>
     9a0:	eb 81       	ldd	r30, Y+3	; 0x03
     9a2:	fc 81       	ldd	r31, Y+4	; 0x04
     9a4:	80 e4       	ldi	r24, 0x40	; 64
     9a6:	92 e0       	ldi	r25, 0x02	; 2
     9a8:	90 87       	std	Z+8, r25	; 0x08
     9aa:	87 83       	std	Z+7, r24	; 0x07
     9ac:	82 e0       	ldi	r24, 0x02	; 2
     9ae:	8f 83       	std	Y+7, r24	; 0x07
     9b0:	1c c0       	rjmp	.+56     	; 0x9ea <calculator_operand2_handler+0xb2>
				TRANSITION_ON(EQUALS,		UNCONDITIONALLY,			TO(result),				NO_ACTION) ;
     9b2:	ed 81       	ldd	r30, Y+5	; 0x05
     9b4:	fe 81       	ldd	r31, Y+6	; 0x06
     9b6:	80 81       	ld	r24, Z
     9b8:	8a 30       	cpi	r24, 0x0A	; 10
     9ba:	49 f4       	brne	.+18     	; 0x9ce <calculator_operand2_handler+0x96>
     9bc:	eb 81       	ldd	r30, Y+3	; 0x03
     9be:	fc 81       	ldd	r31, Y+4	; 0x04
     9c0:	87 e7       	ldi	r24, 0x77	; 119
     9c2:	91 e0       	ldi	r25, 0x01	; 1
     9c4:	90 87       	std	Z+8, r25	; 0x08
     9c6:	87 83       	std	Z+7, r24	; 0x07
     9c8:	82 e0       	ldi	r24, 0x02	; 2
     9ca:	8f 83       	std	Y+7, r24	; 0x07
     9cc:	0e c0       	rjmp	.+28     	; 0x9ea <calculator_operand2_handler+0xb2>
			else
			{
				TRANSITION_TO(error, NO_ACTION) ;
			}
		}
		EVENT_HANDLED
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	8f 83       	std	Y+7, r24	; 0x07
     9d2:	0b c0       	rjmp	.+22     	; 0x9ea <calculator_operand2_handler+0xb2>
				TRANSITION_ON(OPERATION,	UNCONDITIONALLY,			TO(opEntered),			NO_ACTION) ;
				TRANSITION_ON(EQUALS,		UNCONDITIONALLY,			TO(result),				NO_ACTION) ;
			}
			else
			{
				TRANSITION_TO(error, NO_ACTION) ;
     9d4:	eb 81       	ldd	r30, Y+3	; 0x03
     9d6:	fc 81       	ldd	r31, Y+4	; 0x04
     9d8:	84 e2       	ldi	r24, 0x24	; 36
     9da:	92 e0       	ldi	r25, 0x02	; 2
     9dc:	90 87       	std	Z+8, r25	; 0x08
     9de:	87 83       	std	Z+7, r24	; 0x07
     9e0:	82 e0       	ldi	r24, 0x02	; 2
     9e2:	8f 83       	std	Y+7, r24	; 0x07
     9e4:	02 c0       	rjmp	.+4      	; 0x9ea <calculator_operand2_handler+0xb2>
		}
		EVENT_HANDLED
	}
	HANDLE_STATE_EVENTS_DONE
}
END_DEFINE_STATE()
     9e6:	8a 81       	ldd	r24, Y+2	; 0x02
     9e8:	8f 83       	std	Y+7, r24	; 0x07
     9ea:	8f 81       	ldd	r24, Y+7	; 0x07
     9ec:	27 96       	adiw	r28, 0x07	; 7
     9ee:	0f b6       	in	r0, 0x3f	; 63
     9f0:	f8 94       	cli
     9f2:	de bf       	out	0x3e, r29	; 62
     9f4:	0f be       	out	0x3f, r0	; 63
     9f6:	cd bf       	out	0x3d, r28	; 61
     9f8:	cf 91       	pop	r28
     9fa:	df 91       	pop	r29
     9fc:	08 95       	ret

000009fe <calculator_zero2_handler>:


DEFINE_STATE(zero2)
     9fe:	df 93       	push	r29
     a00:	cf 93       	push	r28
     a02:	00 d0       	rcall	.+0      	; 0xa04 <calculator_zero2_handler+0x6>
     a04:	00 d0       	rcall	.+0      	; 0xa06 <calculator_zero2_handler+0x8>
     a06:	00 d0       	rcall	.+0      	; 0xa08 <calculator_zero2_handler+0xa>
     a08:	cd b7       	in	r28, 0x3d	; 61
     a0a:	de b7       	in	r29, 0x3e	; 62
     a0c:	9b 83       	std	Y+3, r25	; 0x03
     a0e:	8a 83       	std	Y+2, r24	; 0x02
     a10:	7d 83       	std	Y+5, r23	; 0x05
     a12:	6c 83       	std	Y+4, r22	; 0x04
     a14:	19 82       	std	Y+1, r1	; 0x01
{
	INITIAL_TRANSITION(TO(negated1),															NO_ACTION) ;
     a16:	ec 81       	ldd	r30, Y+4	; 0x04
     a18:	fd 81       	ldd	r31, Y+5	; 0x05
     a1a:	80 81       	ld	r24, Z
     a1c:	82 30       	cpi	r24, 0x02	; 2
     a1e:	49 f4       	brne	.+18     	; 0xa32 <calculator_zero2_handler+0x34>
     a20:	ea 81       	ldd	r30, Y+2	; 0x02
     a22:	fb 81       	ldd	r31, Y+3	; 0x03
     a24:	8a ea       	ldi	r24, 0xAA	; 170
     a26:	91 e0       	ldi	r25, 0x01	; 1
     a28:	90 87       	std	Z+8, r25	; 0x08
     a2a:	87 83       	std	Z+7, r24	; 0x07
     a2c:	82 e0       	ldi	r24, 0x02	; 2
     a2e:	8e 83       	std	Y+6, r24	; 0x06
     a30:	26 c0       	rjmp	.+76     	; 0xa7e <calculator_zero2_handler+0x80>
	CONSUME_EVENT(DIGIT_0,																		NO_ACTION) ;
     a32:	ec 81       	ldd	r30, Y+4	; 0x04
     a34:	fd 81       	ldd	r31, Y+5	; 0x05
     a36:	80 81       	ld	r24, Z
     a38:	86 30       	cpi	r24, 0x06	; 6
     a3a:	19 f4       	brne	.+6      	; 0xa42 <calculator_zero2_handler+0x44>
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	8e 83       	std	Y+6, r24	; 0x06
     a40:	1e c0       	rjmp	.+60     	; 0xa7e <calculator_zero2_handler+0x80>
	TRANSITION_ON(DIGIT_1_9,	UNCONDITIONALLY,						TO(int2),				NO_ACTION) ;
     a42:	ec 81       	ldd	r30, Y+4	; 0x04
     a44:	fd 81       	ldd	r31, Y+5	; 0x05
     a46:	80 81       	ld	r24, Z
     a48:	87 30       	cpi	r24, 0x07	; 7
     a4a:	49 f4       	brne	.+18     	; 0xa5e <calculator_zero2_handler+0x60>
     a4c:	ea 81       	ldd	r30, Y+2	; 0x02
     a4e:	fb 81       	ldd	r31, Y+3	; 0x03
     a50:	85 ea       	ldi	r24, 0xA5	; 165
     a52:	92 e0       	ldi	r25, 0x02	; 2
     a54:	90 87       	std	Z+8, r25	; 0x08
     a56:	87 83       	std	Z+7, r24	; 0x07
     a58:	82 e0       	ldi	r24, 0x02	; 2
     a5a:	8e 83       	std	Y+6, r24	; 0x06
     a5c:	10 c0       	rjmp	.+32     	; 0xa7e <calculator_zero2_handler+0x80>
	TRANSITION_ON(POINT,		UNCONDITIONALLY,						TO(frac2),				NO_ACTION) ;
     a5e:	ec 81       	ldd	r30, Y+4	; 0x04
     a60:	fd 81       	ldd	r31, Y+5	; 0x05
     a62:	80 81       	ld	r24, Z
     a64:	88 30       	cpi	r24, 0x08	; 8
     a66:	49 f4       	brne	.+18     	; 0xa7a <calculator_zero2_handler+0x7c>
     a68:	ea 81       	ldd	r30, Y+2	; 0x02
     a6a:	fb 81       	ldd	r31, Y+3	; 0x03
     a6c:	8d eb       	ldi	r24, 0xBD	; 189
     a6e:	92 e0       	ldi	r25, 0x02	; 2
     a70:	90 87       	std	Z+8, r25	; 0x08
     a72:	87 83       	std	Z+7, r24	; 0x07
     a74:	82 e0       	ldi	r24, 0x02	; 2
     a76:	8e 83       	std	Y+6, r24	; 0x06
     a78:	02 c0       	rjmp	.+4      	; 0xa7e <calculator_zero2_handler+0x80>
}
END_DEFINE_STATE()
     a7a:	89 81       	ldd	r24, Y+1	; 0x01
     a7c:	8e 83       	std	Y+6, r24	; 0x06
     a7e:	8e 81       	ldd	r24, Y+6	; 0x06
     a80:	26 96       	adiw	r28, 0x06	; 6
     a82:	0f b6       	in	r0, 0x3f	; 63
     a84:	f8 94       	cli
     a86:	de bf       	out	0x3e, r29	; 62
     a88:	0f be       	out	0x3f, r0	; 63
     a8a:	cd bf       	out	0x3d, r28	; 61
     a8c:	cf 91       	pop	r28
     a8e:	df 91       	pop	r29
     a90:	08 95       	ret

00000a92 <calculator_int2_handler>:


DEFINE_STATE(int2)
     a92:	df 93       	push	r29
     a94:	cf 93       	push	r28
     a96:	00 d0       	rcall	.+0      	; 0xa98 <calculator_int2_handler+0x6>
     a98:	00 d0       	rcall	.+0      	; 0xa9a <calculator_int2_handler+0x8>
     a9a:	00 d0       	rcall	.+0      	; 0xa9c <calculator_int2_handler+0xa>
     a9c:	cd b7       	in	r28, 0x3d	; 61
     a9e:	de b7       	in	r29, 0x3e	; 62
     aa0:	9b 83       	std	Y+3, r25	; 0x03
     aa2:	8a 83       	std	Y+2, r24	; 0x02
     aa4:	7d 83       	std	Y+5, r23	; 0x05
     aa6:	6c 83       	std	Y+4, r22	; 0x04
     aa8:	19 82       	std	Y+1, r1	; 0x01
{
	TRANSITION_ON(POINT,		UNCONDITIONALLY,						TO(frac2),				NO_ACTION) ;
     aaa:	ec 81       	ldd	r30, Y+4	; 0x04
     aac:	fd 81       	ldd	r31, Y+5	; 0x05
     aae:	80 81       	ld	r24, Z
     ab0:	88 30       	cpi	r24, 0x08	; 8
     ab2:	49 f4       	brne	.+18     	; 0xac6 <calculator_int2_handler+0x34>
     ab4:	ea 81       	ldd	r30, Y+2	; 0x02
     ab6:	fb 81       	ldd	r31, Y+3	; 0x03
     ab8:	8d eb       	ldi	r24, 0xBD	; 189
     aba:	92 e0       	ldi	r25, 0x02	; 2
     abc:	90 87       	std	Z+8, r25	; 0x08
     abe:	87 83       	std	Z+7, r24	; 0x07
     ac0:	82 e0       	ldi	r24, 0x02	; 2
     ac2:	8e 83       	std	Y+6, r24	; 0x06
     ac4:	02 c0       	rjmp	.+4      	; 0xaca <calculator_int2_handler+0x38>
}
END_DEFINE_STATE()
     ac6:	89 81       	ldd	r24, Y+1	; 0x01
     ac8:	8e 83       	std	Y+6, r24	; 0x06
     aca:	8e 81       	ldd	r24, Y+6	; 0x06
     acc:	26 96       	adiw	r28, 0x06	; 6
     ace:	0f b6       	in	r0, 0x3f	; 63
     ad0:	f8 94       	cli
     ad2:	de bf       	out	0x3e, r29	; 62
     ad4:	0f be       	out	0x3f, r0	; 63
     ad6:	cd bf       	out	0x3d, r28	; 61
     ad8:	cf 91       	pop	r28
     ada:	df 91       	pop	r29
     adc:	08 95       	ret

00000ade <calculator_frac2_handler>:


DEFINE_STATE(frac2)
     ade:	df 93       	push	r29
     ae0:	cf 93       	push	r28
     ae2:	00 d0       	rcall	.+0      	; 0xae4 <calculator_frac2_handler+0x6>
     ae4:	00 d0       	rcall	.+0      	; 0xae6 <calculator_frac2_handler+0x8>
     ae6:	00 d0       	rcall	.+0      	; 0xae8 <calculator_frac2_handler+0xa>
     ae8:	cd b7       	in	r28, 0x3d	; 61
     aea:	de b7       	in	r29, 0x3e	; 62
     aec:	9b 83       	std	Y+3, r25	; 0x03
     aee:	8a 83       	std	Y+2, r24	; 0x02
     af0:	7d 83       	std	Y+5, r23	; 0x05
     af2:	6c 83       	std	Y+4, r22	; 0x04
     af4:	19 82       	std	Y+1, r1	; 0x01
{
	CONSUME_EVENT(POINT,																		NO_ACTION) ;
     af6:	ec 81       	ldd	r30, Y+4	; 0x04
     af8:	fd 81       	ldd	r31, Y+5	; 0x05
     afa:	80 81       	ld	r24, Z
     afc:	88 30       	cpi	r24, 0x08	; 8
     afe:	19 f4       	brne	.+6      	; 0xb06 <calculator_frac2_handler+0x28>
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	8e 83       	std	Y+6, r24	; 0x06
     b04:	02 c0       	rjmp	.+4      	; 0xb0a <calculator_frac2_handler+0x2c>
}
END_DEFINE_STATE()
     b06:	89 81       	ldd	r24, Y+1	; 0x01
     b08:	8e 83       	std	Y+6, r24	; 0x06
     b0a:	8e 81       	ldd	r24, Y+6	; 0x06
     b0c:	26 96       	adiw	r28, 0x06	; 6
     b0e:	0f b6       	in	r0, 0x3f	; 63
     b10:	f8 94       	cli
     b12:	de bf       	out	0x3e, r29	; 62
     b14:	0f be       	out	0x3f, r0	; 63
     b16:	cd bf       	out	0x3d, r28	; 61
     b18:	cf 91       	pop	r28
     b1a:	df 91       	pop	r29
     b1c:	08 95       	ret

00000b1e <timeBomb_getEventQueueDepth>:
		uint8_t		timeout ;
		uint8_t		codeBeingEntered ;
		uint8_t		disarmCode ;
	END_STATE_MACHINE_VARIABLES() ;

	SET_EVENT_QUEUE_DEPTH(config_tbEVENT_QUEUE_DEPTH) ;
     b1e:	df 93       	push	r29
     b20:	cf 93       	push	r28
     b22:	cd b7       	in	r28, 0x3d	; 61
     b24:	de b7       	in	r29, 0x3e	; 62
     b26:	80 e1       	ldi	r24, 0x10	; 16
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	cf 91       	pop	r28
     b2c:	df 91       	pop	r29
     b2e:	08 95       	ret

00000b30 <timeBomb_constructor>:

	ADD_SUB_STATE(timing, PARENT_STATE(TOP)) ;

	ADD_SUB_STATE(BOOM, PARENT_STATE(TOP)) ;

END_STATE_MACHINE_DEFINITION() ;
     b30:	df 93       	push	r29
     b32:	cf 93       	push	r28
     b34:	00 d0       	rcall	.+0      	; 0xb36 <timeBomb_constructor+0x6>
     b36:	cd b7       	in	r28, 0x3d	; 61
     b38:	de b7       	in	r29, 0x3e	; 62
     b3a:	9a 83       	std	Y+2, r25	; 0x02
     b3c:	89 83       	std	Y+1, r24	; 0x01
     b3e:	e9 81       	ldd	r30, Y+1	; 0x01
     b40:	fa 81       	ldd	r31, Y+2	; 0x02
     b42:	8c ed       	ldi	r24, 0xDC	; 220
     b44:	92 e0       	ldi	r25, 0x02	; 2
     b46:	91 83       	std	Z+1, r25	; 0x01
     b48:	80 83       	st	Z, r24
     b4a:	e9 81       	ldd	r30, Y+1	; 0x01
     b4c:	fa 81       	ldd	r31, Y+2	; 0x02
     b4e:	8c ed       	ldi	r24, 0xDC	; 220
     b50:	92 e0       	ldi	r25, 0x02	; 2
     b52:	96 83       	std	Z+6, r25	; 0x06
     b54:	85 83       	std	Z+5, r24	; 0x05
     b56:	e9 81       	ldd	r30, Y+1	; 0x01
     b58:	fa 81       	ldd	r31, Y+2	; 0x02
     b5a:	12 82       	std	Z+2, r1	; 0x02
     b5c:	80 91 cd 02 	lds	r24, 0x02CD
     b60:	90 91 ce 02 	lds	r25, 0x02CE
     b64:	e9 81       	ldd	r30, Y+1	; 0x01
     b66:	fa 81       	ldd	r31, Y+2	; 0x02
     b68:	94 83       	std	Z+4, r25	; 0x04
     b6a:	83 83       	std	Z+3, r24	; 0x03
     b6c:	89 81       	ldd	r24, Y+1	; 0x01
     b6e:	9a 81       	ldd	r25, Y+2	; 0x02
     b70:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <timeBomb_constructor2>
     b74:	0f 90       	pop	r0
     b76:	0f 90       	pop	r0
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <timeBomb_destructor>:
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	00 d0       	rcall	.+0      	; 0xb84 <timeBomb_destructor+0x6>
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
     b88:	9a 83       	std	Y+2, r25	; 0x02
     b8a:	89 83       	std	Y+1, r24	; 0x01
     b8c:	89 81       	ldd	r24, Y+1	; 0x01
     b8e:	9a 81       	ldd	r25, Y+2	; 0x02
     b90:	0e 94 ed 05 	call	0xbda	; 0xbda <timeBomb_destructor2>
     b94:	0f 90       	pop	r0
     b96:	0f 90       	pop	r0
     b98:	cf 91       	pop	r28
     b9a:	df 91       	pop	r29
     b9c:	08 95       	ret

00000b9e <timeBomb_getMachineSize>:
     b9e:	df 93       	push	r29
     ba0:	cf 93       	push	r28
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62
     ba6:	84 e1       	ldi	r24, 0x14	; 20
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	cf 91       	pop	r28
     bac:	df 91       	pop	r29
     bae:	08 95       	ret

00000bb0 <timeBomb_constructor2>:


STATE_MACHINE_CONSTRUCTOR()
{
     bb0:	df 93       	push	r29
     bb2:	cf 93       	push	r28
     bb4:	00 d0       	rcall	.+0      	; 0xbb6 <timeBomb_constructor2+0x6>
     bb6:	cd b7       	in	r28, 0x3d	; 61
     bb8:	de b7       	in	r29, 0x3e	; 62
     bba:	9a 83       	std	Y+2, r25	; 0x02
     bbc:	89 83       	std	Y+1, r24	; 0x01
	self->timeout			= 0 ;
     bbe:	e9 81       	ldd	r30, Y+1	; 0x01
     bc0:	fa 81       	ldd	r31, Y+2	; 0x02
     bc2:	11 8a       	std	Z+17, r1	; 0x11
	self->codeBeingEntered	= 0 ;
     bc4:	e9 81       	ldd	r30, Y+1	; 0x01
     bc6:	fa 81       	ldd	r31, Y+2	; 0x02
     bc8:	12 8a       	std	Z+18, r1	; 0x12
	self->disarmCode		= 0 ;
     bca:	e9 81       	ldd	r30, Y+1	; 0x01
     bcc:	fa 81       	ldd	r31, Y+2	; 0x02
     bce:	13 8a       	std	Z+19, r1	; 0x13
}
     bd0:	0f 90       	pop	r0
     bd2:	0f 90       	pop	r0
     bd4:	cf 91       	pop	r28
     bd6:	df 91       	pop	r29
     bd8:	08 95       	ret

00000bda <timeBomb_destructor2>:


STATE_MACHINE_DESTRUCTOR()
{
     bda:	df 93       	push	r29
     bdc:	cf 93       	push	r28
     bde:	00 d0       	rcall	.+0      	; 0xbe0 <timeBomb_destructor2+0x6>
     be0:	cd b7       	in	r28, 0x3d	; 61
     be2:	de b7       	in	r29, 0x3e	; 62
     be4:	9a 83       	std	Y+2, r25	; 0x02
     be6:	89 83       	std	Y+1, r24	; 0x01
	(void)self ;	/* Nothing to do here */
}
     be8:	0f 90       	pop	r0
     bea:	0f 90       	pop	r0
     bec:	cf 91       	pop	r28
     bee:	df 91       	pop	r29
     bf0:	08 95       	ret

00000bf2 <updateDisplay>:


void updateDisplay(	uint8_t value)
{
     bf2:	df 93       	push	r29
     bf4:	cf 93       	push	r28
     bf6:	0f 92       	push	r0
     bf8:	cd b7       	in	r28, 0x3d	; 61
     bfa:	de b7       	in	r29, 0x3e	; 62
     bfc:	89 83       	std	Y+1, r24	; 0x01
	(void)value ;
}
     bfe:	0f 90       	pop	r0
     c00:	cf 91       	pop	r28
     c02:	df 91       	pop	r29
     c04:	08 95       	ret

00000c06 <timeBomb_TOP_handler>:


DEFINE_TOP_STATE()
     c06:	df 93       	push	r29
     c08:	cf 93       	push	r28
     c0a:	00 d0       	rcall	.+0      	; 0xc0c <timeBomb_TOP_handler+0x6>
     c0c:	00 d0       	rcall	.+0      	; 0xc0e <timeBomb_TOP_handler+0x8>
     c0e:	00 d0       	rcall	.+0      	; 0xc10 <timeBomb_TOP_handler+0xa>
     c10:	cd b7       	in	r28, 0x3d	; 61
     c12:	de b7       	in	r29, 0x3e	; 62
     c14:	9b 83       	std	Y+3, r25	; 0x03
     c16:	8a 83       	std	Y+2, r24	; 0x02
     c18:	7d 83       	std	Y+5, r23	; 0x05
     c1a:	6c 83       	std	Y+4, r22	; 0x04
     c1c:	19 82       	std	Y+1, r1	; 0x01
{
	INITIAL_TRANSITION(TO(setting), ACTION(self->timeout = INIT_TIMEOUT)) ;
     c1e:	ec 81       	ldd	r30, Y+4	; 0x04
     c20:	fd 81       	ldd	r31, Y+5	; 0x05
     c22:	80 81       	ld	r24, Z
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	69 f4       	brne	.+26     	; 0xc42 <timeBomb_TOP_handler+0x3c>
     c28:	ea 81       	ldd	r30, Y+2	; 0x02
     c2a:	fb 81       	ldd	r31, Y+3	; 0x03
     c2c:	8e e1       	ldi	r24, 0x1E	; 30
     c2e:	81 8b       	std	Z+17, r24	; 0x11
     c30:	ea 81       	ldd	r30, Y+2	; 0x02
     c32:	fb 81       	ldd	r31, Y+3	; 0x03
     c34:	84 ef       	ldi	r24, 0xF4	; 244
     c36:	92 e0       	ldi	r25, 0x02	; 2
     c38:	90 87       	std	Z+8, r25	; 0x08
     c3a:	87 83       	std	Z+7, r24	; 0x07
     c3c:	82 e0       	ldi	r24, 0x02	; 2
     c3e:	8e 83       	std	Y+6, r24	; 0x06
     c40:	0d c0       	rjmp	.+26     	; 0xc5c <timeBomb_TOP_handler+0x56>

	HANDLE_STATE_EVENTS
     c42:	ec 81       	ldd	r30, Y+4	; 0x04
     c44:	fd 81       	ldd	r31, Y+5	; 0x05
     c46:	80 81       	ld	r24, Z
     c48:	88 2f       	mov	r24, r24
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	83 30       	cpi	r24, 0x03	; 3
     c4e:	91 05       	cpc	r25, r1
     c50:	19 f4       	brne	.+6      	; 0xc58 <timeBomb_TOP_handler+0x52>
	{
		EXIT
		{
			/* BOOM */
		}
		EXIT_HANDLED
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	8e 83       	std	Y+6, r24	; 0x06
     c56:	02 c0       	rjmp	.+4      	; 0xc5c <timeBomb_TOP_handler+0x56>
	}
	HANDLE_STATE_EVENTS_DONE
}
END_DEFINE_STATE()
     c58:	89 81       	ldd	r24, Y+1	; 0x01
     c5a:	8e 83       	std	Y+6, r24	; 0x06
     c5c:	8e 81       	ldd	r24, Y+6	; 0x06
     c5e:	26 96       	adiw	r28, 0x06	; 6
     c60:	0f b6       	in	r0, 0x3f	; 63
     c62:	f8 94       	cli
     c64:	de bf       	out	0x3e, r29	; 62
     c66:	0f be       	out	0x3f, r0	; 63
     c68:	cd bf       	out	0x3d, r28	; 61
     c6a:	cf 91       	pop	r28
     c6c:	df 91       	pop	r29
     c6e:	08 95       	ret

00000c70 <timeBomb_setting_handler>:


DEFINE_STATE(setting)
     c70:	df 93       	push	r29
     c72:	cf 93       	push	r28
     c74:	cd b7       	in	r28, 0x3d	; 61
     c76:	de b7       	in	r29, 0x3e	; 62
     c78:	28 97       	sbiw	r28, 0x08	; 8
     c7a:	0f b6       	in	r0, 0x3f	; 63
     c7c:	f8 94       	cli
     c7e:	de bf       	out	0x3e, r29	; 62
     c80:	0f be       	out	0x3f, r0	; 63
     c82:	cd bf       	out	0x3d, r28	; 61
     c84:	9b 83       	std	Y+3, r25	; 0x03
     c86:	8a 83       	std	Y+2, r24	; 0x02
     c88:	7d 83       	std	Y+5, r23	; 0x05
     c8a:	6c 83       	std	Y+4, r22	; 0x04
     c8c:	19 82       	std	Y+1, r1	; 0x01
{
	TRANSITION_ON(ARM, UNCONDITIONALLY, TO(timing), ACTION(self->codeBeingEntered = 0)) ;
     c8e:	ec 81       	ldd	r30, Y+4	; 0x04
     c90:	fd 81       	ldd	r31, Y+5	; 0x05
     c92:	80 81       	ld	r24, Z
     c94:	86 30       	cpi	r24, 0x06	; 6
     c96:	61 f4       	brne	.+24     	; 0xcb0 <timeBomb_setting_handler+0x40>
     c98:	ea 81       	ldd	r30, Y+2	; 0x02
     c9a:	fb 81       	ldd	r31, Y+3	; 0x03
     c9c:	12 8a       	std	Z+18, r1	; 0x12
     c9e:	ea 81       	ldd	r30, Y+2	; 0x02
     ca0:	fb 81       	ldd	r31, Y+3	; 0x03
     ca2:	8b e0       	ldi	r24, 0x0B	; 11
     ca4:	93 e0       	ldi	r25, 0x03	; 3
     ca6:	90 87       	std	Z+8, r25	; 0x08
     ca8:	87 83       	std	Z+7, r24	; 0x07
     caa:	22 e0       	ldi	r18, 0x02	; 2
     cac:	28 87       	std	Y+8, r18	; 0x08
     cae:	3c c0       	rjmp	.+120    	; 0xd28 <timeBomb_setting_handler+0xb8>

	HANDLE_STATE_EVENTS
     cb0:	ec 81       	ldd	r30, Y+4	; 0x04
     cb2:	fd 81       	ldd	r31, Y+5	; 0x05
     cb4:	80 81       	ld	r24, Z
     cb6:	28 2f       	mov	r18, r24
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	3f 83       	std	Y+7, r19	; 0x07
     cbc:	2e 83       	std	Y+6, r18	; 0x06
     cbe:	8e 81       	ldd	r24, Y+6	; 0x06
     cc0:	9f 81       	ldd	r25, Y+7	; 0x07
     cc2:	84 30       	cpi	r24, 0x04	; 4
     cc4:	91 05       	cpc	r25, r1
     cc6:	31 f0       	breq	.+12     	; 0xcd4 <timeBomb_setting_handler+0x64>
     cc8:	2e 81       	ldd	r18, Y+6	; 0x06
     cca:	3f 81       	ldd	r19, Y+7	; 0x07
     ccc:	25 30       	cpi	r18, 0x05	; 5
     cce:	31 05       	cpc	r19, r1
     cd0:	a9 f0       	breq	.+42     	; 0xcfc <timeBomb_setting_handler+0x8c>
     cd2:	28 c0       	rjmp	.+80     	; 0xd24 <timeBomb_setting_handler+0xb4>
	{
		EVENT(UP)
		{
			if(self->timeout < 60)
     cd4:	ea 81       	ldd	r30, Y+2	; 0x02
     cd6:	fb 81       	ldd	r31, Y+3	; 0x03
     cd8:	81 89       	ldd	r24, Z+17	; 0x11
     cda:	8c 33       	cpi	r24, 0x3C	; 60
     cdc:	60 f4       	brcc	.+24     	; 0xcf6 <timeBomb_setting_handler+0x86>
			{
				self->timeout++ ;
     cde:	ea 81       	ldd	r30, Y+2	; 0x02
     ce0:	fb 81       	ldd	r31, Y+3	; 0x03
     ce2:	81 89       	ldd	r24, Z+17	; 0x11
     ce4:	8f 5f       	subi	r24, 0xFF	; 255
     ce6:	ea 81       	ldd	r30, Y+2	; 0x02
     ce8:	fb 81       	ldd	r31, Y+3	; 0x03
     cea:	81 8b       	std	Z+17, r24	; 0x11

				updateDisplay(self->timeout) ;
     cec:	ea 81       	ldd	r30, Y+2	; 0x02
     cee:	fb 81       	ldd	r31, Y+3	; 0x03
     cf0:	81 89       	ldd	r24, Z+17	; 0x11
     cf2:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <updateDisplay>
			}
		}
		EVENT_HANDLED
     cf6:	31 e0       	ldi	r19, 0x01	; 1
     cf8:	38 87       	std	Y+8, r19	; 0x08
     cfa:	16 c0       	rjmp	.+44     	; 0xd28 <timeBomb_setting_handler+0xb8>

		EVENT(DOWN)
		{
			if(self->timeout > 1)
     cfc:	ea 81       	ldd	r30, Y+2	; 0x02
     cfe:	fb 81       	ldd	r31, Y+3	; 0x03
     d00:	81 89       	ldd	r24, Z+17	; 0x11
     d02:	82 30       	cpi	r24, 0x02	; 2
     d04:	60 f0       	brcs	.+24     	; 0xd1e <timeBomb_setting_handler+0xae>
			{
				self->timeout-- ;
     d06:	ea 81       	ldd	r30, Y+2	; 0x02
     d08:	fb 81       	ldd	r31, Y+3	; 0x03
     d0a:	81 89       	ldd	r24, Z+17	; 0x11
     d0c:	81 50       	subi	r24, 0x01	; 1
     d0e:	ea 81       	ldd	r30, Y+2	; 0x02
     d10:	fb 81       	ldd	r31, Y+3	; 0x03
     d12:	81 8b       	std	Z+17, r24	; 0x11

				updateDisplay(self->timeout) ;
     d14:	ea 81       	ldd	r30, Y+2	; 0x02
     d16:	fb 81       	ldd	r31, Y+3	; 0x03
     d18:	81 89       	ldd	r24, Z+17	; 0x11
     d1a:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <updateDisplay>
			}
		}
		EVENT_HANDLED
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	88 87       	std	Y+8, r24	; 0x08
     d22:	02 c0       	rjmp	.+4      	; 0xd28 <timeBomb_setting_handler+0xb8>
	}
	HANDLE_STATE_EVENTS_DONE
}
END_DEFINE_STATE()
     d24:	99 81       	ldd	r25, Y+1	; 0x01
     d26:	98 87       	std	Y+8, r25	; 0x08
     d28:	88 85       	ldd	r24, Y+8	; 0x08
     d2a:	28 96       	adiw	r28, 0x08	; 8
     d2c:	0f b6       	in	r0, 0x3f	; 63
     d2e:	f8 94       	cli
     d30:	de bf       	out	0x3e, r29	; 62
     d32:	0f be       	out	0x3f, r0	; 63
     d34:	cd bf       	out	0x3d, r28	; 61
     d36:	cf 91       	pop	r28
     d38:	df 91       	pop	r29
     d3a:	08 95       	ret

00000d3c <timeBomb_timing_handler>:


DEFINE_STATE(timing)
     d3c:	df 93       	push	r29
     d3e:	cf 93       	push	r28
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62
     d44:	28 97       	sbiw	r28, 0x08	; 8
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	f8 94       	cli
     d4a:	de bf       	out	0x3e, r29	; 62
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	cd bf       	out	0x3d, r28	; 61
     d50:	9b 83       	std	Y+3, r25	; 0x03
     d52:	8a 83       	std	Y+2, r24	; 0x02
     d54:	7d 83       	std	Y+5, r23	; 0x05
     d56:	6c 83       	std	Y+4, r22	; 0x04
     d58:	19 82       	std	Y+1, r1	; 0x01
{
	TRANSITION_ON(ARM, IF(self->codeBeingEntered == self->disarmCode), TO(setting), ACTION(updateDisplay(self->timeout))) ;
     d5a:	ec 81       	ldd	r30, Y+4	; 0x04
     d5c:	fd 81       	ldd	r31, Y+5	; 0x05
     d5e:	80 81       	ld	r24, Z
     d60:	86 30       	cpi	r24, 0x06	; 6
     d62:	b1 f4       	brne	.+44     	; 0xd90 <timeBomb_timing_handler+0x54>
     d64:	ea 81       	ldd	r30, Y+2	; 0x02
     d66:	fb 81       	ldd	r31, Y+3	; 0x03
     d68:	92 89       	ldd	r25, Z+18	; 0x12
     d6a:	ea 81       	ldd	r30, Y+2	; 0x02
     d6c:	fb 81       	ldd	r31, Y+3	; 0x03
     d6e:	83 89       	ldd	r24, Z+19	; 0x13
     d70:	98 17       	cp	r25, r24
     d72:	71 f4       	brne	.+28     	; 0xd90 <timeBomb_timing_handler+0x54>
     d74:	ea 81       	ldd	r30, Y+2	; 0x02
     d76:	fb 81       	ldd	r31, Y+3	; 0x03
     d78:	81 89       	ldd	r24, Z+17	; 0x11
     d7a:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <updateDisplay>
     d7e:	ea 81       	ldd	r30, Y+2	; 0x02
     d80:	fb 81       	ldd	r31, Y+3	; 0x03
     d82:	84 ef       	ldi	r24, 0xF4	; 244
     d84:	92 e0       	ldi	r25, 0x02	; 2
     d86:	90 87       	std	Z+8, r25	; 0x08
     d88:	87 83       	std	Z+7, r24	; 0x07
     d8a:	22 e0       	ldi	r18, 0x02	; 2
     d8c:	28 87       	std	Y+8, r18	; 0x08
     d8e:	50 c0       	rjmp	.+160    	; 0xe30 <timeBomb_timing_handler+0xf4>

	HANDLE_STATE_EVENTS
     d90:	ec 81       	ldd	r30, Y+4	; 0x04
     d92:	fd 81       	ldd	r31, Y+5	; 0x05
     d94:	80 81       	ld	r24, Z
     d96:	28 2f       	mov	r18, r24
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	3f 83       	std	Y+7, r19	; 0x07
     d9c:	2e 83       	std	Y+6, r18	; 0x06
     d9e:	8e 81       	ldd	r24, Y+6	; 0x06
     da0:	9f 81       	ldd	r25, Y+7	; 0x07
     da2:	85 30       	cpi	r24, 0x05	; 5
     da4:	91 05       	cpc	r25, r1
     da6:	d9 f0       	breq	.+54     	; 0xdde <timeBomb_timing_handler+0xa2>
     da8:	2e 81       	ldd	r18, Y+6	; 0x06
     daa:	3f 81       	ldd	r19, Y+7	; 0x07
     dac:	27 30       	cpi	r18, 0x07	; 7
     dae:	31 05       	cpc	r19, r1
     db0:	01 f1       	breq	.+64     	; 0xdf2 <timeBomb_timing_handler+0xb6>
     db2:	8e 81       	ldd	r24, Y+6	; 0x06
     db4:	9f 81       	ldd	r25, Y+7	; 0x07
     db6:	84 30       	cpi	r24, 0x04	; 4
     db8:	91 05       	cpc	r25, r1
     dba:	c1 f5       	brne	.+112    	; 0xe2c <timeBomb_timing_handler+0xf0>
	{
		EVENT(UP)
		{
			self->codeBeingEntered <<= 1 ;
     dbc:	ea 81       	ldd	r30, Y+2	; 0x02
     dbe:	fb 81       	ldd	r31, Y+3	; 0x03
     dc0:	82 89       	ldd	r24, Z+18	; 0x12
     dc2:	88 0f       	add	r24, r24
     dc4:	ea 81       	ldd	r30, Y+2	; 0x02
     dc6:	fb 81       	ldd	r31, Y+3	; 0x03
     dc8:	82 8b       	std	Z+18, r24	; 0x12
			self->codeBeingEntered |= 1 ;
     dca:	ea 81       	ldd	r30, Y+2	; 0x02
     dcc:	fb 81       	ldd	r31, Y+3	; 0x03
     dce:	82 89       	ldd	r24, Z+18	; 0x12
     dd0:	81 60       	ori	r24, 0x01	; 1
     dd2:	ea 81       	ldd	r30, Y+2	; 0x02
     dd4:	fb 81       	ldd	r31, Y+3	; 0x03
     dd6:	82 8b       	std	Z+18, r24	; 0x12
		}
		EVENT_HANDLED
     dd8:	91 e0       	ldi	r25, 0x01	; 1
     dda:	98 87       	std	Y+8, r25	; 0x08
     ddc:	29 c0       	rjmp	.+82     	; 0xe30 <timeBomb_timing_handler+0xf4>

		EVENT(DOWN)
		{
			self->codeBeingEntered <<= 1 ;
     dde:	ea 81       	ldd	r30, Y+2	; 0x02
     de0:	fb 81       	ldd	r31, Y+3	; 0x03
     de2:	82 89       	ldd	r24, Z+18	; 0x12
     de4:	88 0f       	add	r24, r24
     de6:	ea 81       	ldd	r30, Y+2	; 0x02
     de8:	fb 81       	ldd	r31, Y+3	; 0x03
     dea:	82 8b       	std	Z+18, r24	; 0x12
		}
		EVENT_HANDLED
     dec:	21 e0       	ldi	r18, 0x01	; 1
     dee:	28 87       	std	Y+8, r18	; 0x08
     df0:	1f c0       	rjmp	.+62     	; 0xe30 <timeBomb_timing_handler+0xf4>

		EVENT(TICK)
		{
			self->timeout-- ;
     df2:	ea 81       	ldd	r30, Y+2	; 0x02
     df4:	fb 81       	ldd	r31, Y+3	; 0x03
     df6:	81 89       	ldd	r24, Z+17	; 0x11
     df8:	81 50       	subi	r24, 0x01	; 1
     dfa:	ea 81       	ldd	r30, Y+2	; 0x02
     dfc:	fb 81       	ldd	r31, Y+3	; 0x03
     dfe:	81 8b       	std	Z+17, r24	; 0x11

			updateDisplay(self->timeout) ;
     e00:	ea 81       	ldd	r30, Y+2	; 0x02
     e02:	fb 81       	ldd	r31, Y+3	; 0x03
     e04:	81 89       	ldd	r24, Z+17	; 0x11
     e06:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <updateDisplay>

			TRANSITION_IF(self->timeout == 0, TO(BOOM), NO_ACTION)
     e0a:	ea 81       	ldd	r30, Y+2	; 0x02
     e0c:	fb 81       	ldd	r31, Y+3	; 0x03
     e0e:	81 89       	ldd	r24, Z+17	; 0x11
     e10:	88 23       	and	r24, r24
     e12:	49 f4       	brne	.+18     	; 0xe26 <timeBomb_timing_handler+0xea>
     e14:	ea 81       	ldd	r30, Y+2	; 0x02
     e16:	fb 81       	ldd	r31, Y+3	; 0x03
     e18:	80 e2       	ldi	r24, 0x20	; 32
     e1a:	93 e0       	ldi	r25, 0x03	; 3
     e1c:	90 87       	std	Z+8, r25	; 0x08
     e1e:	87 83       	std	Z+7, r24	; 0x07
     e20:	32 e0       	ldi	r19, 0x02	; 2
     e22:	38 87       	std	Y+8, r19	; 0x08
     e24:	05 c0       	rjmp	.+10     	; 0xe30 <timeBomb_timing_handler+0xf4>
		}
		EVENT_HANDLED
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	88 87       	std	Y+8, r24	; 0x08
     e2a:	02 c0       	rjmp	.+4      	; 0xe30 <timeBomb_timing_handler+0xf4>
	}
	HANDLE_STATE_EVENTS_DONE
}
END_DEFINE_STATE()
     e2c:	99 81       	ldd	r25, Y+1	; 0x01
     e2e:	98 87       	std	Y+8, r25	; 0x08
     e30:	88 85       	ldd	r24, Y+8	; 0x08
     e32:	28 96       	adiw	r28, 0x08	; 8
     e34:	0f b6       	in	r0, 0x3f	; 63
     e36:	f8 94       	cli
     e38:	de bf       	out	0x3e, r29	; 62
     e3a:	0f be       	out	0x3f, r0	; 63
     e3c:	cd bf       	out	0x3d, r28	; 61
     e3e:	cf 91       	pop	r28
     e40:	df 91       	pop	r29
     e42:	08 95       	ret

00000e44 <timeBomb_BOOM_handler>:


DEFINE_STATE(BOOM)
     e44:	df 93       	push	r29
     e46:	cf 93       	push	r28
     e48:	00 d0       	rcall	.+0      	; 0xe4a <timeBomb_BOOM_handler+0x6>
     e4a:	00 d0       	rcall	.+0      	; 0xe4c <timeBomb_BOOM_handler+0x8>
     e4c:	00 d0       	rcall	.+0      	; 0xe4e <timeBomb_BOOM_handler+0xa>
     e4e:	cd b7       	in	r28, 0x3d	; 61
     e50:	de b7       	in	r29, 0x3e	; 62
     e52:	9b 83       	std	Y+3, r25	; 0x03
     e54:	8a 83       	std	Y+2, r24	; 0x02
     e56:	7d 83       	std	Y+5, r23	; 0x05
     e58:	6c 83       	std	Y+4, r22	; 0x04
     e5a:	19 82       	std	Y+1, r1	; 0x01
{
	HANDLE_STATE_EVENTS
     e5c:	ec 81       	ldd	r30, Y+4	; 0x04
     e5e:	fd 81       	ldd	r31, Y+5	; 0x05
     e60:	80 81       	ld	r24, Z
     e62:	88 2f       	mov	r24, r24
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	81 30       	cpi	r24, 0x01	; 1
     e68:	91 05       	cpc	r25, r1
     e6a:	49 f4       	brne	.+18     	; 0xe7e <timeBomb_BOOM_handler+0x3a>
	{
		ENTER
		{
			/* BOOM */

			TRANSITION_TO(STATE_MACHINE_EXIT, NO_ACTION) ;
     e6c:	ea 81       	ldd	r30, Y+2	; 0x02
     e6e:	fb 81       	ldd	r31, Y+3	; 0x03
     e70:	8c ed       	ldi	r24, 0xDC	; 220
     e72:	92 e0       	ldi	r25, 0x02	; 2
     e74:	90 87       	std	Z+8, r25	; 0x08
     e76:	87 83       	std	Z+7, r24	; 0x07
     e78:	82 e0       	ldi	r24, 0x02	; 2
     e7a:	8e 83       	std	Y+6, r24	; 0x06
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <timeBomb_BOOM_handler+0x3e>
		}
		ENTER_HANDLED
	}
	HANDLE_STATE_EVENTS_DONE
}
END_DEFINE_STATE()
     e7e:	89 81       	ldd	r24, Y+1	; 0x01
     e80:	8e 83       	std	Y+6, r24	; 0x06
     e82:	8e 81       	ldd	r24, Y+6	; 0x06
     e84:	26 96       	adiw	r28, 0x06	; 6
     e86:	0f b6       	in	r0, 0x3f	; 63
     e88:	f8 94       	cli
     e8a:	de bf       	out	0x3e, r29	; 62
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	cd bf       	out	0x3d, r28	; 61
     e90:	cf 91       	pop	r28
     e92:	df 91       	pop	r29
     e94:	08 95       	ret

00000e96 <toaster_getEventQueueDepth>:

//		HISTORY_TRACKER_FOR_STATE(doorClosed) ;
//		HISTORY_TRACKER_FOR_STATE(heating) ;
	END_STATE_MACHINE_VARIABLES() ;

	SET_EVENT_QUEUE_DEPTH(config_toastEVENT_QUEUE_DEPTH) ;
     e96:	df 93       	push	r29
     e98:	cf 93       	push	r28
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
     e9e:	88 e0       	ldi	r24, 0x08	; 8
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	cf 91       	pop	r28
     ea4:	df 91       	pop	r29
     ea6:	08 95       	ret

00000ea8 <toaster_constructor>:

		ADD_SUB_STATE(off, PARENT_STATE(doorClosed)) ;

	ADD_SUB_STATE(doorOpen, PARENT_STATE(TOP)) ;

END_STATE_MACHINE_DEFINITION() ;
     ea8:	df 93       	push	r29
     eaa:	cf 93       	push	r28
     eac:	00 d0       	rcall	.+0      	; 0xeae <toaster_constructor+0x6>
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
     eb2:	9a 83       	std	Y+2, r25	; 0x02
     eb4:	89 83       	std	Y+1, r24	; 0x01
     eb6:	e9 81       	ldd	r30, Y+1	; 0x01
     eb8:	fa 81       	ldd	r31, Y+2	; 0x02
     eba:	8d e3       	ldi	r24, 0x3D	; 61
     ebc:	93 e0       	ldi	r25, 0x03	; 3
     ebe:	91 83       	std	Z+1, r25	; 0x01
     ec0:	80 83       	st	Z, r24
     ec2:	e9 81       	ldd	r30, Y+1	; 0x01
     ec4:	fa 81       	ldd	r31, Y+2	; 0x02
     ec6:	8d e3       	ldi	r24, 0x3D	; 61
     ec8:	93 e0       	ldi	r25, 0x03	; 3
     eca:	96 83       	std	Z+6, r25	; 0x06
     ecc:	85 83       	std	Z+5, r24	; 0x05
     ece:	e9 81       	ldd	r30, Y+1	; 0x01
     ed0:	fa 81       	ldd	r31, Y+2	; 0x02
     ed2:	12 82       	std	Z+2, r1	; 0x02
     ed4:	80 91 2f 03 	lds	r24, 0x032F
     ed8:	90 91 30 03 	lds	r25, 0x0330
     edc:	e9 81       	ldd	r30, Y+1	; 0x01
     ede:	fa 81       	ldd	r31, Y+2	; 0x02
     ee0:	94 83       	std	Z+4, r25	; 0x04
     ee2:	83 83       	std	Z+3, r24	; 0x03
     ee4:	89 81       	ldd	r24, Y+1	; 0x01
     ee6:	9a 81       	ldd	r25, Y+2	; 0x02
     ee8:	0e 94 94 07 	call	0xf28	; 0xf28 <toaster_constructor2>
     eec:	0f 90       	pop	r0
     eee:	0f 90       	pop	r0
     ef0:	cf 91       	pop	r28
     ef2:	df 91       	pop	r29
     ef4:	08 95       	ret

00000ef6 <toaster_destructor>:
     ef6:	df 93       	push	r29
     ef8:	cf 93       	push	r28
     efa:	00 d0       	rcall	.+0      	; 0xefc <toaster_destructor+0x6>
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	9a 83       	std	Y+2, r25	; 0x02
     f02:	89 83       	std	Y+1, r24	; 0x01
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	9a 81       	ldd	r25, Y+2	; 0x02
     f08:	0e 94 a9 07 	call	0xf52	; 0xf52 <toaster_destructor2>
     f0c:	0f 90       	pop	r0
     f0e:	0f 90       	pop	r0
     f10:	cf 91       	pop	r28
     f12:	df 91       	pop	r29
     f14:	08 95       	ret

00000f16 <toaster_getMachineSize>:
     f16:	df 93       	push	r29
     f18:	cf 93       	push	r28
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
     f1e:	84 e1       	ldi	r24, 0x14	; 20
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	cf 91       	pop	r28
     f24:	df 91       	pop	r29
     f26:	08 95       	ret

00000f28 <toaster_constructor2>:


STATE_MACHINE_CONSTRUCTOR()
{
     f28:	df 93       	push	r29
     f2a:	cf 93       	push	r28
     f2c:	00 d0       	rcall	.+0      	; 0xf2e <toaster_constructor2+0x6>
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
     f32:	9a 83       	std	Y+2, r25	; 0x02
     f34:	89 83       	std	Y+1, r24	; 0x01
	self->cookingTime_hours		= 0 ;
     f36:	e9 81       	ldd	r30, Y+1	; 0x01
     f38:	fa 81       	ldd	r31, Y+2	; 0x02
     f3a:	11 8a       	std	Z+17, r1	; 0x11
	self->cookingTime_minutes	= 0 ;
     f3c:	e9 81       	ldd	r30, Y+1	; 0x01
     f3e:	fa 81       	ldd	r31, Y+2	; 0x02
     f40:	12 8a       	std	Z+18, r1	; 0x12
	self->cookingTime_seconds	= 0 ;
     f42:	e9 81       	ldd	r30, Y+1	; 0x01
     f44:	fa 81       	ldd	r31, Y+2	; 0x02
     f46:	13 8a       	std	Z+19, r1	; 0x13
}
     f48:	0f 90       	pop	r0
     f4a:	0f 90       	pop	r0
     f4c:	cf 91       	pop	r28
     f4e:	df 91       	pop	r29
     f50:	08 95       	ret

00000f52 <toaster_destructor2>:


STATE_MACHINE_DESTRUCTOR()
{
     f52:	df 93       	push	r29
     f54:	cf 93       	push	r28
     f56:	00 d0       	rcall	.+0      	; 0xf58 <toaster_destructor2+0x6>
     f58:	cd b7       	in	r28, 0x3d	; 61
     f5a:	de b7       	in	r29, 0x3e	; 62
     f5c:	9a 83       	std	Y+2, r25	; 0x02
     f5e:	89 83       	std	Y+1, r24	; 0x01
	(void)self ;	/* Nothing to do here */
}
     f60:	0f 90       	pop	r0
     f62:	0f 90       	pop	r0
     f64:	cf 91       	pop	r28
     f66:	df 91       	pop	r29
     f68:	08 95       	ret

00000f6a <heaterOn>:


void heaterOn(	void)
{
     f6a:	df 93       	push	r29
     f6c:	cf 93       	push	r28
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
}
     f72:	cf 91       	pop	r28
     f74:	df 91       	pop	r29
     f76:	08 95       	ret

00000f78 <heaterOff>:


void heaterOff(	void)
{
     f78:	df 93       	push	r29
     f7a:	cf 93       	push	r28
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
}
     f80:	cf 91       	pop	r28
     f82:	df 91       	pop	r29
     f84:	08 95       	ret

00000f86 <lampOn>:

void lampOn(	void)
{
     f86:	df 93       	push	r29
     f88:	cf 93       	push	r28
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
}
     f8e:	cf 91       	pop	r28
     f90:	df 91       	pop	r29
     f92:	08 95       	ret

00000f94 <lampOff>:

void lampOff(	void)
{
     f94:	df 93       	push	r29
     f96:	cf 93       	push	r28
     f98:	cd b7       	in	r28, 0x3d	; 61
     f9a:	de b7       	in	r29, 0x3e	; 62
}
     f9c:	cf 91       	pop	r28
     f9e:	df 91       	pop	r29
     fa0:	08 95       	ret

00000fa2 <toaster_TOP_handler>:


DEFINE_TOP_STATE()
     fa2:	df 93       	push	r29
     fa4:	cf 93       	push	r28
     fa6:	00 d0       	rcall	.+0      	; 0xfa8 <toaster_TOP_handler+0x6>
     fa8:	00 d0       	rcall	.+0      	; 0xfaa <toaster_TOP_handler+0x8>
     faa:	00 d0       	rcall	.+0      	; 0xfac <toaster_TOP_handler+0xa>
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
     fb0:	9b 83       	std	Y+3, r25	; 0x03
     fb2:	8a 83       	std	Y+2, r24	; 0x02
     fb4:	7d 83       	std	Y+5, r23	; 0x05
     fb6:	6c 83       	std	Y+4, r22	; 0x04
     fb8:	19 82       	std	Y+1, r1	; 0x01
{
	self->cookingTime_hours		= 0 ;
     fba:	ea 81       	ldd	r30, Y+2	; 0x02
     fbc:	fb 81       	ldd	r31, Y+3	; 0x03
     fbe:	11 8a       	std	Z+17, r1	; 0x11
	self->cookingTime_minutes	= 0 ;
     fc0:	ea 81       	ldd	r30, Y+2	; 0x02
     fc2:	fb 81       	ldd	r31, Y+3	; 0x03
     fc4:	12 8a       	std	Z+18, r1	; 0x12
	self->cookingTime_seconds	= 0 ;
     fc6:	ea 81       	ldd	r30, Y+2	; 0x02
     fc8:	fb 81       	ldd	r31, Y+3	; 0x03
     fca:	13 8a       	std	Z+19, r1	; 0x13

	INITIAL_TRANSITION(TO(doorClosed),						NO_ACTION) ;
     fcc:	ec 81       	ldd	r30, Y+4	; 0x04
     fce:	fd 81       	ldd	r31, Y+5	; 0x05
     fd0:	80 81       	ld	r24, Z
     fd2:	82 30       	cpi	r24, 0x02	; 2
     fd4:	49 f4       	brne	.+18     	; 0xfe8 <toaster_TOP_handler+0x46>
     fd6:	ea 81       	ldd	r30, Y+2	; 0x02
     fd8:	fb 81       	ldd	r31, Y+3	; 0x03
     fda:	87 e5       	ldi	r24, 0x57	; 87
     fdc:	93 e0       	ldi	r25, 0x03	; 3
     fde:	90 87       	std	Z+8, r25	; 0x08
     fe0:	87 83       	std	Z+7, r24	; 0x07
     fe2:	82 e0       	ldi	r24, 0x02	; 2
     fe4:	8e 83       	std	Y+6, r24	; 0x06
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <toaster_TOP_handler+0x4a>
}
END_DEFINE_STATE()
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	8e 83       	std	Y+6, r24	; 0x06
     fec:	8e 81       	ldd	r24, Y+6	; 0x06
     fee:	26 96       	adiw	r28, 0x06	; 6
     ff0:	0f b6       	in	r0, 0x3f	; 63
     ff2:	f8 94       	cli
     ff4:	de bf       	out	0x3e, r29	; 62
     ff6:	0f be       	out	0x3f, r0	; 63
     ff8:	cd bf       	out	0x3d, r28	; 61
     ffa:	cf 91       	pop	r28
     ffc:	df 91       	pop	r29
     ffe:	08 95       	ret

00001000 <toaster_doorClosed_handler>:


DEFINE_STATE(doorClosed)
    1000:	df 93       	push	r29
    1002:	cf 93       	push	r28
    1004:	00 d0       	rcall	.+0      	; 0x1006 <toaster_doorClosed_handler+0x6>
    1006:	00 d0       	rcall	.+0      	; 0x1008 <toaster_doorClosed_handler+0x8>
    1008:	00 d0       	rcall	.+0      	; 0x100a <toaster_doorClosed_handler+0xa>
    100a:	cd b7       	in	r28, 0x3d	; 61
    100c:	de b7       	in	r29, 0x3e	; 62
    100e:	9b 83       	std	Y+3, r25	; 0x03
    1010:	8a 83       	std	Y+2, r24	; 0x02
    1012:	7d 83       	std	Y+5, r23	; 0x05
    1014:	6c 83       	std	Y+4, r22	; 0x04
    1016:	19 82       	std	Y+1, r1	; 0x01
{
	INITIAL_TRANSITION(TO(off),								NO_ACTION) ;
    1018:	ec 81       	ldd	r30, Y+4	; 0x04
    101a:	fd 81       	ldd	r31, Y+5	; 0x05
    101c:	80 81       	ld	r24, Z
    101e:	82 30       	cpi	r24, 0x02	; 2
    1020:	49 f4       	brne	.+18     	; 0x1034 <toaster_doorClosed_handler+0x34>
    1022:	ea 81       	ldd	r30, Y+2	; 0x02
    1024:	fb 81       	ldd	r31, Y+3	; 0x03
    1026:	8f ea       	ldi	r24, 0xAF	; 175
    1028:	93 e0       	ldi	r25, 0x03	; 3
    102a:	90 87       	std	Z+8, r25	; 0x08
    102c:	87 83       	std	Z+7, r24	; 0x07
    102e:	82 e0       	ldi	r24, 0x02	; 2
    1030:	8e 83       	std	Y+6, r24	; 0x06
    1032:	3a c0       	rjmp	.+116    	; 0x10a8 <toaster_doorClosed_handler+0xa8>

	TRANSITION_ON(BAKE,		UNCONDITIONALLY, TO(baking),	NO_ACTION) ;
    1034:	ec 81       	ldd	r30, Y+4	; 0x04
    1036:	fd 81       	ldd	r31, Y+5	; 0x05
    1038:	80 81       	ld	r24, Z
    103a:	84 30       	cpi	r24, 0x04	; 4
    103c:	49 f4       	brne	.+18     	; 0x1050 <toaster_doorClosed_handler+0x50>
    103e:	ea 81       	ldd	r30, Y+2	; 0x02
    1040:	fb 81       	ldd	r31, Y+3	; 0x03
    1042:	84 e8       	ldi	r24, 0x84	; 132
    1044:	93 e0       	ldi	r25, 0x03	; 3
    1046:	90 87       	std	Z+8, r25	; 0x08
    1048:	87 83       	std	Z+7, r24	; 0x07
    104a:	82 e0       	ldi	r24, 0x02	; 2
    104c:	8e 83       	std	Y+6, r24	; 0x06
    104e:	2c c0       	rjmp	.+88     	; 0x10a8 <toaster_doorClosed_handler+0xa8>
	TRANSITION_ON(TOAST,	UNCONDITIONALLY, TO(toasting),	NO_ACTION) ;
    1050:	ec 81       	ldd	r30, Y+4	; 0x04
    1052:	fd 81       	ldd	r31, Y+5	; 0x05
    1054:	80 81       	ld	r24, Z
    1056:	85 30       	cpi	r24, 0x05	; 5
    1058:	49 f4       	brne	.+18     	; 0x106c <toaster_doorClosed_handler+0x6c>
    105a:	ea 81       	ldd	r30, Y+2	; 0x02
    105c:	fb 81       	ldd	r31, Y+3	; 0x03
    105e:	8c e9       	ldi	r24, 0x9C	; 156
    1060:	93 e0       	ldi	r25, 0x03	; 3
    1062:	90 87       	std	Z+8, r25	; 0x08
    1064:	87 83       	std	Z+7, r24	; 0x07
    1066:	82 e0       	ldi	r24, 0x02	; 2
    1068:	8e 83       	std	Y+6, r24	; 0x06
    106a:	1e c0       	rjmp	.+60     	; 0x10a8 <toaster_doorClosed_handler+0xa8>
	TRANSITION_ON(OFF,		UNCONDITIONALLY, TO(off),		NO_ACTION) ;
    106c:	ec 81       	ldd	r30, Y+4	; 0x04
    106e:	fd 81       	ldd	r31, Y+5	; 0x05
    1070:	80 81       	ld	r24, Z
    1072:	86 30       	cpi	r24, 0x06	; 6
    1074:	49 f4       	brne	.+18     	; 0x1088 <toaster_doorClosed_handler+0x88>
    1076:	ea 81       	ldd	r30, Y+2	; 0x02
    1078:	fb 81       	ldd	r31, Y+3	; 0x03
    107a:	8f ea       	ldi	r24, 0xAF	; 175
    107c:	93 e0       	ldi	r25, 0x03	; 3
    107e:	90 87       	std	Z+8, r25	; 0x08
    1080:	87 83       	std	Z+7, r24	; 0x07
    1082:	82 e0       	ldi	r24, 0x02	; 2
    1084:	8e 83       	std	Y+6, r24	; 0x06
    1086:	10 c0       	rjmp	.+32     	; 0x10a8 <toaster_doorClosed_handler+0xa8>
	TRANSITION_ON(OPEN,		UNCONDITIONALLY, TO(off),		NO_ACTION) ;
    1088:	ec 81       	ldd	r30, Y+4	; 0x04
    108a:	fd 81       	ldd	r31, Y+5	; 0x05
    108c:	80 81       	ld	r24, Z
    108e:	87 30       	cpi	r24, 0x07	; 7
    1090:	49 f4       	brne	.+18     	; 0x10a4 <toaster_doorClosed_handler+0xa4>
    1092:	ea 81       	ldd	r30, Y+2	; 0x02
    1094:	fb 81       	ldd	r31, Y+3	; 0x03
    1096:	8f ea       	ldi	r24, 0xAF	; 175
    1098:	93 e0       	ldi	r25, 0x03	; 3
    109a:	90 87       	std	Z+8, r25	; 0x08
    109c:	87 83       	std	Z+7, r24	; 0x07
    109e:	82 e0       	ldi	r24, 0x02	; 2
    10a0:	8e 83       	std	Y+6, r24	; 0x06
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <toaster_doorClosed_handler+0xa8>
}
END_DEFINE_STATE()
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	8e 83       	std	Y+6, r24	; 0x06
    10a8:	8e 81       	ldd	r24, Y+6	; 0x06
    10aa:	26 96       	adiw	r28, 0x06	; 6
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	f8 94       	cli
    10b0:	de bf       	out	0x3e, r29	; 62
    10b2:	0f be       	out	0x3f, r0	; 63
    10b4:	cd bf       	out	0x3d, r28	; 61
    10b6:	cf 91       	pop	r28
    10b8:	df 91       	pop	r29
    10ba:	08 95       	ret

000010bc <toaster_heating_handler>:


DEFINE_STATE(heating)
    10bc:	df 93       	push	r29
    10be:	cf 93       	push	r28
    10c0:	00 d0       	rcall	.+0      	; 0x10c2 <toaster_heating_handler+0x6>
    10c2:	00 d0       	rcall	.+0      	; 0x10c4 <toaster_heating_handler+0x8>
    10c4:	0f 92       	push	r0
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
    10ca:	9b 83       	std	Y+3, r25	; 0x03
    10cc:	8a 83       	std	Y+2, r24	; 0x02
    10ce:	7d 83       	std	Y+5, r23	; 0x05
    10d0:	6c 83       	std	Y+4, r22	; 0x04
    10d2:	19 82       	std	Y+1, r1	; 0x01
{
	ON_ENTRY(	heaterOn()) ;
    10d4:	ec 81       	ldd	r30, Y+4	; 0x04
    10d6:	fd 81       	ldd	r31, Y+5	; 0x05
    10d8:	80 81       	ld	r24, Z
    10da:	81 30       	cpi	r24, 0x01	; 1
    10dc:	11 f4       	brne	.+4      	; 0x10e2 <toaster_heating_handler+0x26>
    10de:	0e 94 b5 07 	call	0xf6a	; 0xf6a <heaterOn>
	ON_EXIT(	heaterOff()) ;
    10e2:	ec 81       	ldd	r30, Y+4	; 0x04
    10e4:	fd 81       	ldd	r31, Y+5	; 0x05
    10e6:	80 81       	ld	r24, Z
    10e8:	81 30       	cpi	r24, 0x01	; 1
    10ea:	11 f4       	brne	.+4      	; 0x10f0 <toaster_heating_handler+0x34>
    10ec:	0e 94 bc 07 	call	0xf78	; 0xf78 <heaterOff>
}
END_DEFINE_STATE()
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
    10f2:	0f 90       	pop	r0
    10f4:	0f 90       	pop	r0
    10f6:	0f 90       	pop	r0
    10f8:	0f 90       	pop	r0
    10fa:	0f 90       	pop	r0
    10fc:	cf 91       	pop	r28
    10fe:	df 91       	pop	r29
    1100:	08 95       	ret

00001102 <toaster_baking_handler>:


DEFINE_STATE(baking)
    1102:	df 93       	push	r29
    1104:	cf 93       	push	r28
    1106:	00 d0       	rcall	.+0      	; 0x1108 <toaster_baking_handler+0x6>
    1108:	00 d0       	rcall	.+0      	; 0x110a <toaster_baking_handler+0x8>
    110a:	0f 92       	push	r0
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62
    1110:	9b 83       	std	Y+3, r25	; 0x03
    1112:	8a 83       	std	Y+2, r24	; 0x02
    1114:	7d 83       	std	Y+5, r23	; 0x05
    1116:	6c 83       	std	Y+4, r22	; 0x04
    1118:	19 82       	std	Y+1, r1	; 0x01
{
}
END_DEFINE_STATE()
    111a:	89 81       	ldd	r24, Y+1	; 0x01
    111c:	0f 90       	pop	r0
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	cf 91       	pop	r28
    1128:	df 91       	pop	r29
    112a:	08 95       	ret

0000112c <toaster_toasting_handler>:


DEFINE_STATE(toasting)
    112c:	df 93       	push	r29
    112e:	cf 93       	push	r28
    1130:	00 d0       	rcall	.+0      	; 0x1132 <toaster_toasting_handler+0x6>
    1132:	00 d0       	rcall	.+0      	; 0x1134 <toaster_toasting_handler+0x8>
    1134:	0f 92       	push	r0
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
    113a:	9b 83       	std	Y+3, r25	; 0x03
    113c:	8a 83       	std	Y+2, r24	; 0x02
    113e:	7d 83       	std	Y+5, r23	; 0x05
    1140:	6c 83       	std	Y+4, r22	; 0x04
    1142:	19 82       	std	Y+1, r1	; 0x01
{
}
END_DEFINE_STATE()
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	0f 90       	pop	r0
    1148:	0f 90       	pop	r0
    114a:	0f 90       	pop	r0
    114c:	0f 90       	pop	r0
    114e:	0f 90       	pop	r0
    1150:	cf 91       	pop	r28
    1152:	df 91       	pop	r29
    1154:	08 95       	ret

00001156 <toaster_off_handler>:


DEFINE_STATE(off)
    1156:	df 93       	push	r29
    1158:	cf 93       	push	r28
    115a:	00 d0       	rcall	.+0      	; 0x115c <toaster_off_handler+0x6>
    115c:	00 d0       	rcall	.+0      	; 0x115e <toaster_off_handler+0x8>
    115e:	0f 92       	push	r0
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
    1164:	9b 83       	std	Y+3, r25	; 0x03
    1166:	8a 83       	std	Y+2, r24	; 0x02
    1168:	7d 83       	std	Y+5, r23	; 0x05
    116a:	6c 83       	std	Y+4, r22	; 0x04
    116c:	19 82       	std	Y+1, r1	; 0x01
{
}
END_DEFINE_STATE()
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	0f 90       	pop	r0
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	08 95       	ret

00001180 <toaster_doorOpen_handler>:


DEFINE_STATE(doorOpen)
    1180:	df 93       	push	r29
    1182:	cf 93       	push	r28
    1184:	00 d0       	rcall	.+0      	; 0x1186 <toaster_doorOpen_handler+0x6>
    1186:	00 d0       	rcall	.+0      	; 0x1188 <toaster_doorOpen_handler+0x8>
    1188:	0f 92       	push	r0
    118a:	cd b7       	in	r28, 0x3d	; 61
    118c:	de b7       	in	r29, 0x3e	; 62
    118e:	9b 83       	std	Y+3, r25	; 0x03
    1190:	8a 83       	std	Y+2, r24	; 0x02
    1192:	7d 83       	std	Y+5, r23	; 0x05
    1194:	6c 83       	std	Y+4, r22	; 0x04
    1196:	19 82       	std	Y+1, r1	; 0x01
{
//	DEFER_EVENT(BAKE) ;
//	DEFER_EVENT(TOAST) ;

	ON_ENTRY(	lampOn()) ;
    1198:	ec 81       	ldd	r30, Y+4	; 0x04
    119a:	fd 81       	ldd	r31, Y+5	; 0x05
    119c:	80 81       	ld	r24, Z
    119e:	81 30       	cpi	r24, 0x01	; 1
    11a0:	11 f4       	brne	.+4      	; 0x11a6 <toaster_doorOpen_handler+0x26>
    11a2:	0e 94 c3 07 	call	0xf86	; 0xf86 <lampOn>
	ON_EXIT(	lampOff()) ;
    11a6:	ec 81       	ldd	r30, Y+4	; 0x04
    11a8:	fd 81       	ldd	r31, Y+5	; 0x05
    11aa:	80 81       	ld	r24, Z
    11ac:	81 30       	cpi	r24, 0x01	; 1
    11ae:	11 f4       	brne	.+4      	; 0x11b4 <toaster_doorOpen_handler+0x34>
    11b0:	0e 94 ca 07 	call	0xf94	; 0xf94 <lampOff>

//	TRANSITION_ON(CLOSE,	UNCONDITIONALLY, TO(DEEP_HISTORY_OF(doorClosed)),		NO_ACTION) ;
}
END_DEFINE_STATE()
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	cf 91       	pop	r28
    11c2:	df 91       	pop	r29
    11c4:	08 95       	ret

000011c6 <initializeEventQueue>:
#include "stateMachine_G4.h"
#include "stateMachine_G4_eventQueue.h"


bool initializeEventQueue(	eventQueue_t* Q, event_t** storage, uint8_t maxEntriesInQueue)
{
    11c6:	df 93       	push	r29
    11c8:	cf 93       	push	r28
    11ca:	00 d0       	rcall	.+0      	; 0x11cc <initializeEventQueue+0x6>
    11cc:	00 d0       	rcall	.+0      	; 0x11ce <initializeEventQueue+0x8>
    11ce:	0f 92       	push	r0
    11d0:	cd b7       	in	r28, 0x3d	; 61
    11d2:	de b7       	in	r29, 0x3e	; 62
    11d4:	9a 83       	std	Y+2, r25	; 0x02
    11d6:	89 83       	std	Y+1, r24	; 0x01
    11d8:	7c 83       	std	Y+4, r23	; 0x04
    11da:	6b 83       	std	Y+3, r22	; 0x03
    11dc:	4d 83       	std	Y+5, r20	; 0x05
	Q->Capacity	= maxEntriesInQueue ;
    11de:	e9 81       	ldd	r30, Y+1	; 0x01
    11e0:	fa 81       	ldd	r31, Y+2	; 0x02
    11e2:	8d 81       	ldd	r24, Y+5	; 0x05
    11e4:	80 83       	st	Z, r24
	Q->Size		= 0 ;
    11e6:	e9 81       	ldd	r30, Y+1	; 0x01
    11e8:	fa 81       	ldd	r31, Y+2	; 0x02
    11ea:	13 82       	std	Z+3, r1	; 0x03
	Q->Front	= 1 ;
    11ec:	e9 81       	ldd	r30, Y+1	; 0x01
    11ee:	fa 81       	ldd	r31, Y+2	; 0x02
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	81 83       	std	Z+1, r24	; 0x01
	Q->Rear		= 0 ;
    11f4:	e9 81       	ldd	r30, Y+1	; 0x01
    11f6:	fa 81       	ldd	r31, Y+2	; 0x02
    11f8:	12 82       	std	Z+2, r1	; 0x02
	Q->Array	= storage ;
    11fa:	e9 81       	ldd	r30, Y+1	; 0x01
    11fc:	fa 81       	ldd	r31, Y+2	; 0x02
    11fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1200:	9c 81       	ldd	r25, Y+4	; 0x04
    1202:	95 83       	std	Z+5, r25	; 0x05
    1204:	84 83       	std	Z+4, r24	; 0x04

	return true ;
    1206:	81 e0       	ldi	r24, 0x01	; 1
}
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	cf 91       	pop	r28
    1214:	df 91       	pop	r29
    1216:	08 95       	ret

00001218 <clearQueue>:


void clearQueue(			eventQueue_t* Q)
{
    1218:	df 93       	push	r29
    121a:	cf 93       	push	r28
    121c:	00 d0       	rcall	.+0      	; 0x121e <clearQueue+0x6>
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    1222:	9a 83       	std	Y+2, r25	; 0x02
    1224:	89 83       	std	Y+1, r24	; 0x01
	Q->Size		= 0 ;
    1226:	e9 81       	ldd	r30, Y+1	; 0x01
    1228:	fa 81       	ldd	r31, Y+2	; 0x02
    122a:	13 82       	std	Z+3, r1	; 0x03
	Q->Front	= 1 ;
    122c:	e9 81       	ldd	r30, Y+1	; 0x01
    122e:	fa 81       	ldd	r31, Y+2	; 0x02
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	81 83       	std	Z+1, r24	; 0x01
	Q->Rear		= 0 ;
    1234:	e9 81       	ldd	r30, Y+1	; 0x01
    1236:	fa 81       	ldd	r31, Y+2	; 0x02
    1238:	12 82       	std	Z+2, r1	; 0x02
}
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	08 95       	ret

00001244 <isEmpty>:


uint8_t isEmpty(			eventQueue_t* Q)
{
    1244:	df 93       	push	r29
    1246:	cf 93       	push	r28
    1248:	00 d0       	rcall	.+0      	; 0x124a <isEmpty+0x6>
    124a:	0f 92       	push	r0
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62
    1250:	9a 83       	std	Y+2, r25	; 0x02
    1252:	89 83       	std	Y+1, r24	; 0x01
	return Q->Size == 0 ;
    1254:	e9 81       	ldd	r30, Y+1	; 0x01
    1256:	fa 81       	ldd	r31, Y+2	; 0x02
    1258:	83 81       	ldd	r24, Z+3	; 0x03
    125a:	1b 82       	std	Y+3, r1	; 0x03
    125c:	88 23       	and	r24, r24
    125e:	11 f4       	brne	.+4      	; 0x1264 <isEmpty+0x20>
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	8b 83       	std	Y+3, r24	; 0x03
    1264:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1266:	0f 90       	pop	r0
    1268:	0f 90       	pop	r0
    126a:	0f 90       	pop	r0
    126c:	cf 91       	pop	r28
    126e:	df 91       	pop	r29
    1270:	08 95       	ret

00001272 <isFull>:


uint8_t isFull(				eventQueue_t* Q)
{
    1272:	df 93       	push	r29
    1274:	cf 93       	push	r28
    1276:	00 d0       	rcall	.+0      	; 0x1278 <isFull+0x6>
    1278:	0f 92       	push	r0
    127a:	cd b7       	in	r28, 0x3d	; 61
    127c:	de b7       	in	r29, 0x3e	; 62
    127e:	9a 83       	std	Y+2, r25	; 0x02
    1280:	89 83       	std	Y+1, r24	; 0x01
	return Q->Size == Q->Capacity ;
    1282:	e9 81       	ldd	r30, Y+1	; 0x01
    1284:	fa 81       	ldd	r31, Y+2	; 0x02
    1286:	93 81       	ldd	r25, Z+3	; 0x03
    1288:	e9 81       	ldd	r30, Y+1	; 0x01
    128a:	fa 81       	ldd	r31, Y+2	; 0x02
    128c:	80 81       	ld	r24, Z
    128e:	1b 82       	std	Y+3, r1	; 0x03
    1290:	98 17       	cp	r25, r24
    1292:	11 f4       	brne	.+4      	; 0x1298 <isFull+0x26>
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	8b 83       	std	Y+3, r24	; 0x03
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
}
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	cf 91       	pop	r28
    12a2:	df 91       	pop	r29
    12a4:	08 95       	ret

000012a6 <nextLocationFromPoint>:


static uint8_t nextLocationFromPoint(	eventQueue_t* Q, uint8_t location)
{
    12a6:	df 93       	push	r29
    12a8:	cf 93       	push	r28
    12aa:	00 d0       	rcall	.+0      	; 0x12ac <nextLocationFromPoint+0x6>
    12ac:	0f 92       	push	r0
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62
    12b2:	9a 83       	std	Y+2, r25	; 0x02
    12b4:	89 83       	std	Y+1, r24	; 0x01
    12b6:	6b 83       	std	Y+3, r22	; 0x03
	if(++location == Q->Capacity)
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	8f 5f       	subi	r24, 0xFF	; 255
    12bc:	8b 83       	std	Y+3, r24	; 0x03
    12be:	e9 81       	ldd	r30, Y+1	; 0x01
    12c0:	fa 81       	ldd	r31, Y+2	; 0x02
    12c2:	90 81       	ld	r25, Z
    12c4:	8b 81       	ldd	r24, Y+3	; 0x03
    12c6:	89 17       	cp	r24, r25
    12c8:	09 f4       	brne	.+2      	; 0x12cc <nextLocationFromPoint+0x26>
	{
		location = 0 ;
    12ca:	1b 82       	std	Y+3, r1	; 0x03
	}

	return location ;
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
}
    12ce:	0f 90       	pop	r0
    12d0:	0f 90       	pop	r0
    12d2:	0f 90       	pop	r0
    12d4:	cf 91       	pop	r28
    12d6:	df 91       	pop	r29
    12d8:	08 95       	ret

000012da <NormalInsert>:


extern char*	eventTypes[] ;

bool NormalInsert(			eventQueue_t* Q, event_t* event)
{
    12da:	df 93       	push	r29
    12dc:	cf 93       	push	r28
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62
    12e2:	27 97       	sbiw	r28, 0x07	; 7
    12e4:	0f b6       	in	r0, 0x3f	; 63
    12e6:	f8 94       	cli
    12e8:	de bf       	out	0x3e, r29	; 62
    12ea:	0f be       	out	0x3f, r0	; 63
    12ec:	cd bf       	out	0x3d, r28	; 61
    12ee:	9a 83       	std	Y+2, r25	; 0x02
    12f0:	89 83       	std	Y+1, r24	; 0x01
    12f2:	7c 83       	std	Y+4, r23	; 0x04
    12f4:	6b 83       	std	Y+3, r22	; 0x03
	if(!isFull(Q))
    12f6:	89 81       	ldd	r24, Y+1	; 0x01
    12f8:	9a 81       	ldd	r25, Y+2	; 0x02
    12fa:	0e 94 39 09 	call	0x1272	; 0x1272 <isFull>
    12fe:	88 23       	and	r24, r24
    1300:	09 f0       	breq	.+2      	; 0x1304 <NormalInsert+0x2a>
    1302:	52 c0       	rjmp	.+164    	; 0x13a8 <NormalInsert+0xce>
	{
		Q->Size++ ;
    1304:	e9 81       	ldd	r30, Y+1	; 0x01
    1306:	fa 81       	ldd	r31, Y+2	; 0x02
    1308:	83 81       	ldd	r24, Z+3	; 0x03
    130a:	8f 5f       	subi	r24, 0xFF	; 255
    130c:	e9 81       	ldd	r30, Y+1	; 0x01
    130e:	fa 81       	ldd	r31, Y+2	; 0x02
    1310:	83 83       	std	Z+3, r24	; 0x03
		Q->Rear = nextLocationFromPoint(Q, Q->Rear) ;
    1312:	e9 81       	ldd	r30, Y+1	; 0x01
    1314:	fa 81       	ldd	r31, Y+2	; 0x02
    1316:	22 81       	ldd	r18, Z+2	; 0x02
    1318:	89 81       	ldd	r24, Y+1	; 0x01
    131a:	9a 81       	ldd	r25, Y+2	; 0x02
    131c:	62 2f       	mov	r22, r18
    131e:	0e 94 53 09 	call	0x12a6	; 0x12a6 <nextLocationFromPoint>
    1322:	e9 81       	ldd	r30, Y+1	; 0x01
    1324:	fa 81       	ldd	r31, Y+2	; 0x02
    1326:	82 83       	std	Z+2, r24	; 0x02
		Q->Array[Q->Rear] = event ;
    1328:	e9 81       	ldd	r30, Y+1	; 0x01
    132a:	fa 81       	ldd	r31, Y+2	; 0x02
    132c:	24 81       	ldd	r18, Z+4	; 0x04
    132e:	35 81       	ldd	r19, Z+5	; 0x05
    1330:	e9 81       	ldd	r30, Y+1	; 0x01
    1332:	fa 81       	ldd	r31, Y+2	; 0x02
    1334:	82 81       	ldd	r24, Z+2	; 0x02
    1336:	88 2f       	mov	r24, r24
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	88 0f       	add	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	f9 01       	movw	r30, r18
    1340:	e8 0f       	add	r30, r24
    1342:	f9 1f       	adc	r31, r25
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	9c 81       	ldd	r25, Y+4	; 0x04
    1348:	91 83       	std	Z+1, r25	; 0x01
    134a:	80 83       	st	Z, r24

		printf("\t\t\tPosting event type: %s\n", event->eventType <= SUBSTATE_EXIT ? eventTypes[event->eventType] : "<USER_EVENT>") ;
    134c:	eb 81       	ldd	r30, Y+3	; 0x03
    134e:	fc 81       	ldd	r31, Y+4	; 0x04
    1350:	80 81       	ld	r24, Z
    1352:	84 30       	cpi	r24, 0x04	; 4
    1354:	78 f4       	brcc	.+30     	; 0x1374 <NormalInsert+0x9a>
    1356:	eb 81       	ldd	r30, Y+3	; 0x03
    1358:	fc 81       	ldd	r31, Y+4	; 0x04
    135a:	80 81       	ld	r24, Z
    135c:	88 2f       	mov	r24, r24
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	88 0f       	add	r24, r24
    1362:	99 1f       	adc	r25, r25
    1364:	fc 01       	movw	r30, r24
    1366:	ef 5b       	subi	r30, 0xBF	; 191
    1368:	fb 4f       	sbci	r31, 0xFB	; 251
    136a:	80 81       	ld	r24, Z
    136c:	91 81       	ldd	r25, Z+1	; 0x01
    136e:	9f 83       	std	Y+7, r25	; 0x07
    1370:	8e 83       	std	Y+6, r24	; 0x06
    1372:	04 c0       	rjmp	.+8      	; 0x137c <NormalInsert+0xa2>
    1374:	8e ec       	ldi	r24, 0xCE	; 206
    1376:	93 e0       	ldi	r25, 0x03	; 3
    1378:	9f 83       	std	Y+7, r25	; 0x07
    137a:	8e 83       	std	Y+6, r24	; 0x06
    137c:	00 d0       	rcall	.+0      	; 0x137e <NormalInsert+0xa4>
    137e:	00 d0       	rcall	.+0      	; 0x1380 <NormalInsert+0xa6>
    1380:	ed b7       	in	r30, 0x3d	; 61
    1382:	fe b7       	in	r31, 0x3e	; 62
    1384:	31 96       	adiw	r30, 0x01	; 1
    1386:	8b ed       	ldi	r24, 0xDB	; 219
    1388:	93 e0       	ldi	r25, 0x03	; 3
    138a:	91 83       	std	Z+1, r25	; 0x01
    138c:	80 83       	st	Z, r24
    138e:	8e 81       	ldd	r24, Y+6	; 0x06
    1390:	9f 81       	ldd	r25, Y+7	; 0x07
    1392:	93 83       	std	Z+3, r25	; 0x03
    1394:	82 83       	std	Z+2, r24	; 0x02
    1396:	0e 94 77 11 	call	0x22ee	; 0x22ee <printf>
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0

		return true ;
    13a2:	91 e0       	ldi	r25, 0x01	; 1
    13a4:	9d 83       	std	Y+5, r25	; 0x05
    13a6:	01 c0       	rjmp	.+2      	; 0x13aa <NormalInsert+0xd0>
	}
	else
	{
		return false ;
    13a8:	1d 82       	std	Y+5, r1	; 0x05
    13aa:	8d 81       	ldd	r24, Y+5	; 0x05
	}
}
    13ac:	27 96       	adiw	r28, 0x07	; 7
    13ae:	0f b6       	in	r0, 0x3f	; 63
    13b0:	f8 94       	cli
    13b2:	de bf       	out	0x3e, r29	; 62
    13b4:	0f be       	out	0x3f, r0	; 63
    13b6:	cd bf       	out	0x3d, r28	; 61
    13b8:	cf 91       	pop	r28
    13ba:	df 91       	pop	r29
    13bc:	08 95       	ret

000013be <PriorityInsert>:


bool PriorityInsert(		eventQueue_t* Q, event_t* event)
{
    13be:	df 93       	push	r29
    13c0:	cf 93       	push	r28
    13c2:	00 d0       	rcall	.+0      	; 0x13c4 <PriorityInsert+0x6>
    13c4:	00 d0       	rcall	.+0      	; 0x13c6 <PriorityInsert+0x8>
    13c6:	0f 92       	push	r0
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
    13cc:	9a 83       	std	Y+2, r25	; 0x02
    13ce:	89 83       	std	Y+1, r24	; 0x01
    13d0:	7c 83       	std	Y+4, r23	; 0x04
    13d2:	6b 83       	std	Y+3, r22	; 0x03
	if(!isFull(Q))
    13d4:	89 81       	ldd	r24, Y+1	; 0x01
    13d6:	9a 81       	ldd	r25, Y+2	; 0x02
    13d8:	0e 94 39 09 	call	0x1272	; 0x1272 <isFull>
    13dc:	88 23       	and	r24, r24
    13de:	81 f5       	brne	.+96     	; 0x1440 <PriorityInsert+0x82>
	{
		Q->Size++ ;
    13e0:	e9 81       	ldd	r30, Y+1	; 0x01
    13e2:	fa 81       	ldd	r31, Y+2	; 0x02
    13e4:	83 81       	ldd	r24, Z+3	; 0x03
    13e6:	8f 5f       	subi	r24, 0xFF	; 255
    13e8:	e9 81       	ldd	r30, Y+1	; 0x01
    13ea:	fa 81       	ldd	r31, Y+2	; 0x02
    13ec:	83 83       	std	Z+3, r24	; 0x03
		if(Q->Front == 0)
    13ee:	e9 81       	ldd	r30, Y+1	; 0x01
    13f0:	fa 81       	ldd	r31, Y+2	; 0x02
    13f2:	81 81       	ldd	r24, Z+1	; 0x01
    13f4:	88 23       	and	r24, r24
    13f6:	41 f4       	brne	.+16     	; 0x1408 <PriorityInsert+0x4a>
		{
			Q->Front = Q->Capacity - 1 ;
    13f8:	e9 81       	ldd	r30, Y+1	; 0x01
    13fa:	fa 81       	ldd	r31, Y+2	; 0x02
    13fc:	80 81       	ld	r24, Z
    13fe:	81 50       	subi	r24, 0x01	; 1
    1400:	e9 81       	ldd	r30, Y+1	; 0x01
    1402:	fa 81       	ldd	r31, Y+2	; 0x02
    1404:	81 83       	std	Z+1, r24	; 0x01
    1406:	07 c0       	rjmp	.+14     	; 0x1416 <PriorityInsert+0x58>
		}
		else
		{
			Q->Front-- ;
    1408:	e9 81       	ldd	r30, Y+1	; 0x01
    140a:	fa 81       	ldd	r31, Y+2	; 0x02
    140c:	81 81       	ldd	r24, Z+1	; 0x01
    140e:	81 50       	subi	r24, 0x01	; 1
    1410:	e9 81       	ldd	r30, Y+1	; 0x01
    1412:	fa 81       	ldd	r31, Y+2	; 0x02
    1414:	81 83       	std	Z+1, r24	; 0x01
		}

		Q->Array[Q->Front] = event ;
    1416:	e9 81       	ldd	r30, Y+1	; 0x01
    1418:	fa 81       	ldd	r31, Y+2	; 0x02
    141a:	24 81       	ldd	r18, Z+4	; 0x04
    141c:	35 81       	ldd	r19, Z+5	; 0x05
    141e:	e9 81       	ldd	r30, Y+1	; 0x01
    1420:	fa 81       	ldd	r31, Y+2	; 0x02
    1422:	81 81       	ldd	r24, Z+1	; 0x01
    1424:	88 2f       	mov	r24, r24
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	88 0f       	add	r24, r24
    142a:	99 1f       	adc	r25, r25
    142c:	f9 01       	movw	r30, r18
    142e:	e8 0f       	add	r30, r24
    1430:	f9 1f       	adc	r31, r25
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	9c 81       	ldd	r25, Y+4	; 0x04
    1436:	91 83       	std	Z+1, r25	; 0x01
    1438:	80 83       	st	Z, r24

		return true ;
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	8d 83       	std	Y+5, r24	; 0x05
    143e:	01 c0       	rjmp	.+2      	; 0x1442 <PriorityInsert+0x84>
	}
	else
	{
		return false ;
    1440:	1d 82       	std	Y+5, r1	; 0x05
    1442:	8d 81       	ldd	r24, Y+5	; 0x05
	}
}
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	0f 90       	pop	r0
    144e:	cf 91       	pop	r28
    1450:	df 91       	pop	r29
    1452:	08 95       	ret

00001454 <Remove>:


event_t* Remove(			eventQueue_t* Q)
{
    1454:	df 93       	push	r29
    1456:	cf 93       	push	r28
    1458:	00 d0       	rcall	.+0      	; 0x145a <Remove+0x6>
    145a:	00 d0       	rcall	.+0      	; 0x145c <Remove+0x8>
    145c:	00 d0       	rcall	.+0      	; 0x145e <Remove+0xa>
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
    1462:	9c 83       	std	Y+4, r25	; 0x04
    1464:	8b 83       	std	Y+3, r24	; 0x03
	if(!isEmpty(Q))
    1466:	8b 81       	ldd	r24, Y+3	; 0x03
    1468:	9c 81       	ldd	r25, Y+4	; 0x04
    146a:	0e 94 22 09 	call	0x1244	; 0x1244 <isEmpty>
    146e:	88 23       	and	r24, r24
    1470:	49 f5       	brne	.+82     	; 0x14c4 <Remove+0x70>
	{
		event_t* eventReceived = Q->Array[Q->Front] ;
    1472:	eb 81       	ldd	r30, Y+3	; 0x03
    1474:	fc 81       	ldd	r31, Y+4	; 0x04
    1476:	24 81       	ldd	r18, Z+4	; 0x04
    1478:	35 81       	ldd	r19, Z+5	; 0x05
    147a:	eb 81       	ldd	r30, Y+3	; 0x03
    147c:	fc 81       	ldd	r31, Y+4	; 0x04
    147e:	81 81       	ldd	r24, Z+1	; 0x01
    1480:	88 2f       	mov	r24, r24
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	88 0f       	add	r24, r24
    1486:	99 1f       	adc	r25, r25
    1488:	f9 01       	movw	r30, r18
    148a:	e8 0f       	add	r30, r24
    148c:	f9 1f       	adc	r31, r25
    148e:	80 81       	ld	r24, Z
    1490:	91 81       	ldd	r25, Z+1	; 0x01
    1492:	9a 83       	std	Y+2, r25	; 0x02
    1494:	89 83       	std	Y+1, r24	; 0x01

		Q->Size-- ;
    1496:	eb 81       	ldd	r30, Y+3	; 0x03
    1498:	fc 81       	ldd	r31, Y+4	; 0x04
    149a:	83 81       	ldd	r24, Z+3	; 0x03
    149c:	81 50       	subi	r24, 0x01	; 1
    149e:	eb 81       	ldd	r30, Y+3	; 0x03
    14a0:	fc 81       	ldd	r31, Y+4	; 0x04
    14a2:	83 83       	std	Z+3, r24	; 0x03
		Q->Front = nextLocationFromPoint(Q, Q->Front) ;
    14a4:	eb 81       	ldd	r30, Y+3	; 0x03
    14a6:	fc 81       	ldd	r31, Y+4	; 0x04
    14a8:	21 81       	ldd	r18, Z+1	; 0x01
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	9c 81       	ldd	r25, Y+4	; 0x04
    14ae:	62 2f       	mov	r22, r18
    14b0:	0e 94 53 09 	call	0x12a6	; 0x12a6 <nextLocationFromPoint>
    14b4:	eb 81       	ldd	r30, Y+3	; 0x03
    14b6:	fc 81       	ldd	r31, Y+4	; 0x04
    14b8:	81 83       	std	Z+1, r24	; 0x01

		return eventReceived ;
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	9a 81       	ldd	r25, Y+2	; 0x02
    14be:	9e 83       	std	Y+6, r25	; 0x06
    14c0:	8d 83       	std	Y+5, r24	; 0x05
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <Remove+0x74>
	}
	else
	{
		return (event_t*)0 ;
    14c4:	1e 82       	std	Y+6, r1	; 0x06
    14c6:	1d 82       	std	Y+5, r1	; 0x05
    14c8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ca:	9e 81       	ldd	r25, Y+6	; 0x06
	}
}
    14cc:	26 96       	adiw	r28, 0x06	; 6
    14ce:	0f b6       	in	r0, 0x3f	; 63
    14d0:	f8 94       	cli
    14d2:	de bf       	out	0x3e, r29	; 62
    14d4:	0f be       	out	0x3f, r0	; 63
    14d6:	cd bf       	out	0x3d, r28	; 61
    14d8:	cf 91       	pop	r28
    14da:	df 91       	pop	r29
    14dc:	08 95       	ret

000014de <allocateStateMachineMemory>:


stateMachine_t* allocateStateMachineMemory(		uint16_t sizeInBytes,
												uint16_t eventQueueDepth,
												stateMachineConstructor_t constructor)
{
    14de:	df 93       	push	r29
    14e0:	cf 93       	push	r28
    14e2:	cd b7       	in	r28, 0x3d	; 61
    14e4:	de b7       	in	r29, 0x3e	; 62
    14e6:	2a 97       	sbiw	r28, 0x0a	; 10
    14e8:	0f b6       	in	r0, 0x3f	; 63
    14ea:	f8 94       	cli
    14ec:	de bf       	out	0x3e, r29	; 62
    14ee:	0f be       	out	0x3f, r0	; 63
    14f0:	cd bf       	out	0x3d, r28	; 61
    14f2:	9e 83       	std	Y+6, r25	; 0x06
    14f4:	8d 83       	std	Y+5, r24	; 0x05
    14f6:	78 87       	std	Y+8, r23	; 0x08
    14f8:	6f 83       	std	Y+7, r22	; 0x07
    14fa:	5a 87       	std	Y+10, r21	; 0x0a
    14fc:	49 87       	std	Y+9, r20	; 0x09
	stateMachine_t*	instance = malloc(sizeInBytes) ;
    14fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1500:	9e 81       	ldd	r25, Y+6	; 0x06
    1502:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <malloc>
    1506:	9c 83       	std	Y+4, r25	; 0x04
    1508:	8b 83       	std	Y+3, r24	; 0x03

	if(instance)
    150a:	8b 81       	ldd	r24, Y+3	; 0x03
    150c:	9c 81       	ldd	r25, Y+4	; 0x04
    150e:	00 97       	sbiw	r24, 0x00	; 0
    1510:	79 f1       	breq	.+94     	; 0x1570 <allocateStateMachineMemory+0x92>
	{
		event_t** eventQueue = (event_t**)malloc(eventQueueDepth * sizeof(event_t*)) ;
    1512:	8f 81       	ldd	r24, Y+7	; 0x07
    1514:	98 85       	ldd	r25, Y+8	; 0x08
    1516:	88 0f       	add	r24, r24
    1518:	99 1f       	adc	r25, r25
    151a:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <malloc>
    151e:	9a 83       	std	Y+2, r25	; 0x02
    1520:	89 83       	std	Y+1, r24	; 0x01

		if(eventQueue)
    1522:	89 81       	ldd	r24, Y+1	; 0x01
    1524:	9a 81       	ldd	r25, Y+2	; 0x02
    1526:	00 97       	sbiw	r24, 0x00	; 0
    1528:	19 f1       	breq	.+70     	; 0x1570 <allocateStateMachineMemory+0x92>
		{
			initializeEventQueue(&instance->eventQueue, eventQueue, eventQueueDepth) ;
    152a:	8b 81       	ldd	r24, Y+3	; 0x03
    152c:	9c 81       	ldd	r25, Y+4	; 0x04
    152e:	09 96       	adiw	r24, 0x09	; 9
    1530:	4f 81       	ldd	r20, Y+7	; 0x07
    1532:	29 81       	ldd	r18, Y+1	; 0x01
    1534:	3a 81       	ldd	r19, Y+2	; 0x02
    1536:	b9 01       	movw	r22, r18
    1538:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <initializeEventQueue>

			memset((char*)instance,		0, sizeInBytes) ;
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	9c 81       	ldd	r25, Y+4	; 0x04
    1540:	2d 81       	ldd	r18, Y+5	; 0x05
    1542:	3e 81       	ldd	r19, Y+6	; 0x06
    1544:	60 e0       	ldi	r22, 0x00	; 0
    1546:	70 e0       	ldi	r23, 0x00	; 0
    1548:	a9 01       	movw	r20, r18
    154a:	0e 94 70 11 	call	0x22e0	; 0x22e0 <memset>
			memset((char*)eventQueue,	0, eventQueueDepth * sizeof(event_t*)) ;
    154e:	8f 81       	ldd	r24, Y+7	; 0x07
    1550:	98 85       	ldd	r25, Y+8	; 0x08
    1552:	9c 01       	movw	r18, r24
    1554:	22 0f       	add	r18, r18
    1556:	33 1f       	adc	r19, r19
    1558:	89 81       	ldd	r24, Y+1	; 0x01
    155a:	9a 81       	ldd	r25, Y+2	; 0x02
    155c:	60 e0       	ldi	r22, 0x00	; 0
    155e:	70 e0       	ldi	r23, 0x00	; 0
    1560:	a9 01       	movw	r20, r18
    1562:	0e 94 70 11 	call	0x22e0	; 0x22e0 <memset>

			constructor(instance) ;
    1566:	8b 81       	ldd	r24, Y+3	; 0x03
    1568:	9c 81       	ldd	r25, Y+4	; 0x04
    156a:	e9 85       	ldd	r30, Y+9	; 0x09
    156c:	fa 85       	ldd	r31, Y+10	; 0x0a
    156e:	09 95       	icall
		}
	}

	return instance ;
    1570:	8b 81       	ldd	r24, Y+3	; 0x03
    1572:	9c 81       	ldd	r25, Y+4	; 0x04
}
    1574:	2a 96       	adiw	r28, 0x0a	; 10
    1576:	0f b6       	in	r0, 0x3f	; 63
    1578:	f8 94       	cli
    157a:	de bf       	out	0x3e, r29	; 62
    157c:	0f be       	out	0x3f, r0	; 63
    157e:	cd bf       	out	0x3d, r28	; 61
    1580:	cf 91       	pop	r28
    1582:	df 91       	pop	r29
    1584:	08 95       	ret

00001586 <deallocateStateMachineMemory>:


void deallocateStateMachineMemory(				stateMachine_t* instance, stateMachineDestructor_t destructor)
{
    1586:	df 93       	push	r29
    1588:	cf 93       	push	r28
    158a:	00 d0       	rcall	.+0      	; 0x158c <deallocateStateMachineMemory+0x6>
    158c:	00 d0       	rcall	.+0      	; 0x158e <deallocateStateMachineMemory+0x8>
    158e:	cd b7       	in	r28, 0x3d	; 61
    1590:	de b7       	in	r29, 0x3e	; 62
    1592:	9a 83       	std	Y+2, r25	; 0x02
    1594:	89 83       	std	Y+1, r24	; 0x01
    1596:	7c 83       	std	Y+4, r23	; 0x04
    1598:	6b 83       	std	Y+3, r22	; 0x03
	if(instance != 0)
    159a:	89 81       	ldd	r24, Y+1	; 0x01
    159c:	9a 81       	ldd	r25, Y+2	; 0x02
    159e:	00 97       	sbiw	r24, 0x00	; 0
    15a0:	49 f0       	breq	.+18     	; 0x15b4 <deallocateStateMachineMemory+0x2e>
	{
		destructor(instance) ;
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
    15a4:	9a 81       	ldd	r25, Y+2	; 0x02
    15a6:	eb 81       	ldd	r30, Y+3	; 0x03
    15a8:	fc 81       	ldd	r31, Y+4	; 0x04
    15aa:	09 95       	icall

		free((char*)instance) ;
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	9a 81       	ldd	r25, Y+2	; 0x02
    15b0:	0e 94 18 11 	call	0x2230	; 0x2230 <free>
	}
}
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	0f 90       	pop	r0
    15ba:	0f 90       	pop	r0
    15bc:	cf 91       	pop	r28
    15be:	df 91       	pop	r29
    15c0:	08 95       	ret

000015c2 <registerStateMachine>:


bool registerStateMachine(			stateMachine_t* sm)
{
    15c2:	df 93       	push	r29
    15c4:	cf 93       	push	r28
    15c6:	00 d0       	rcall	.+0      	; 0x15c8 <registerStateMachine+0x6>
    15c8:	00 d0       	rcall	.+0      	; 0x15ca <registerStateMachine+0x8>
    15ca:	cd b7       	in	r28, 0x3d	; 61
    15cc:	de b7       	in	r29, 0x3e	; 62
    15ce:	9b 83       	std	Y+3, r25	; 0x03
    15d0:	8a 83       	std	Y+2, r24	; 0x02
	if(sm)
    15d2:	8a 81       	ldd	r24, Y+2	; 0x02
    15d4:	9b 81       	ldd	r25, Y+3	; 0x03
    15d6:	00 97       	sbiw	r24, 0x00	; 0
    15d8:	19 f1       	breq	.+70     	; 0x1620 <registerStateMachine+0x5e>
	{
		uint8_t	statetMachineIndex ;

		for( statetMachineIndex = 0 ; statetMachineIndex < configMAXIMUM_NUMBER_OF_STATE_MACHINES ; statetMachineIndex++ )
    15da:	19 82       	std	Y+1, r1	; 0x01
    15dc:	1e c0       	rjmp	.+60     	; 0x161a <registerStateMachine+0x58>
		{
			if(stateMachines[statetMachineIndex] == NULL)
    15de:	89 81       	ldd	r24, Y+1	; 0x01
    15e0:	88 2f       	mov	r24, r24
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	88 0f       	add	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	fc 01       	movw	r30, r24
    15ea:	ee 5e       	subi	r30, 0xEE	; 238
    15ec:	f8 4f       	sbci	r31, 0xF8	; 248
    15ee:	80 81       	ld	r24, Z
    15f0:	91 81       	ldd	r25, Z+1	; 0x01
    15f2:	00 97       	sbiw	r24, 0x00	; 0
    15f4:	79 f4       	brne	.+30     	; 0x1614 <registerStateMachine+0x52>
			{
				stateMachines[statetMachineIndex] = sm ;
    15f6:	89 81       	ldd	r24, Y+1	; 0x01
    15f8:	88 2f       	mov	r24, r24
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	88 0f       	add	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	fc 01       	movw	r30, r24
    1602:	ee 5e       	subi	r30, 0xEE	; 238
    1604:	f8 4f       	sbci	r31, 0xF8	; 248
    1606:	8a 81       	ldd	r24, Y+2	; 0x02
    1608:	9b 81       	ldd	r25, Y+3	; 0x03
    160a:	91 83       	std	Z+1, r25	; 0x01
    160c:	80 83       	st	Z, r24

				return true ;
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	8c 83       	std	Y+4, r24	; 0x04
    1612:	07 c0       	rjmp	.+14     	; 0x1622 <registerStateMachine+0x60>
{
	if(sm)
	{
		uint8_t	statetMachineIndex ;

		for( statetMachineIndex = 0 ; statetMachineIndex < configMAXIMUM_NUMBER_OF_STATE_MACHINES ; statetMachineIndex++ )
    1614:	89 81       	ldd	r24, Y+1	; 0x01
    1616:	8f 5f       	subi	r24, 0xFF	; 255
    1618:	89 83       	std	Y+1, r24	; 0x01
    161a:	89 81       	ldd	r24, Y+1	; 0x01
    161c:	82 33       	cpi	r24, 0x32	; 50
    161e:	f8 f2       	brcs	.-66     	; 0x15de <registerStateMachine+0x1c>
				return true ;
			}
		}
	}

	return false ;
    1620:	1c 82       	std	Y+4, r1	; 0x04
    1622:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	cf 91       	pop	r28
    162e:	df 91       	pop	r29
    1630:	08 95       	ret

00001632 <unregisterStateMachine>:

bool unregisterStateMachine(		stateMachine_t* sm)
{
    1632:	df 93       	push	r29
    1634:	cf 93       	push	r28
    1636:	00 d0       	rcall	.+0      	; 0x1638 <unregisterStateMachine+0x6>
    1638:	00 d0       	rcall	.+0      	; 0x163a <unregisterStateMachine+0x8>
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	9b 83       	std	Y+3, r25	; 0x03
    1640:	8a 83       	std	Y+2, r24	; 0x02
	if(sm)
    1642:	8a 81       	ldd	r24, Y+2	; 0x02
    1644:	9b 81       	ldd	r25, Y+3	; 0x03
    1646:	00 97       	sbiw	r24, 0x00	; 0
    1648:	21 f1       	breq	.+72     	; 0x1692 <unregisterStateMachine+0x60>
	{
		uint8_t	statetMachineIndex ;

		for( statetMachineIndex = 0 ; statetMachineIndex < configMAXIMUM_NUMBER_OF_STATE_MACHINES ; statetMachineIndex++ )
    164a:	19 82       	std	Y+1, r1	; 0x01
    164c:	1f c0       	rjmp	.+62     	; 0x168c <unregisterStateMachine+0x5a>
		{
			if(stateMachines[statetMachineIndex] == sm)
    164e:	89 81       	ldd	r24, Y+1	; 0x01
    1650:	88 2f       	mov	r24, r24
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	88 0f       	add	r24, r24
    1656:	99 1f       	adc	r25, r25
    1658:	fc 01       	movw	r30, r24
    165a:	ee 5e       	subi	r30, 0xEE	; 238
    165c:	f8 4f       	sbci	r31, 0xF8	; 248
    165e:	20 81       	ld	r18, Z
    1660:	31 81       	ldd	r19, Z+1	; 0x01
    1662:	8a 81       	ldd	r24, Y+2	; 0x02
    1664:	9b 81       	ldd	r25, Y+3	; 0x03
    1666:	28 17       	cp	r18, r24
    1668:	39 07       	cpc	r19, r25
    166a:	69 f4       	brne	.+26     	; 0x1686 <unregisterStateMachine+0x54>
			{
				stateMachines[statetMachineIndex] = NULL ;
    166c:	89 81       	ldd	r24, Y+1	; 0x01
    166e:	88 2f       	mov	r24, r24
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	88 0f       	add	r24, r24
    1674:	99 1f       	adc	r25, r25
    1676:	fc 01       	movw	r30, r24
    1678:	ee 5e       	subi	r30, 0xEE	; 238
    167a:	f8 4f       	sbci	r31, 0xF8	; 248
    167c:	11 82       	std	Z+1, r1	; 0x01
    167e:	10 82       	st	Z, r1

				return true ;
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	8c 83       	std	Y+4, r24	; 0x04
    1684:	07 c0       	rjmp	.+14     	; 0x1694 <unregisterStateMachine+0x62>
{
	if(sm)
	{
		uint8_t	statetMachineIndex ;

		for( statetMachineIndex = 0 ; statetMachineIndex < configMAXIMUM_NUMBER_OF_STATE_MACHINES ; statetMachineIndex++ )
    1686:	89 81       	ldd	r24, Y+1	; 0x01
    1688:	8f 5f       	subi	r24, 0xFF	; 255
    168a:	89 83       	std	Y+1, r24	; 0x01
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	82 33       	cpi	r24, 0x32	; 50
    1690:	f0 f2       	brcs	.-68     	; 0x164e <unregisterStateMachine+0x1c>
				return true ;
			}
		}
	}

	return false ;
    1692:	1c 82       	std	Y+4, r1	; 0x04
    1694:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1696:	0f 90       	pop	r0
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	cf 91       	pop	r28
    16a0:	df 91       	pop	r29
    16a2:	08 95       	ret

000016a4 <iterateAllStateMachines>:


void iterateAllStateMachines(	void)
{
    16a4:	df 93       	push	r29
    16a6:	cf 93       	push	r28
    16a8:	0f 92       	push	r0
    16aa:	cd b7       	in	r28, 0x3d	; 61
    16ac:	de b7       	in	r29, 0x3e	; 62
	uint8_t	statetMachineIndex ;

	for( statetMachineIndex = 0 ; statetMachineIndex < configMAXIMUM_NUMBER_OF_STATE_MACHINES ; statetMachineIndex++ )
    16ae:	19 82       	std	Y+1, r1	; 0x01
    16b0:	1b c0       	rjmp	.+54     	; 0x16e8 <iterateAllStateMachines+0x44>
	{
		if(stateMachines[statetMachineIndex] != NULL)
    16b2:	89 81       	ldd	r24, Y+1	; 0x01
    16b4:	88 2f       	mov	r24, r24
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	88 0f       	add	r24, r24
    16ba:	99 1f       	adc	r25, r25
    16bc:	fc 01       	movw	r30, r24
    16be:	ee 5e       	subi	r30, 0xEE	; 238
    16c0:	f8 4f       	sbci	r31, 0xF8	; 248
    16c2:	80 81       	ld	r24, Z
    16c4:	91 81       	ldd	r25, Z+1	; 0x01
    16c6:	00 97       	sbiw	r24, 0x00	; 0
    16c8:	61 f0       	breq	.+24     	; 0x16e2 <iterateAllStateMachines+0x3e>
		{
			iterateStateMachine(stateMachines[statetMachineIndex]) ;
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	88 2f       	mov	r24, r24
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	88 0f       	add	r24, r24
    16d2:	99 1f       	adc	r25, r25
    16d4:	fc 01       	movw	r30, r24
    16d6:	ee 5e       	subi	r30, 0xEE	; 238
    16d8:	f8 4f       	sbci	r31, 0xF8	; 248
    16da:	80 81       	ld	r24, Z
    16dc:	91 81       	ldd	r25, Z+1	; 0x01
    16de:	0e 94 15 0c 	call	0x182a	; 0x182a <iterateStateMachine>

void iterateAllStateMachines(	void)
{
	uint8_t	statetMachineIndex ;

	for( statetMachineIndex = 0 ; statetMachineIndex < configMAXIMUM_NUMBER_OF_STATE_MACHINES ; statetMachineIndex++ )
    16e2:	89 81       	ldd	r24, Y+1	; 0x01
    16e4:	8f 5f       	subi	r24, 0xFF	; 255
    16e6:	89 83       	std	Y+1, r24	; 0x01
    16e8:	89 81       	ldd	r24, Y+1	; 0x01
    16ea:	82 33       	cpi	r24, 0x32	; 50
    16ec:	10 f3       	brcs	.-60     	; 0x16b2 <iterateAllStateMachines+0xe>
		if(stateMachines[statetMachineIndex] != NULL)
		{
			iterateStateMachine(stateMachines[statetMachineIndex]) ;
		}
	}
}
    16ee:	0f 90       	pop	r0
    16f0:	cf 91       	pop	r28
    16f2:	df 91       	pop	r29
    16f4:	08 95       	ret

000016f6 <callStateHandler>:
static event_t	enterEvent				= { SUBSTATE_ENTRY } ;
static event_t	exitEvent				= { SUBSTATE_EXIT } ;


stateHandlerResponse_t callStateHandler(stateMachine_t* sm, state_t* state, event_t* event)
{
    16f6:	df 93       	push	r29
    16f8:	cf 93       	push	r28
    16fa:	cd b7       	in	r28, 0x3d	; 61
    16fc:	de b7       	in	r29, 0x3e	; 62
    16fe:	2b 97       	sbiw	r28, 0x0b	; 11
    1700:	0f b6       	in	r0, 0x3f	; 63
    1702:	f8 94       	cli
    1704:	de bf       	out	0x3e, r29	; 62
    1706:	0f be       	out	0x3f, r0	; 63
    1708:	cd bf       	out	0x3d, r28	; 61
    170a:	9b 83       	std	Y+3, r25	; 0x03
    170c:	8a 83       	std	Y+2, r24	; 0x02
    170e:	7d 83       	std	Y+5, r23	; 0x05
    1710:	6c 83       	std	Y+4, r22	; 0x04
    1712:	5f 83       	std	Y+7, r21	; 0x07
    1714:	4e 83       	std	Y+6, r20	; 0x06
	stateHandlerResponse_t	response ;

#ifdef TRACING_ENABLED
	printf("\t\t\tCalling state: %s, event: %s, ", state->stateName, event->eventType <= SUBSTATE_EXIT ? eventTypes[event->eventType] : "<USER_EVENT>") ;
    1716:	ec 81       	ldd	r30, Y+4	; 0x04
    1718:	fd 81       	ldd	r31, Y+5	; 0x05
    171a:	85 81       	ldd	r24, Z+5	; 0x05
    171c:	96 81       	ldd	r25, Z+6	; 0x06
    171e:	9b 87       	std	Y+11, r25	; 0x0b
    1720:	8a 87       	std	Y+10, r24	; 0x0a
    1722:	ee 81       	ldd	r30, Y+6	; 0x06
    1724:	ff 81       	ldd	r31, Y+7	; 0x07
    1726:	80 81       	ld	r24, Z
    1728:	84 30       	cpi	r24, 0x04	; 4
    172a:	78 f4       	brcc	.+30     	; 0x174a <callStateHandler+0x54>
    172c:	ee 81       	ldd	r30, Y+6	; 0x06
    172e:	ff 81       	ldd	r31, Y+7	; 0x07
    1730:	80 81       	ld	r24, Z
    1732:	88 2f       	mov	r24, r24
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	88 0f       	add	r24, r24
    1738:	99 1f       	adc	r25, r25
    173a:	fc 01       	movw	r30, r24
    173c:	ef 5b       	subi	r30, 0xBF	; 191
    173e:	fb 4f       	sbci	r31, 0xFB	; 251
    1740:	80 81       	ld	r24, Z
    1742:	91 81       	ldd	r25, Z+1	; 0x01
    1744:	99 87       	std	Y+9, r25	; 0x09
    1746:	88 87       	std	Y+8, r24	; 0x08
    1748:	04 c0       	rjmp	.+8      	; 0x1752 <callStateHandler+0x5c>
    174a:	8d e6       	ldi	r24, 0x6D	; 109
    174c:	94 e0       	ldi	r25, 0x04	; 4
    174e:	99 87       	std	Y+9, r25	; 0x09
    1750:	88 87       	std	Y+8, r24	; 0x08
    1752:	00 d0       	rcall	.+0      	; 0x1754 <callStateHandler+0x5e>
    1754:	00 d0       	rcall	.+0      	; 0x1756 <callStateHandler+0x60>
    1756:	00 d0       	rcall	.+0      	; 0x1758 <callStateHandler+0x62>
    1758:	ed b7       	in	r30, 0x3d	; 61
    175a:	fe b7       	in	r31, 0x3e	; 62
    175c:	31 96       	adiw	r30, 0x01	; 1
    175e:	8a e7       	ldi	r24, 0x7A	; 122
    1760:	94 e0       	ldi	r25, 0x04	; 4
    1762:	91 83       	std	Z+1, r25	; 0x01
    1764:	80 83       	st	Z, r24
    1766:	8a 85       	ldd	r24, Y+10	; 0x0a
    1768:	9b 85       	ldd	r25, Y+11	; 0x0b
    176a:	93 83       	std	Z+3, r25	; 0x03
    176c:	82 83       	std	Z+2, r24	; 0x02
    176e:	88 85       	ldd	r24, Y+8	; 0x08
    1770:	99 85       	ldd	r25, Y+9	; 0x09
    1772:	95 83       	std	Z+5, r25	; 0x05
    1774:	84 83       	std	Z+4, r24	; 0x04
    1776:	0e 94 77 11 	call	0x22ee	; 0x22ee <printf>
    177a:	8d b7       	in	r24, 0x3d	; 61
    177c:	9e b7       	in	r25, 0x3e	; 62
    177e:	06 96       	adiw	r24, 0x06	; 6
    1780:	0f b6       	in	r0, 0x3f	; 63
    1782:	f8 94       	cli
    1784:	9e bf       	out	0x3e, r25	; 62
    1786:	0f be       	out	0x3f, r0	; 63
    1788:	8d bf       	out	0x3d, r24	; 61
#endif

	response = ((callStateHandler_t)(state->handler))(sm, event) ;
    178a:	ec 81       	ldd	r30, Y+4	; 0x04
    178c:	fd 81       	ldd	r31, Y+5	; 0x05
    178e:	03 80       	ldd	r0, Z+3	; 0x03
    1790:	f4 81       	ldd	r31, Z+4	; 0x04
    1792:	e0 2d       	mov	r30, r0
    1794:	8a 81       	ldd	r24, Y+2	; 0x02
    1796:	9b 81       	ldd	r25, Y+3	; 0x03
    1798:	2e 81       	ldd	r18, Y+6	; 0x06
    179a:	3f 81       	ldd	r19, Y+7	; 0x07
    179c:	b9 01       	movw	r22, r18
    179e:	09 95       	icall
    17a0:	89 83       	std	Y+1, r24	; 0x01

#ifdef TRACING_ENABLED
	printf("response: %s ", responseTypes[response]) ;
    17a2:	89 81       	ldd	r24, Y+1	; 0x01
    17a4:	88 2f       	mov	r24, r24
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	88 0f       	add	r24, r24
    17aa:	99 1f       	adc	r25, r25
    17ac:	fc 01       	movw	r30, r24
    17ae:	ec 59       	subi	r30, 0x9C	; 156
    17b0:	fb 4f       	sbci	r31, 0xFB	; 251
    17b2:	20 81       	ld	r18, Z
    17b4:	31 81       	ldd	r19, Z+1	; 0x01
    17b6:	00 d0       	rcall	.+0      	; 0x17b8 <callStateHandler+0xc2>
    17b8:	00 d0       	rcall	.+0      	; 0x17ba <callStateHandler+0xc4>
    17ba:	ed b7       	in	r30, 0x3d	; 61
    17bc:	fe b7       	in	r31, 0x3e	; 62
    17be:	31 96       	adiw	r30, 0x01	; 1
    17c0:	8c e9       	ldi	r24, 0x9C	; 156
    17c2:	94 e0       	ldi	r25, 0x04	; 4
    17c4:	91 83       	std	Z+1, r25	; 0x01
    17c6:	80 83       	st	Z, r24
    17c8:	33 83       	std	Z+3, r19	; 0x03
    17ca:	22 83       	std	Z+2, r18	; 0x02
    17cc:	0e 94 77 11 	call	0x22ee	; 0x22ee <printf>
    17d0:	0f 90       	pop	r0
    17d2:	0f 90       	pop	r0
    17d4:	0f 90       	pop	r0
    17d6:	0f 90       	pop	r0
#endif

	if(response == TRANSITION)
    17d8:	89 81       	ldd	r24, Y+1	; 0x01
    17da:	82 30       	cpi	r24, 0x02	; 2
    17dc:	c1 f4       	brne	.+48     	; 0x180e <callStateHandler+0x118>
	{
#ifdef TRACING_ENABLED
		printf("to %s ", ((state_t*)(sm->nextState))->stateName) ;
    17de:	ea 81       	ldd	r30, Y+2	; 0x02
    17e0:	fb 81       	ldd	r31, Y+3	; 0x03
    17e2:	87 81       	ldd	r24, Z+7	; 0x07
    17e4:	90 85       	ldd	r25, Z+8	; 0x08
    17e6:	fc 01       	movw	r30, r24
    17e8:	25 81       	ldd	r18, Z+5	; 0x05
    17ea:	36 81       	ldd	r19, Z+6	; 0x06
    17ec:	00 d0       	rcall	.+0      	; 0x17ee <callStateHandler+0xf8>
    17ee:	00 d0       	rcall	.+0      	; 0x17f0 <callStateHandler+0xfa>
    17f0:	ed b7       	in	r30, 0x3d	; 61
    17f2:	fe b7       	in	r31, 0x3e	; 62
    17f4:	31 96       	adiw	r30, 0x01	; 1
    17f6:	8a ea       	ldi	r24, 0xAA	; 170
    17f8:	94 e0       	ldi	r25, 0x04	; 4
    17fa:	91 83       	std	Z+1, r25	; 0x01
    17fc:	80 83       	st	Z, r24
    17fe:	33 83       	std	Z+3, r19	; 0x03
    1800:	22 83       	std	Z+2, r18	; 0x02
    1802:	0e 94 77 11 	call	0x22ee	; 0x22ee <printf>
    1806:	0f 90       	pop	r0
    1808:	0f 90       	pop	r0
    180a:	0f 90       	pop	r0
    180c:	0f 90       	pop	r0
#endif
	}

#ifdef TRACING_ENABLED
	printf("\n") ;
    180e:	8a e0       	ldi	r24, 0x0A	; 10
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	0e 94 8c 11 	call	0x2318	; 0x2318 <putchar>
#endif

	return response ;
    1816:	89 81       	ldd	r24, Y+1	; 0x01
}
    1818:	2b 96       	adiw	r28, 0x0b	; 11
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	f8 94       	cli
    181e:	de bf       	out	0x3e, r29	; 62
    1820:	0f be       	out	0x3f, r0	; 63
    1822:	cd bf       	out	0x3d, r28	; 61
    1824:	cf 91       	pop	r28
    1826:	df 91       	pop	r29
    1828:	08 95       	ret

0000182a <iterateStateMachine>:


void iterateStateMachine(	stateMachine_t* sm)
{
    182a:	df 93       	push	r29
    182c:	cf 93       	push	r28
    182e:	cd b7       	in	r28, 0x3d	; 61
    1830:	de b7       	in	r29, 0x3e	; 62
    1832:	c7 55       	subi	r28, 0x57	; 87
    1834:	d0 40       	sbci	r29, 0x00	; 0
    1836:	0f b6       	in	r0, 0x3f	; 63
    1838:	f8 94       	cli
    183a:	de bf       	out	0x3e, r29	; 62
    183c:	0f be       	out	0x3f, r0	; 63
    183e:	cd bf       	out	0x3d, r28	; 61
    1840:	fe 01       	movw	r30, r28
    1842:	ee 5a       	subi	r30, 0xAE	; 174
    1844:	ff 4f       	sbci	r31, 0xFF	; 255
    1846:	91 83       	std	Z+1, r25	; 0x01
    1848:	80 83       	st	Z, r24
#ifdef TRACING_ENABLED
	printf("\titerating %s\n", sm->stateMachineName) ;
    184a:	fe 01       	movw	r30, r28
    184c:	ee 5a       	subi	r30, 0xAE	; 174
    184e:	ff 4f       	sbci	r31, 0xFF	; 255
    1850:	01 90       	ld	r0, Z+
    1852:	f0 81       	ld	r31, Z
    1854:	e0 2d       	mov	r30, r0
    1856:	23 81       	ldd	r18, Z+3	; 0x03
    1858:	34 81       	ldd	r19, Z+4	; 0x04
    185a:	00 d0       	rcall	.+0      	; 0x185c <iterateStateMachine+0x32>
    185c:	00 d0       	rcall	.+0      	; 0x185e <iterateStateMachine+0x34>
    185e:	ed b7       	in	r30, 0x3d	; 61
    1860:	fe b7       	in	r31, 0x3e	; 62
    1862:	31 96       	adiw	r30, 0x01	; 1
    1864:	81 eb       	ldi	r24, 0xB1	; 177
    1866:	94 e0       	ldi	r25, 0x04	; 4
    1868:	91 83       	std	Z+1, r25	; 0x01
    186a:	80 83       	st	Z, r24
    186c:	33 83       	std	Z+3, r19	; 0x03
    186e:	22 83       	std	Z+2, r18	; 0x02
    1870:	0e 94 77 11 	call	0x22ee	; 0x22ee <printf>
    1874:	0f 90       	pop	r0
    1876:	0f 90       	pop	r0
    1878:	0f 90       	pop	r0
    187a:	0f 90       	pop	r0
#endif

	/* First of all, is the machine initialized? If not, take care of that. */

	if(!sm->stateMachineInitialized)
    187c:	fe 01       	movw	r30, r28
    187e:	ee 5a       	subi	r30, 0xAE	; 174
    1880:	ff 4f       	sbci	r31, 0xFF	; 255
    1882:	01 90       	ld	r0, Z+
    1884:	f0 81       	ld	r31, Z
    1886:	e0 2d       	mov	r30, r0
    1888:	87 85       	ldd	r24, Z+15	; 0x0f
    188a:	88 23       	and	r24, r24
    188c:	c1 f5       	brne	.+112    	; 0x18fe <iterateStateMachine+0xd4>
	{
#ifdef TRACING_ENABLED
		printf("\t\tinitializing...\n") ;
    188e:	80 ec       	ldi	r24, 0xC0	; 192
    1890:	94 e0       	ldi	r25, 0x04	; 4
    1892:	0e 94 93 11 	call	0x2326	; 0x2326 <puts>
#endif

		sm->currentState = (state_t*)sm->topState ;
    1896:	fe 01       	movw	r30, r28
    1898:	ee 5a       	subi	r30, 0xAE	; 174
    189a:	ff 4f       	sbci	r31, 0xFF	; 255
    189c:	01 90       	ld	r0, Z+
    189e:	f0 81       	ld	r31, Z
    18a0:	e0 2d       	mov	r30, r0
    18a2:	80 81       	ld	r24, Z
    18a4:	91 81       	ldd	r25, Z+1	; 0x01
    18a6:	fe 01       	movw	r30, r28
    18a8:	ee 5a       	subi	r30, 0xAE	; 174
    18aa:	ff 4f       	sbci	r31, 0xFF	; 255
    18ac:	01 90       	ld	r0, Z+
    18ae:	f0 81       	ld	r31, Z
    18b0:	e0 2d       	mov	r30, r0
    18b2:	96 83       	std	Z+6, r25	; 0x06
    18b4:	85 83       	std	Z+5, r24	; 0x05

		callStateHandler(sm, sm->currentState, &enterEvent) ;
    18b6:	fe 01       	movw	r30, r28
    18b8:	ee 5a       	subi	r30, 0xAE	; 174
    18ba:	ff 4f       	sbci	r31, 0xFF	; 255
    18bc:	01 90       	ld	r0, Z+
    18be:	f0 81       	ld	r31, Z
    18c0:	e0 2d       	mov	r30, r0
    18c2:	85 81       	ldd	r24, Z+5	; 0x05
    18c4:	96 81       	ldd	r25, Z+6	; 0x06
    18c6:	ac 01       	movw	r20, r24
    18c8:	fe 01       	movw	r30, r28
    18ca:	ee 5a       	subi	r30, 0xAE	; 174
    18cc:	ff 4f       	sbci	r31, 0xFF	; 255
    18ce:	80 81       	ld	r24, Z
    18d0:	91 81       	ldd	r25, Z+1	; 0x01
    18d2:	2b e6       	ldi	r18, 0x6B	; 107
    18d4:	34 e0       	ldi	r19, 0x04	; 4
    18d6:	ba 01       	movw	r22, r20
    18d8:	a9 01       	movw	r20, r18
    18da:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <callStateHandler>

		sm->stateMachineInitialized	= true ;
    18de:	fe 01       	movw	r30, r28
    18e0:	ee 5a       	subi	r30, 0xAE	; 174
    18e2:	ff 4f       	sbci	r31, 0xFF	; 255
    18e4:	01 90       	ld	r0, Z+
    18e6:	f0 81       	ld	r31, Z
    18e8:	e0 2d       	mov	r30, r0
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	87 87       	std	Z+15, r24	; 0x0f
		sm->forceTransition			= true ;
    18ee:	fe 01       	movw	r30, r28
    18f0:	ee 5a       	subi	r30, 0xAE	; 174
    18f2:	ff 4f       	sbci	r31, 0xFF	; 255
    18f4:	01 90       	ld	r0, Z+
    18f6:	f0 81       	ld	r31, Z
    18f8:	e0 2d       	mov	r30, r0
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	80 8b       	std	Z+16, r24	; 0x10
	}

	/* Any pending events? */

	if((!isEmpty(&sm->eventQueue)) || (sm->forceTransition))
    18fe:	fe 01       	movw	r30, r28
    1900:	ee 5a       	subi	r30, 0xAE	; 174
    1902:	ff 4f       	sbci	r31, 0xFF	; 255
    1904:	80 81       	ld	r24, Z
    1906:	91 81       	ldd	r25, Z+1	; 0x01
    1908:	09 96       	adiw	r24, 0x09	; 9
    190a:	0e 94 22 09 	call	0x1244	; 0x1244 <isEmpty>
    190e:	88 23       	and	r24, r24
    1910:	51 f0       	breq	.+20     	; 0x1926 <iterateStateMachine+0xfc>
    1912:	fe 01       	movw	r30, r28
    1914:	ee 5a       	subi	r30, 0xAE	; 174
    1916:	ff 4f       	sbci	r31, 0xFF	; 255
    1918:	01 90       	ld	r0, Z+
    191a:	f0 81       	ld	r31, Z
    191c:	e0 2d       	mov	r30, r0
    191e:	80 89       	ldd	r24, Z+16	; 0x10
    1920:	88 23       	and	r24, r24
    1922:	09 f4       	brne	.+2      	; 0x1926 <iterateStateMachine+0xfc>
    1924:	ca c3       	rjmp	.+1940   	; 0x20ba <iterateStateMachine+0x890>
	{
		event_t*				eventToProcess ;
		state_t*				stateBeingProcessed	= sm->currentState ;
    1926:	fe 01       	movw	r30, r28
    1928:	ee 5a       	subi	r30, 0xAE	; 174
    192a:	ff 4f       	sbci	r31, 0xFF	; 255
    192c:	01 90       	ld	r0, Z+
    192e:	f0 81       	ld	r31, Z
    1930:	e0 2d       	mov	r30, r0
    1932:	85 81       	ldd	r24, Z+5	; 0x05
    1934:	96 81       	ldd	r25, Z+6	; 0x06
    1936:	9f 87       	std	Y+15, r25	; 0x0f
    1938:	8e 87       	std	Y+14, r24	; 0x0e
		stateHandlerResponse_t	action ;

		if(sm->forceTransition)
    193a:	fe 01       	movw	r30, r28
    193c:	ee 5a       	subi	r30, 0xAE	; 174
    193e:	ff 4f       	sbci	r31, 0xFF	; 255
    1940:	01 90       	ld	r0, Z+
    1942:	f0 81       	ld	r31, Z
    1944:	e0 2d       	mov	r30, r0
    1946:	80 89       	ldd	r24, Z+16	; 0x10
    1948:	88 23       	and	r24, r24
    194a:	61 f0       	breq	.+24     	; 0x1964 <iterateStateMachine+0x13a>
		{
			sm->forceTransition	= false ;
    194c:	fe 01       	movw	r30, r28
    194e:	ee 5a       	subi	r30, 0xAE	; 174
    1950:	ff 4f       	sbci	r31, 0xFF	; 255
    1952:	01 90       	ld	r0, Z+
    1954:	f0 81       	ld	r31, Z
    1956:	e0 2d       	mov	r30, r0
    1958:	10 8a       	std	Z+16, r1	; 0x10
			eventToProcess		= &initialTransitionEvent ;
    195a:	8a e6       	ldi	r24, 0x6A	; 106
    195c:	94 e0       	ldi	r25, 0x04	; 4
    195e:	99 8b       	std	Y+17, r25	; 0x11
    1960:	88 8b       	std	Y+16, r24	; 0x10
    1962:	0a c0       	rjmp	.+20     	; 0x1978 <iterateStateMachine+0x14e>
		}
		else
		{
			eventToProcess = Remove(&sm->eventQueue) ; ;
    1964:	fe 01       	movw	r30, r28
    1966:	ee 5a       	subi	r30, 0xAE	; 174
    1968:	ff 4f       	sbci	r31, 0xFF	; 255
    196a:	80 81       	ld	r24, Z
    196c:	91 81       	ldd	r25, Z+1	; 0x01
    196e:	09 96       	adiw	r24, 0x09	; 9
    1970:	0e 94 2a 0a 	call	0x1454	; 0x1454 <Remove>
    1974:	99 8b       	std	Y+17, r25	; 0x11
    1976:	88 8b       	std	Y+16, r24	; 0x10
		}

		sm->nextState = (state_t*)0 ;	/* just a little housecleaning */
    1978:	fe 01       	movw	r30, r28
    197a:	ee 5a       	subi	r30, 0xAE	; 174
    197c:	ff 4f       	sbci	r31, 0xFF	; 255
    197e:	01 90       	ld	r0, Z+
    1980:	f0 81       	ld	r31, Z
    1982:	e0 2d       	mov	r30, r0
    1984:	10 86       	std	Z+8, r1	; 0x08
    1986:	17 82       	std	Z+7, r1	; 0x07

#ifdef TRACING_ENABLED
		printf("\t\tProcessing event...\n") ;
    1988:	82 ed       	ldi	r24, 0xD2	; 210
    198a:	94 e0       	ldi	r25, 0x04	; 4
    198c:	0e 94 93 11 	call	0x2326	; 0x2326 <puts>
		 * state machine events and it is ignored, move up to the parent state
		 * and try again. When the top is reached, bail... */

		do
		{
			action = callStateHandler(sm, stateBeingProcessed, eventToProcess) ;
    1990:	fe 01       	movw	r30, r28
    1992:	ee 5a       	subi	r30, 0xAE	; 174
    1994:	ff 4f       	sbci	r31, 0xFF	; 255
    1996:	80 81       	ld	r24, Z
    1998:	91 81       	ldd	r25, Z+1	; 0x01
    199a:	2e 85       	ldd	r18, Y+14	; 0x0e
    199c:	3f 85       	ldd	r19, Y+15	; 0x0f
    199e:	48 89       	ldd	r20, Y+16	; 0x10
    19a0:	59 89       	ldd	r21, Y+17	; 0x11
    19a2:	b9 01       	movw	r22, r18
    19a4:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <callStateHandler>
    19a8:	8d 87       	std	Y+13, r24	; 0x0d

			if((action == IGNORED) && (eventToProcess->eventType > SUBSTATE_EXIT))
    19aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ac:	88 23       	and	r24, r24
    19ae:	c1 f5       	brne	.+112    	; 0x1a20 <iterateStateMachine+0x1f6>
    19b0:	e8 89       	ldd	r30, Y+16	; 0x10
    19b2:	f9 89       	ldd	r31, Y+17	; 0x11
    19b4:	80 81       	ld	r24, Z
    19b6:	84 30       	cpi	r24, 0x04	; 4
    19b8:	98 f1       	brcs	.+102    	; 0x1a20 <iterateStateMachine+0x1f6>
			{
				stateBeingProcessed = (state_t*)(stateBeingProcessed->parent) ;
    19ba:	ee 85       	ldd	r30, Y+14	; 0x0e
    19bc:	ff 85       	ldd	r31, Y+15	; 0x0f
    19be:	80 81       	ld	r24, Z
    19c0:	91 81       	ldd	r25, Z+1	; 0x01
    19c2:	9f 87       	std	Y+15, r25	; 0x0f
    19c4:	8e 87       	std	Y+14, r24	; 0x0e

#ifdef TRACING_ENABLED
				printf("\t\t\t\t\t\t\tmoving to parent: %s\n", stateBeingProcessed ? stateBeingProcessed->stateName : "<root>") ;
    19c6:	8e 85       	ldd	r24, Y+14	; 0x0e
    19c8:	9f 85       	ldd	r25, Y+15	; 0x0f
    19ca:	00 97       	sbiw	r24, 0x00	; 0
    19cc:	49 f0       	breq	.+18     	; 0x19e0 <iterateStateMachine+0x1b6>
    19ce:	ee 85       	ldd	r30, Y+14	; 0x0e
    19d0:	ff 85       	ldd	r31, Y+15	; 0x0f
    19d2:	85 81       	ldd	r24, Z+5	; 0x05
    19d4:	96 81       	ldd	r25, Z+6	; 0x06
    19d6:	66 96       	adiw	r28, 0x16	; 22
    19d8:	9f af       	std	Y+63, r25	; 0x3f
    19da:	8e af       	std	Y+62, r24	; 0x3e
    19dc:	66 97       	sbiw	r28, 0x16	; 22
    19de:	06 c0       	rjmp	.+12     	; 0x19ec <iterateStateMachine+0x1c2>
    19e0:	88 ee       	ldi	r24, 0xE8	; 232
    19e2:	94 e0       	ldi	r25, 0x04	; 4
    19e4:	66 96       	adiw	r28, 0x16	; 22
    19e6:	9f af       	std	Y+63, r25	; 0x3f
    19e8:	8e af       	std	Y+62, r24	; 0x3e
    19ea:	66 97       	sbiw	r28, 0x16	; 22
    19ec:	00 d0       	rcall	.+0      	; 0x19ee <iterateStateMachine+0x1c4>
    19ee:	00 d0       	rcall	.+0      	; 0x19f0 <iterateStateMachine+0x1c6>
    19f0:	ed b7       	in	r30, 0x3d	; 61
    19f2:	fe b7       	in	r31, 0x3e	; 62
    19f4:	31 96       	adiw	r30, 0x01	; 1
    19f6:	8f ee       	ldi	r24, 0xEF	; 239
    19f8:	94 e0       	ldi	r25, 0x04	; 4
    19fa:	91 83       	std	Z+1, r25	; 0x01
    19fc:	80 83       	st	Z, r24
    19fe:	66 96       	adiw	r28, 0x16	; 22
    1a00:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a02:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a04:	66 97       	sbiw	r28, 0x16	; 22
    1a06:	93 83       	std	Z+3, r25	; 0x03
    1a08:	82 83       	std	Z+2, r24	; 0x02
    1a0a:	0e 94 77 11 	call	0x22ee	; 0x22ee <printf>
    1a0e:	0f 90       	pop	r0
    1a10:	0f 90       	pop	r0
    1a12:	0f 90       	pop	r0
    1a14:	0f 90       	pop	r0
				/* The event was handled or a transition was taken.
				 * In either case, no need to continue up the chain. */

				break ;
			}
		} while(stateBeingProcessed) ;
    1a16:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a18:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a1a:	00 97       	sbiw	r24, 0x00	; 0
    1a1c:	09 f0       	breq	.+2      	; 0x1a20 <iterateStateMachine+0x1f6>
    1a1e:	b8 cf       	rjmp	.-144    	; 0x1990 <iterateStateMachine+0x166>

		if(action == TRANSITION)
    1a20:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a22:	82 30       	cpi	r24, 0x02	; 2
    1a24:	09 f0       	breq	.+2      	; 0x1a28 <iterateStateMachine+0x1fe>
    1a26:	49 c3       	rjmp	.+1682   	; 0x20ba <iterateStateMachine+0x890>
		{
			state_t*	source	= sm->currentState ;
    1a28:	fe 01       	movw	r30, r28
    1a2a:	ee 5a       	subi	r30, 0xAE	; 174
    1a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2e:	01 90       	ld	r0, Z+
    1a30:	f0 81       	ld	r31, Z
    1a32:	e0 2d       	mov	r30, r0
    1a34:	85 81       	ldd	r24, Z+5	; 0x05
    1a36:	96 81       	ldd	r25, Z+6	; 0x06
    1a38:	9c 87       	std	Y+12, r25	; 0x0c
    1a3a:	8b 87       	std	Y+11, r24	; 0x0b
			state_t*	target	= sm->nextState ;
    1a3c:	fe 01       	movw	r30, r28
    1a3e:	ee 5a       	subi	r30, 0xAE	; 174
    1a40:	ff 4f       	sbci	r31, 0xFF	; 255
    1a42:	01 90       	ld	r0, Z+
    1a44:	f0 81       	ld	r31, Z
    1a46:	e0 2d       	mov	r30, r0
    1a48:	87 81       	ldd	r24, Z+7	; 0x07
    1a4a:	90 85       	ldd	r25, Z+8	; 0x08
    1a4c:	9a 87       	std	Y+10, r25	; 0x0a
    1a4e:	89 87       	std	Y+9, r24	; 0x09

			/* There are 8 different cases here. They are handled in case of complexity... */

			if(source == target)
    1a50:	2b 85       	ldd	r18, Y+11	; 0x0b
    1a52:	3c 85       	ldd	r19, Y+12	; 0x0c
    1a54:	89 85       	ldd	r24, Y+9	; 0x09
    1a56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a58:	28 17       	cp	r18, r24
    1a5a:	39 07       	cpc	r19, r25
    1a5c:	39 f5       	brne	.+78     	; 0x1aac <iterateStateMachine+0x282>
			{
#ifdef TRACING_ENABLED
				printf("\t\t\t\tSelf transition.\n") ;
    1a5e:	8c e0       	ldi	r24, 0x0C	; 12
    1a60:	95 e0       	ldi	r25, 0x05	; 5
    1a62:	0e 94 93 11 	call	0x2326	; 0x2326 <puts>
#endif

				/* Self transition. Exit and then re-enter the same state */

				callStateHandler(sm, source, &exitEvent) ;
    1a66:	fe 01       	movw	r30, r28
    1a68:	ee 5a       	subi	r30, 0xAE	; 174
    1a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6c:	80 81       	ld	r24, Z
    1a6e:	91 81       	ldd	r25, Z+1	; 0x01
    1a70:	2b 85       	ldd	r18, Y+11	; 0x0b
    1a72:	3c 85       	ldd	r19, Y+12	; 0x0c
    1a74:	4c e6       	ldi	r20, 0x6C	; 108
    1a76:	54 e0       	ldi	r21, 0x04	; 4
    1a78:	b9 01       	movw	r22, r18
    1a7a:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <callStateHandler>
				sm->currentState = target ;
    1a7e:	fe 01       	movw	r30, r28
    1a80:	ee 5a       	subi	r30, 0xAE	; 174
    1a82:	ff 4f       	sbci	r31, 0xFF	; 255
    1a84:	01 90       	ld	r0, Z+
    1a86:	f0 81       	ld	r31, Z
    1a88:	e0 2d       	mov	r30, r0
    1a8a:	89 85       	ldd	r24, Y+9	; 0x09
    1a8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a8e:	96 83       	std	Z+6, r25	; 0x06
    1a90:	85 83       	std	Z+5, r24	; 0x05
				callStateHandler(sm, target, &enterEvent) ;
    1a92:	fe 01       	movw	r30, r28
    1a94:	ee 5a       	subi	r30, 0xAE	; 174
    1a96:	ff 4f       	sbci	r31, 0xFF	; 255
    1a98:	80 81       	ld	r24, Z
    1a9a:	91 81       	ldd	r25, Z+1	; 0x01
    1a9c:	29 85       	ldd	r18, Y+9	; 0x09
    1a9e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1aa0:	4b e6       	ldi	r20, 0x6B	; 107
    1aa2:	54 e0       	ldi	r21, 0x04	; 4
    1aa4:	b9 01       	movw	r22, r18
    1aa6:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <callStateHandler>
    1aaa:	ff c2       	rjmp	.+1534   	; 0x20aa <iterateStateMachine+0x880>
			}
			else if(source == (state_t*)(target->parent))
    1aac:	e9 85       	ldd	r30, Y+9	; 0x09
    1aae:	fa 85       	ldd	r31, Y+10	; 0x0a
    1ab0:	80 81       	ld	r24, Z
    1ab2:	91 81       	ldd	r25, Z+1	; 0x01
    1ab4:	9c 01       	movw	r18, r24
    1ab6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ab8:	9c 85       	ldd	r25, Y+12	; 0x0c
    1aba:	28 17       	cp	r18, r24
    1abc:	39 07       	cpc	r19, r25
    1abe:	d9 f4       	brne	.+54     	; 0x1af6 <iterateStateMachine+0x2cc>
			{
#ifdef TRACING_ENABLED
				printf("\t\t\t\tTransition to direct child.\n") ;
    1ac0:	81 e2       	ldi	r24, 0x21	; 33
    1ac2:	95 e0       	ldi	r25, 0x05	; 5
    1ac4:	0e 94 93 11 	call	0x2326	; 0x2326 <puts>
#endif

				/* target is a direct child of the source. Only need to enter
				 * the target here without having to exit the source. */

				sm->currentState = target ;
    1ac8:	fe 01       	movw	r30, r28
    1aca:	ee 5a       	subi	r30, 0xAE	; 174
    1acc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ace:	01 90       	ld	r0, Z+
    1ad0:	f0 81       	ld	r31, Z
    1ad2:	e0 2d       	mov	r30, r0
    1ad4:	89 85       	ldd	r24, Y+9	; 0x09
    1ad6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad8:	96 83       	std	Z+6, r25	; 0x06
    1ada:	85 83       	std	Z+5, r24	; 0x05
				callStateHandler(sm, target, &enterEvent) ;
    1adc:	fe 01       	movw	r30, r28
    1ade:	ee 5a       	subi	r30, 0xAE	; 174
    1ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae2:	80 81       	ld	r24, Z
    1ae4:	91 81       	ldd	r25, Z+1	; 0x01
    1ae6:	29 85       	ldd	r18, Y+9	; 0x09
    1ae8:	3a 85       	ldd	r19, Y+10	; 0x0a
    1aea:	4b e6       	ldi	r20, 0x6B	; 107
    1aec:	54 e0       	ldi	r21, 0x04	; 4
    1aee:	b9 01       	movw	r22, r18
    1af0:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <callStateHandler>
    1af4:	da c2       	rjmp	.+1460   	; 0x20aa <iterateStateMachine+0x880>
			}
			else if((state_t*)(source->parent) == (state_t*)(target->parent))
    1af6:	eb 85       	ldd	r30, Y+11	; 0x0b
    1af8:	fc 85       	ldd	r31, Y+12	; 0x0c
    1afa:	80 81       	ld	r24, Z
    1afc:	91 81       	ldd	r25, Z+1	; 0x01
    1afe:	9c 01       	movw	r18, r24
    1b00:	e9 85       	ldd	r30, Y+9	; 0x09
    1b02:	fa 85       	ldd	r31, Y+10	; 0x0a
    1b04:	80 81       	ld	r24, Z
    1b06:	91 81       	ldd	r25, Z+1	; 0x01
    1b08:	28 17       	cp	r18, r24
    1b0a:	39 07       	cpc	r19, r25
    1b0c:	39 f5       	brne	.+78     	; 0x1b5c <iterateStateMachine+0x332>
			{
#ifdef TRACING_ENABLED
				printf("\t\t\t\tTransition to direct peer.\n") ;
    1b0e:	81 e4       	ldi	r24, 0x41	; 65
    1b10:	95 e0       	ldi	r25, 0x05	; 5
    1b12:	0e 94 93 11 	call	0x2326	; 0x2326 <puts>
#endif

				/* A direct peer transition within the same parent state.
				 * Exit the source and then enter the target. */

				callStateHandler(sm, source, &exitEvent) ;
    1b16:	fe 01       	movw	r30, r28
    1b18:	ee 5a       	subi	r30, 0xAE	; 174
    1b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1c:	80 81       	ld	r24, Z
    1b1e:	91 81       	ldd	r25, Z+1	; 0x01
    1b20:	2b 85       	ldd	r18, Y+11	; 0x0b
    1b22:	3c 85       	ldd	r19, Y+12	; 0x0c
    1b24:	4c e6       	ldi	r20, 0x6C	; 108
    1b26:	54 e0       	ldi	r21, 0x04	; 4
    1b28:	b9 01       	movw	r22, r18
    1b2a:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <callStateHandler>
				sm->currentState = target ;
    1b2e:	fe 01       	movw	r30, r28
    1b30:	ee 5a       	subi	r30, 0xAE	; 174
    1b32:	ff 4f       	sbci	r31, 0xFF	; 255
    1b34:	01 90       	ld	r0, Z+
    1b36:	f0 81       	ld	r31, Z
    1b38:	e0 2d       	mov	r30, r0
    1b3a:	89 85       	ldd	r24, Y+9	; 0x09
    1b3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b3e:	96 83       	std	Z+6, r25	; 0x06
    1b40:	85 83       	std	Z+5, r24	; 0x05
				callStateHandler(sm, target, &enterEvent) ;
    1b42:	fe 01       	movw	r30, r28
    1b44:	ee 5a       	subi	r30, 0xAE	; 174
    1b46:	ff 4f       	sbci	r31, 0xFF	; 255
    1b48:	80 81       	ld	r24, Z
    1b4a:	91 81       	ldd	r25, Z+1	; 0x01
    1b4c:	29 85       	ldd	r18, Y+9	; 0x09
    1b4e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b50:	4b e6       	ldi	r20, 0x6B	; 107
    1b52:	54 e0       	ldi	r21, 0x04	; 4
    1b54:	b9 01       	movw	r22, r18
    1b56:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <callStateHandler>
    1b5a:	a7 c2       	rjmp	.+1358   	; 0x20aa <iterateStateMachine+0x880>
			}
			else if((state_t*)(source->parent) == target)
    1b5c:	eb 85       	ldd	r30, Y+11	; 0x0b
    1b5e:	fc 85       	ldd	r31, Y+12	; 0x0c
    1b60:	80 81       	ld	r24, Z
    1b62:	91 81       	ldd	r25, Z+1	; 0x01
    1b64:	9c 01       	movw	r18, r24
    1b66:	89 85       	ldd	r24, Y+9	; 0x09
    1b68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b6a:	28 17       	cp	r18, r24
    1b6c:	39 07       	cpc	r19, r25
    1b6e:	d9 f4       	brne	.+54     	; 0x1ba6 <iterateStateMachine+0x37c>
			{
#ifdef TRACING_ENABLED
				printf("\t\t\t\tTransition to direct parent.\n") ;
    1b70:	80 e6       	ldi	r24, 0x60	; 96
    1b72:	95 e0       	ldi	r25, 0x05	; 5
    1b74:	0e 94 93 11 	call	0x2326	; 0x2326 <puts>

				/* target is the direct parent of the source. Only need to exit
				 * the source without having to re-enter the target since it
				 * was already active. */

				sm->currentState = target ;
    1b78:	fe 01       	movw	r30, r28
    1b7a:	ee 5a       	subi	r30, 0xAE	; 174
    1b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7e:	01 90       	ld	r0, Z+
    1b80:	f0 81       	ld	r31, Z
    1b82:	e0 2d       	mov	r30, r0
    1b84:	89 85       	ldd	r24, Y+9	; 0x09
    1b86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b88:	96 83       	std	Z+6, r25	; 0x06
    1b8a:	85 83       	std	Z+5, r24	; 0x05
				callStateHandler(sm, source, &exitEvent) ;
    1b8c:	fe 01       	movw	r30, r28
    1b8e:	ee 5a       	subi	r30, 0xAE	; 174
    1b90:	ff 4f       	sbci	r31, 0xFF	; 255
    1b92:	80 81       	ld	r24, Z
    1b94:	91 81       	ldd	r25, Z+1	; 0x01
    1b96:	2b 85       	ldd	r18, Y+11	; 0x0b
    1b98:	3c 85       	ldd	r19, Y+12	; 0x0c
    1b9a:	4c e6       	ldi	r20, 0x6C	; 108
    1b9c:	54 e0       	ldi	r21, 0x04	; 4
    1b9e:	b9 01       	movw	r22, r18
    1ba0:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <callStateHandler>
    1ba4:	82 c2       	rjmp	.+1284   	; 0x20aa <iterateStateMachine+0x880>
				uint8_t		exitIndex ;

				/* This is where things start to get complicated... */

#ifdef TRACING_ENABLED
				printf("\t\t\t\tScanning source hierarchy...\n") ;
    1ba6:	81 e8       	ldi	r24, 0x81	; 129
    1ba8:	95 e0       	ldi	r25, 0x05	; 5
    1baa:	0e 94 93 11 	call	0x2326	; 0x2326 <puts>
#endif

				sourceIndex			= 0 ;
    1bae:	18 86       	std	Y+8, r1	; 0x08
				targetIndex			= 0 ;
    1bb0:	1f 82       	std	Y+7, r1	; 0x07
				stateBeingProcessed	= source ;
    1bb2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bb4:	9c 85       	ldd	r25, Y+12	; 0x0c
    1bb6:	9f 87       	std	Y+15, r25	; 0x0f
    1bb8:	8e 87       	std	Y+14, r24	; 0x0e

				do
				{
					sourceHierarchy[sourceIndex++] = stateBeingProcessed ;
    1bba:	88 85       	ldd	r24, Y+8	; 0x08
    1bbc:	88 2f       	mov	r24, r24
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	9c 01       	movw	r18, r24
    1bc2:	22 0f       	add	r18, r18
    1bc4:	33 1f       	adc	r19, r19
    1bc6:	ce 01       	movw	r24, r28
    1bc8:	01 96       	adiw	r24, 0x01	; 1
    1bca:	82 0f       	add	r24, r18
    1bcc:	93 1f       	adc	r25, r19
    1bce:	fc 01       	movw	r30, r24
    1bd0:	71 96       	adiw	r30, 0x11	; 17
    1bd2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bd4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bd6:	91 83       	std	Z+1, r25	; 0x01
    1bd8:	80 83       	st	Z, r24
    1bda:	88 85       	ldd	r24, Y+8	; 0x08
    1bdc:	8f 5f       	subi	r24, 0xFF	; 255
    1bde:	88 87       	std	Y+8, r24	; 0x08

#ifdef TRACING_ENABLED
					printf("\t\t\t\t\tsourceHierarchy[%d] = %s\n", sourceIndex - 1, stateBeingProcessed->stateName) ;
    1be0:	88 85       	ldd	r24, Y+8	; 0x08
    1be2:	88 2f       	mov	r24, r24
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	ac 01       	movw	r20, r24
    1be8:	41 50       	subi	r20, 0x01	; 1
    1bea:	50 40       	sbci	r21, 0x00	; 0
    1bec:	ee 85       	ldd	r30, Y+14	; 0x0e
    1bee:	ff 85       	ldd	r31, Y+15	; 0x0f
    1bf0:	25 81       	ldd	r18, Z+5	; 0x05
    1bf2:	36 81       	ldd	r19, Z+6	; 0x06
    1bf4:	00 d0       	rcall	.+0      	; 0x1bf6 <iterateStateMachine+0x3cc>
    1bf6:	00 d0       	rcall	.+0      	; 0x1bf8 <iterateStateMachine+0x3ce>
    1bf8:	00 d0       	rcall	.+0      	; 0x1bfa <iterateStateMachine+0x3d0>
    1bfa:	ed b7       	in	r30, 0x3d	; 61
    1bfc:	fe b7       	in	r31, 0x3e	; 62
    1bfe:	31 96       	adiw	r30, 0x01	; 1
    1c00:	82 ea       	ldi	r24, 0xA2	; 162
    1c02:	95 e0       	ldi	r25, 0x05	; 5
    1c04:	91 83       	std	Z+1, r25	; 0x01
    1c06:	80 83       	st	Z, r24
    1c08:	53 83       	std	Z+3, r21	; 0x03
    1c0a:	42 83       	std	Z+2, r20	; 0x02
    1c0c:	35 83       	std	Z+5, r19	; 0x05
    1c0e:	24 83       	std	Z+4, r18	; 0x04
    1c10:	0e 94 77 11 	call	0x22ee	; 0x22ee <printf>
    1c14:	8d b7       	in	r24, 0x3d	; 61
    1c16:	9e b7       	in	r25, 0x3e	; 62
    1c18:	06 96       	adiw	r24, 0x06	; 6
    1c1a:	0f b6       	in	r0, 0x3f	; 63
    1c1c:	f8 94       	cli
    1c1e:	9e bf       	out	0x3e, r25	; 62
    1c20:	0f be       	out	0x3f, r0	; 63
    1c22:	8d bf       	out	0x3d, r24	; 61
#endif

					if(stateBeingProcessed == target)
    1c24:	2e 85       	ldd	r18, Y+14	; 0x0e
    1c26:	3f 85       	ldd	r19, Y+15	; 0x0f
    1c28:	89 85       	ldd	r24, Y+9	; 0x09
    1c2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c2c:	28 17       	cp	r18, r24
    1c2e:	39 07       	cpc	r19, r25
    1c30:	09 f0       	breq	.+2      	; 0x1c34 <iterateStateMachine+0x40a>
    1c32:	40 c0       	rjmp	.+128    	; 0x1cb4 <iterateStateMachine+0x48a>
					{
						uint8_t	exitIndex = 0 ;
    1c34:	1a 82       	std	Y+2, r1	; 0x02

#ifdef TRACING_ENABLED
						printf("\t\t\t\t\t\tFound target as ancestor of source\n") ;
    1c36:	81 ec       	ldi	r24, 0xC1	; 193
    1c38:	95 e0       	ldi	r25, 0x05	; 5
    1c3a:	0e 94 93 11 	call	0x2326	; 0x2326 <puts>
#endif

						sourceIndex-- ;
    1c3e:	88 85       	ldd	r24, Y+8	; 0x08
    1c40:	81 50       	subi	r24, 0x01	; 1
    1c42:	88 87       	std	Y+8, r24	; 0x08
    1c44:	28 c0       	rjmp	.+80     	; 0x1c96 <iterateStateMachine+0x46c>

						while(exitIndex < sourceIndex)
						{
#ifdef TRACING_ENABLED
							printf("\t\t\t\t") ;
    1c46:	00 d0       	rcall	.+0      	; 0x1c48 <iterateStateMachine+0x41e>
    1c48:	ed b7       	in	r30, 0x3d	; 61
    1c4a:	fe b7       	in	r31, 0x3e	; 62
    1c4c:	31 96       	adiw	r30, 0x01	; 1
    1c4e:	8a ee       	ldi	r24, 0xEA	; 234
    1c50:	95 e0       	ldi	r25, 0x05	; 5
    1c52:	91 83       	std	Z+1, r25	; 0x01
    1c54:	80 83       	st	Z, r24
    1c56:	0e 94 77 11 	call	0x22ee	; 0x22ee <printf>
    1c5a:	0f 90       	pop	r0
    1c5c:	0f 90       	pop	r0
#endif

							callStateHandler(sm, sourceHierarchy[exitIndex], &exitEvent) ;
    1c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c60:	88 2f       	mov	r24, r24
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	9c 01       	movw	r18, r24
    1c66:	22 0f       	add	r18, r18
    1c68:	33 1f       	adc	r19, r19
    1c6a:	ce 01       	movw	r24, r28
    1c6c:	01 96       	adiw	r24, 0x01	; 1
    1c6e:	82 0f       	add	r24, r18
    1c70:	93 1f       	adc	r25, r19
    1c72:	fc 01       	movw	r30, r24
    1c74:	71 96       	adiw	r30, 0x11	; 17
    1c76:	40 81       	ld	r20, Z
    1c78:	51 81       	ldd	r21, Z+1	; 0x01
    1c7a:	fe 01       	movw	r30, r28
    1c7c:	ee 5a       	subi	r30, 0xAE	; 174
    1c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c80:	80 81       	ld	r24, Z
    1c82:	91 81       	ldd	r25, Z+1	; 0x01
    1c84:	2c e6       	ldi	r18, 0x6C	; 108
    1c86:	34 e0       	ldi	r19, 0x04	; 4
    1c88:	ba 01       	movw	r22, r20
    1c8a:	a9 01       	movw	r20, r18
    1c8c:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <callStateHandler>

							exitIndex++ ;
    1c90:	8a 81       	ldd	r24, Y+2	; 0x02
    1c92:	8f 5f       	subi	r24, 0xFF	; 255
    1c94:	8a 83       	std	Y+2, r24	; 0x02
						printf("\t\t\t\t\t\tFound target as ancestor of source\n") ;
#endif

						sourceIndex-- ;

						while(exitIndex < sourceIndex)
    1c96:	9a 81       	ldd	r25, Y+2	; 0x02
    1c98:	88 85       	ldd	r24, Y+8	; 0x08
    1c9a:	98 17       	cp	r25, r24
    1c9c:	a0 f2       	brcs	.-88     	; 0x1c46 <iterateStateMachine+0x41c>
							callStateHandler(sm, sourceHierarchy[exitIndex], &exitEvent) ;

							exitIndex++ ;
						}

						sm->currentState = target ;
    1c9e:	fe 01       	movw	r30, r28
    1ca0:	ee 5a       	subi	r30, 0xAE	; 174
    1ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca4:	01 90       	ld	r0, Z+
    1ca6:	f0 81       	ld	r31, Z
    1ca8:	e0 2d       	mov	r30, r0
    1caa:	89 85       	ldd	r24, Y+9	; 0x09
    1cac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cae:	96 83       	std	Z+6, r25	; 0x06
    1cb0:	85 83       	std	Z+5, r24	; 0x05
    1cb2:	0b c0       	rjmp	.+22     	; 0x1cca <iterateStateMachine+0x4a0>

						break ;
					}

					stateBeingProcessed = (state_t*)(stateBeingProcessed->parent) ;
    1cb4:	ee 85       	ldd	r30, Y+14	; 0x0e
    1cb6:	ff 85       	ldd	r31, Y+15	; 0x0f
    1cb8:	80 81       	ld	r24, Z
    1cba:	91 81       	ldd	r25, Z+1	; 0x01
    1cbc:	9f 87       	std	Y+15, r25	; 0x0f
    1cbe:	8e 87       	std	Y+14, r24	; 0x0e
				} while(stateBeingProcessed) ;
    1cc0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1cc2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1cc4:	00 97       	sbiw	r24, 0x00	; 0
    1cc6:	09 f0       	breq	.+2      	; 0x1cca <iterateStateMachine+0x4a0>
    1cc8:	78 cf       	rjmp	.-272    	; 0x1bba <iterateStateMachine+0x390>

				if(sm->currentState != target)
    1cca:	fe 01       	movw	r30, r28
    1ccc:	ee 5a       	subi	r30, 0xAE	; 174
    1cce:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd0:	01 90       	ld	r0, Z+
    1cd2:	f0 81       	ld	r31, Z
    1cd4:	e0 2d       	mov	r30, r0
    1cd6:	25 81       	ldd	r18, Z+5	; 0x05
    1cd8:	36 81       	ldd	r19, Z+6	; 0x06
    1cda:	89 85       	ldd	r24, Y+9	; 0x09
    1cdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cde:	28 17       	cp	r18, r24
    1ce0:	39 07       	cpc	r19, r25
    1ce2:	09 f4       	brne	.+2      	; 0x1ce6 <iterateStateMachine+0x4bc>
    1ce4:	98 c0       	rjmp	.+304    	; 0x1e16 <iterateStateMachine+0x5ec>
				{
#ifdef TRACING_ENABLED
					printf("\t\t\t\tScanning target hierarchy...\n") ;
    1ce6:	8f ee       	ldi	r24, 0xEF	; 239
    1ce8:	95 e0       	ldi	r25, 0x05	; 5
    1cea:	0e 94 93 11 	call	0x2326	; 0x2326 <puts>
#endif

					targetIndex			= 0 ;
    1cee:	1f 82       	std	Y+7, r1	; 0x07
					stateBeingProcessed	= target ;
    1cf0:	89 85       	ldd	r24, Y+9	; 0x09
    1cf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf4:	9f 87       	std	Y+15, r25	; 0x0f
    1cf6:	8e 87       	std	Y+14, r24	; 0x0e

					do
					{
						targetHierarchy[targetIndex] = stateBeingProcessed ;
    1cf8:	8f 81       	ldd	r24, Y+7	; 0x07
    1cfa:	88 2f       	mov	r24, r24
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	9c 01       	movw	r18, r24
    1d00:	22 0f       	add	r18, r18
    1d02:	33 1f       	adc	r19, r19
    1d04:	ce 01       	movw	r24, r28
    1d06:	01 96       	adiw	r24, 0x01	; 1
    1d08:	82 0f       	add	r24, r18
    1d0a:	93 1f       	adc	r25, r19
    1d0c:	fc 01       	movw	r30, r24
    1d0e:	f1 96       	adiw	r30, 0x31	; 49
    1d10:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d12:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d14:	91 83       	std	Z+1, r25	; 0x01
    1d16:	80 83       	st	Z, r24

#ifdef TRACING_ENABLED
						printf("\t\t\t\t\ttargetHierarchy[%d] = %s\n", targetIndex, stateBeingProcessed->stateName) ;
    1d18:	8f 81       	ldd	r24, Y+7	; 0x07
    1d1a:	48 2f       	mov	r20, r24
    1d1c:	50 e0       	ldi	r21, 0x00	; 0
    1d1e:	ee 85       	ldd	r30, Y+14	; 0x0e
    1d20:	ff 85       	ldd	r31, Y+15	; 0x0f
    1d22:	25 81       	ldd	r18, Z+5	; 0x05
    1d24:	36 81       	ldd	r19, Z+6	; 0x06
    1d26:	00 d0       	rcall	.+0      	; 0x1d28 <iterateStateMachine+0x4fe>
    1d28:	00 d0       	rcall	.+0      	; 0x1d2a <iterateStateMachine+0x500>
    1d2a:	00 d0       	rcall	.+0      	; 0x1d2c <iterateStateMachine+0x502>
    1d2c:	ed b7       	in	r30, 0x3d	; 61
    1d2e:	fe b7       	in	r31, 0x3e	; 62
    1d30:	31 96       	adiw	r30, 0x01	; 1
    1d32:	80 e1       	ldi	r24, 0x10	; 16
    1d34:	96 e0       	ldi	r25, 0x06	; 6
    1d36:	91 83       	std	Z+1, r25	; 0x01
    1d38:	80 83       	st	Z, r24
    1d3a:	53 83       	std	Z+3, r21	; 0x03
    1d3c:	42 83       	std	Z+2, r20	; 0x02
    1d3e:	35 83       	std	Z+5, r19	; 0x05
    1d40:	24 83       	std	Z+4, r18	; 0x04
    1d42:	0e 94 77 11 	call	0x22ee	; 0x22ee <printf>
    1d46:	8d b7       	in	r24, 0x3d	; 61
    1d48:	9e b7       	in	r25, 0x3e	; 62
    1d4a:	06 96       	adiw	r24, 0x06	; 6
    1d4c:	0f b6       	in	r0, 0x3f	; 63
    1d4e:	f8 94       	cli
    1d50:	9e bf       	out	0x3e, r25	; 62
    1d52:	0f be       	out	0x3f, r0	; 63
    1d54:	8d bf       	out	0x3d, r24	; 61
#endif

						if(stateBeingProcessed == source)
    1d56:	2e 85       	ldd	r18, Y+14	; 0x0e
    1d58:	3f 85       	ldd	r19, Y+15	; 0x0f
    1d5a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d5c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d5e:	28 17       	cp	r18, r24
    1d60:	39 07       	cpc	r19, r25
    1d62:	09 f0       	breq	.+2      	; 0x1d66 <iterateStateMachine+0x53c>
    1d64:	4a c0       	rjmp	.+148    	; 0x1dfa <iterateStateMachine+0x5d0>
						{
#ifdef TRACING_ENABLED
							printf("\t\t\t\t\t\tFound source as ancestor of target\n") ;
    1d66:	8f e2       	ldi	r24, 0x2F	; 47
    1d68:	96 e0       	ldi	r25, 0x06	; 6
    1d6a:	0e 94 93 11 	call	0x2326	; 0x2326 <puts>
    1d6e:	25 c0       	rjmp	.+74     	; 0x1dba <iterateStateMachine+0x590>
#endif

							while(targetIndex--)
							{
#ifdef TRACING_ENABLED
								printf("\t\t\t\t") ;
    1d70:	00 d0       	rcall	.+0      	; 0x1d72 <iterateStateMachine+0x548>
    1d72:	ed b7       	in	r30, 0x3d	; 61
    1d74:	fe b7       	in	r31, 0x3e	; 62
    1d76:	31 96       	adiw	r30, 0x01	; 1
    1d78:	8a ee       	ldi	r24, 0xEA	; 234
    1d7a:	95 e0       	ldi	r25, 0x05	; 5
    1d7c:	91 83       	std	Z+1, r25	; 0x01
    1d7e:	80 83       	st	Z, r24
    1d80:	0e 94 77 11 	call	0x22ee	; 0x22ee <printf>
    1d84:	0f 90       	pop	r0
    1d86:	0f 90       	pop	r0
#endif
								callStateHandler(sm, targetHierarchy[targetIndex], &enterEvent) ;
    1d88:	8f 81       	ldd	r24, Y+7	; 0x07
    1d8a:	88 2f       	mov	r24, r24
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	9c 01       	movw	r18, r24
    1d90:	22 0f       	add	r18, r18
    1d92:	33 1f       	adc	r19, r19
    1d94:	ce 01       	movw	r24, r28
    1d96:	01 96       	adiw	r24, 0x01	; 1
    1d98:	82 0f       	add	r24, r18
    1d9a:	93 1f       	adc	r25, r19
    1d9c:	fc 01       	movw	r30, r24
    1d9e:	f1 96       	adiw	r30, 0x31	; 49
    1da0:	40 81       	ld	r20, Z
    1da2:	51 81       	ldd	r21, Z+1	; 0x01
    1da4:	fe 01       	movw	r30, r28
    1da6:	ee 5a       	subi	r30, 0xAE	; 174
    1da8:	ff 4f       	sbci	r31, 0xFF	; 255
    1daa:	80 81       	ld	r24, Z
    1dac:	91 81       	ldd	r25, Z+1	; 0x01
    1dae:	2b e6       	ldi	r18, 0x6B	; 107
    1db0:	34 e0       	ldi	r19, 0x04	; 4
    1db2:	ba 01       	movw	r22, r20
    1db4:	a9 01       	movw	r20, r18
    1db6:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <callStateHandler>
						{
#ifdef TRACING_ENABLED
							printf("\t\t\t\t\t\tFound source as ancestor of target\n") ;
#endif

							while(targetIndex--)
    1dba:	9f 81       	ldd	r25, Y+7	; 0x07
    1dbc:	67 96       	adiw	r28, 0x17	; 23
    1dbe:	9f af       	std	Y+63, r25	; 0x3f
    1dc0:	67 97       	sbiw	r28, 0x17	; 23
    1dc2:	67 96       	adiw	r28, 0x17	; 23
    1dc4:	8f ad       	ldd	r24, Y+63	; 0x3f
    1dc6:	67 97       	sbiw	r28, 0x17	; 23
    1dc8:	88 23       	and	r24, r24
    1dca:	21 f0       	breq	.+8      	; 0x1dd4 <iterateStateMachine+0x5aa>
    1dcc:	91 e0       	ldi	r25, 0x01	; 1
    1dce:	67 96       	adiw	r28, 0x17	; 23
    1dd0:	9f af       	std	Y+63, r25	; 0x3f
    1dd2:	67 97       	sbiw	r28, 0x17	; 23
    1dd4:	67 96       	adiw	r28, 0x17	; 23
    1dd6:	8f ad       	ldd	r24, Y+63	; 0x3f
    1dd8:	67 97       	sbiw	r28, 0x17	; 23
    1dda:	9f 81       	ldd	r25, Y+7	; 0x07
    1ddc:	91 50       	subi	r25, 0x01	; 1
    1dde:	9f 83       	std	Y+7, r25	; 0x07
    1de0:	88 23       	and	r24, r24
    1de2:	31 f6       	brne	.-116    	; 0x1d70 <iterateStateMachine+0x546>
								printf("\t\t\t\t") ;
#endif
								callStateHandler(sm, targetHierarchy[targetIndex], &enterEvent) ;
							}

							sm->currentState = target ;
    1de4:	fe 01       	movw	r30, r28
    1de6:	ee 5a       	subi	r30, 0xAE	; 174
    1de8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dea:	01 90       	ld	r0, Z+
    1dec:	f0 81       	ld	r31, Z
    1dee:	e0 2d       	mov	r30, r0
    1df0:	89 85       	ldd	r24, Y+9	; 0x09
    1df2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df4:	96 83       	std	Z+6, r25	; 0x06
    1df6:	85 83       	std	Z+5, r24	; 0x05
    1df8:	0e c0       	rjmp	.+28     	; 0x1e16 <iterateStateMachine+0x5ec>

							break ;
						}

						targetIndex++ ;
    1dfa:	8f 81       	ldd	r24, Y+7	; 0x07
    1dfc:	8f 5f       	subi	r24, 0xFF	; 255
    1dfe:	8f 83       	std	Y+7, r24	; 0x07
						stateBeingProcessed = (state_t*)(stateBeingProcessed->parent) ;
    1e00:	ee 85       	ldd	r30, Y+14	; 0x0e
    1e02:	ff 85       	ldd	r31, Y+15	; 0x0f
    1e04:	80 81       	ld	r24, Z
    1e06:	91 81       	ldd	r25, Z+1	; 0x01
    1e08:	9f 87       	std	Y+15, r25	; 0x0f
    1e0a:	8e 87       	std	Y+14, r24	; 0x0e
					} while(stateBeingProcessed) ;
    1e0c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e0e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e10:	00 97       	sbiw	r24, 0x00	; 0
    1e12:	09 f0       	breq	.+2      	; 0x1e16 <iterateStateMachine+0x5ec>
    1e14:	71 cf       	rjmp	.-286    	; 0x1cf8 <iterateStateMachine+0x4ce>
				}

				if(sm->currentState != target)
    1e16:	fe 01       	movw	r30, r28
    1e18:	ee 5a       	subi	r30, 0xAE	; 174
    1e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1c:	01 90       	ld	r0, Z+
    1e1e:	f0 81       	ld	r31, Z
    1e20:	e0 2d       	mov	r30, r0
    1e22:	25 81       	ldd	r18, Z+5	; 0x05
    1e24:	36 81       	ldd	r19, Z+6	; 0x06
    1e26:	89 85       	ldd	r24, Y+9	; 0x09
    1e28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e2a:	28 17       	cp	r18, r24
    1e2c:	39 07       	cpc	r19, r25
    1e2e:	09 f4       	brne	.+2      	; 0x1e32 <iterateStateMachine+0x608>
    1e30:	3c c1       	rjmp	.+632    	; 0x20aa <iterateStateMachine+0x880>
				{
					uint8_t	LCAindex = 0 ;
    1e32:	19 82       	std	Y+1, r1	; 0x01

#ifdef TRACING_ENABLED
					printf("\t\t\t\tStill haven't found relationship. Scanning for LCA...\n") ;
    1e34:	88 e5       	ldi	r24, 0x58	; 88
    1e36:	96 e0       	ldi	r25, 0x06	; 6
    1e38:	0e 94 93 11 	call	0x2326	; 0x2326 <puts>
#endif
					LCA			= 0 ;
    1e3c:	1e 82       	std	Y+6, r1	; 0x06
    1e3e:	1d 82       	std	Y+5, r1	; 0x05
					entryIndex	= targetIndex - 1 ;
    1e40:	8f 81       	ldd	r24, Y+7	; 0x07
    1e42:	81 50       	subi	r24, 0x01	; 1
    1e44:	8c 83       	std	Y+4, r24	; 0x04
					exitIndex	= sourceIndex - 1 ;
    1e46:	88 85       	ldd	r24, Y+8	; 0x08
    1e48:	81 50       	subi	r24, 0x01	; 1
    1e4a:	8b 83       	std	Y+3, r24	; 0x03
#ifdef TRACING_ENABLED
					printf("\t\t\t\t\tentryIndex = %d, exitIndex = %d\n", entryIndex, exitIndex) ;
    1e4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e4e:	48 2f       	mov	r20, r24
    1e50:	50 e0       	ldi	r21, 0x00	; 0
    1e52:	8b 81       	ldd	r24, Y+3	; 0x03
    1e54:	28 2f       	mov	r18, r24
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	00 d0       	rcall	.+0      	; 0x1e5a <iterateStateMachine+0x630>
    1e5a:	00 d0       	rcall	.+0      	; 0x1e5c <iterateStateMachine+0x632>
    1e5c:	00 d0       	rcall	.+0      	; 0x1e5e <iterateStateMachine+0x634>
    1e5e:	ed b7       	in	r30, 0x3d	; 61
    1e60:	fe b7       	in	r31, 0x3e	; 62
    1e62:	31 96       	adiw	r30, 0x01	; 1
    1e64:	82 e9       	ldi	r24, 0x92	; 146
    1e66:	96 e0       	ldi	r25, 0x06	; 6
    1e68:	91 83       	std	Z+1, r25	; 0x01
    1e6a:	80 83       	st	Z, r24
    1e6c:	53 83       	std	Z+3, r21	; 0x03
    1e6e:	42 83       	std	Z+2, r20	; 0x02
    1e70:	35 83       	std	Z+5, r19	; 0x05
    1e72:	24 83       	std	Z+4, r18	; 0x04
    1e74:	0e 94 77 11 	call	0x22ee	; 0x22ee <printf>
    1e78:	8d b7       	in	r24, 0x3d	; 61
    1e7a:	9e b7       	in	r25, 0x3e	; 62
    1e7c:	06 96       	adiw	r24, 0x06	; 6
    1e7e:	0f b6       	in	r0, 0x3f	; 63
    1e80:	f8 94       	cli
    1e82:	9e bf       	out	0x3e, r25	; 62
    1e84:	0f be       	out	0x3f, r0	; 63
    1e86:	8d bf       	out	0x3d, r24	; 61
    1e88:	2e c0       	rjmp	.+92     	; 0x1ee6 <iterateStateMachine+0x6bc>
#endif

					while(sourceHierarchy[exitIndex] == targetHierarchy[entryIndex])
					{
						LCA = sourceHierarchy[exitIndex] ;
    1e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8c:	88 2f       	mov	r24, r24
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	9c 01       	movw	r18, r24
    1e92:	22 0f       	add	r18, r18
    1e94:	33 1f       	adc	r19, r19
    1e96:	ce 01       	movw	r24, r28
    1e98:	01 96       	adiw	r24, 0x01	; 1
    1e9a:	82 0f       	add	r24, r18
    1e9c:	93 1f       	adc	r25, r19
    1e9e:	fc 01       	movw	r30, r24
    1ea0:	71 96       	adiw	r30, 0x11	; 17
    1ea2:	80 81       	ld	r24, Z
    1ea4:	91 81       	ldd	r25, Z+1	; 0x01
    1ea6:	9e 83       	std	Y+6, r25	; 0x06
    1ea8:	8d 83       	std	Y+5, r24	; 0x05

						entryIndex-- ;
    1eaa:	8c 81       	ldd	r24, Y+4	; 0x04
    1eac:	81 50       	subi	r24, 0x01	; 1
    1eae:	8c 83       	std	Y+4, r24	; 0x04
						exitIndex-- ;
    1eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb2:	81 50       	subi	r24, 0x01	; 1
    1eb4:	8b 83       	std	Y+3, r24	; 0x03

#ifdef TRACING_ENABLED
						printf("\t\t\t\t\tCurrent LCA candidate: %s\n", LCA->stateName) ;
    1eb6:	ed 81       	ldd	r30, Y+5	; 0x05
    1eb8:	fe 81       	ldd	r31, Y+6	; 0x06
    1eba:	25 81       	ldd	r18, Z+5	; 0x05
    1ebc:	36 81       	ldd	r19, Z+6	; 0x06
    1ebe:	00 d0       	rcall	.+0      	; 0x1ec0 <iterateStateMachine+0x696>
    1ec0:	00 d0       	rcall	.+0      	; 0x1ec2 <iterateStateMachine+0x698>
    1ec2:	ed b7       	in	r30, 0x3d	; 61
    1ec4:	fe b7       	in	r31, 0x3e	; 62
    1ec6:	31 96       	adiw	r30, 0x01	; 1
    1ec8:	88 eb       	ldi	r24, 0xB8	; 184
    1eca:	96 e0       	ldi	r25, 0x06	; 6
    1ecc:	91 83       	std	Z+1, r25	; 0x01
    1ece:	80 83       	st	Z, r24
    1ed0:	33 83       	std	Z+3, r19	; 0x03
    1ed2:	22 83       	std	Z+2, r18	; 0x02
    1ed4:	0e 94 77 11 	call	0x22ee	; 0x22ee <printf>
    1ed8:	0f 90       	pop	r0
    1eda:	0f 90       	pop	r0
    1edc:	0f 90       	pop	r0
    1ede:	0f 90       	pop	r0
#endif

						LCAindex++ ;
    1ee0:	89 81       	ldd	r24, Y+1	; 0x01
    1ee2:	8f 5f       	subi	r24, 0xFF	; 255
    1ee4:	89 83       	std	Y+1, r24	; 0x01
					exitIndex	= sourceIndex - 1 ;
#ifdef TRACING_ENABLED
					printf("\t\t\t\t\tentryIndex = %d, exitIndex = %d\n", entryIndex, exitIndex) ;
#endif

					while(sourceHierarchy[exitIndex] == targetHierarchy[entryIndex])
    1ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee8:	88 2f       	mov	r24, r24
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	9c 01       	movw	r18, r24
    1eee:	22 0f       	add	r18, r18
    1ef0:	33 1f       	adc	r19, r19
    1ef2:	ce 01       	movw	r24, r28
    1ef4:	01 96       	adiw	r24, 0x01	; 1
    1ef6:	82 0f       	add	r24, r18
    1ef8:	93 1f       	adc	r25, r19
    1efa:	fc 01       	movw	r30, r24
    1efc:	71 96       	adiw	r30, 0x11	; 17
    1efe:	40 81       	ld	r20, Z
    1f00:	51 81       	ldd	r21, Z+1	; 0x01
    1f02:	8c 81       	ldd	r24, Y+4	; 0x04
    1f04:	88 2f       	mov	r24, r24
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	9c 01       	movw	r18, r24
    1f0a:	22 0f       	add	r18, r18
    1f0c:	33 1f       	adc	r19, r19
    1f0e:	ce 01       	movw	r24, r28
    1f10:	01 96       	adiw	r24, 0x01	; 1
    1f12:	82 0f       	add	r24, r18
    1f14:	93 1f       	adc	r25, r19
    1f16:	fc 01       	movw	r30, r24
    1f18:	f1 96       	adiw	r30, 0x31	; 49
    1f1a:	80 81       	ld	r24, Z
    1f1c:	91 81       	ldd	r25, Z+1	; 0x01
    1f1e:	48 17       	cp	r20, r24
    1f20:	59 07       	cpc	r21, r25
    1f22:	09 f4       	brne	.+2      	; 0x1f26 <iterateStateMachine+0x6fc>
    1f24:	b2 cf       	rjmp	.-156    	; 0x1e8a <iterateStateMachine+0x660>

						LCAindex++ ;
					}

#ifdef TRACING_ENABLED
					printf("\t\t\t\t\tLCA of %s and %s is: %s\n", source->stateName, target->stateName, LCA->stateName) ;
    1f26:	eb 85       	ldd	r30, Y+11	; 0x0b
    1f28:	fc 85       	ldd	r31, Y+12	; 0x0c
    1f2a:	25 81       	ldd	r18, Z+5	; 0x05
    1f2c:	36 81       	ldd	r19, Z+6	; 0x06
    1f2e:	e9 85       	ldd	r30, Y+9	; 0x09
    1f30:	fa 85       	ldd	r31, Y+10	; 0x0a
    1f32:	45 81       	ldd	r20, Z+5	; 0x05
    1f34:	56 81       	ldd	r21, Z+6	; 0x06
    1f36:	ed 81       	ldd	r30, Y+5	; 0x05
    1f38:	fe 81       	ldd	r31, Y+6	; 0x06
    1f3a:	65 81       	ldd	r22, Z+5	; 0x05
    1f3c:	76 81       	ldd	r23, Z+6	; 0x06
    1f3e:	8d b7       	in	r24, 0x3d	; 61
    1f40:	9e b7       	in	r25, 0x3e	; 62
    1f42:	08 97       	sbiw	r24, 0x08	; 8
    1f44:	0f b6       	in	r0, 0x3f	; 63
    1f46:	f8 94       	cli
    1f48:	9e bf       	out	0x3e, r25	; 62
    1f4a:	0f be       	out	0x3f, r0	; 63
    1f4c:	8d bf       	out	0x3d, r24	; 61
    1f4e:	ed b7       	in	r30, 0x3d	; 61
    1f50:	fe b7       	in	r31, 0x3e	; 62
    1f52:	31 96       	adiw	r30, 0x01	; 1
    1f54:	88 ed       	ldi	r24, 0xD8	; 216
    1f56:	96 e0       	ldi	r25, 0x06	; 6
    1f58:	91 83       	std	Z+1, r25	; 0x01
    1f5a:	80 83       	st	Z, r24
    1f5c:	33 83       	std	Z+3, r19	; 0x03
    1f5e:	22 83       	std	Z+2, r18	; 0x02
    1f60:	55 83       	std	Z+5, r21	; 0x05
    1f62:	44 83       	std	Z+4, r20	; 0x04
    1f64:	77 83       	std	Z+7, r23	; 0x07
    1f66:	66 83       	std	Z+6, r22	; 0x06
    1f68:	0e 94 77 11 	call	0x22ee	; 0x22ee <printf>
    1f6c:	8d b7       	in	r24, 0x3d	; 61
    1f6e:	9e b7       	in	r25, 0x3e	; 62
    1f70:	08 96       	adiw	r24, 0x08	; 8
    1f72:	0f b6       	in	r0, 0x3f	; 63
    1f74:	f8 94       	cli
    1f76:	9e bf       	out	0x3e, r25	; 62
    1f78:	0f be       	out	0x3f, r0	; 63
    1f7a:	8d bf       	out	0x3d, r24	; 61
					printf("\t\t\t\t\tentryIndex = %d, exitIndex = %d\n", entryIndex, exitIndex) ;
    1f7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f7e:	48 2f       	mov	r20, r24
    1f80:	50 e0       	ldi	r21, 0x00	; 0
    1f82:	8b 81       	ldd	r24, Y+3	; 0x03
    1f84:	28 2f       	mov	r18, r24
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	00 d0       	rcall	.+0      	; 0x1f8a <iterateStateMachine+0x760>
    1f8a:	00 d0       	rcall	.+0      	; 0x1f8c <iterateStateMachine+0x762>
    1f8c:	00 d0       	rcall	.+0      	; 0x1f8e <iterateStateMachine+0x764>
    1f8e:	ed b7       	in	r30, 0x3d	; 61
    1f90:	fe b7       	in	r31, 0x3e	; 62
    1f92:	31 96       	adiw	r30, 0x01	; 1
    1f94:	82 e9       	ldi	r24, 0x92	; 146
    1f96:	96 e0       	ldi	r25, 0x06	; 6
    1f98:	91 83       	std	Z+1, r25	; 0x01
    1f9a:	80 83       	st	Z, r24
    1f9c:	53 83       	std	Z+3, r21	; 0x03
    1f9e:	42 83       	std	Z+2, r20	; 0x02
    1fa0:	35 83       	std	Z+5, r19	; 0x05
    1fa2:	24 83       	std	Z+4, r18	; 0x04
    1fa4:	0e 94 77 11 	call	0x22ee	; 0x22ee <printf>
    1fa8:	8d b7       	in	r24, 0x3d	; 61
    1faa:	9e b7       	in	r25, 0x3e	; 62
    1fac:	06 96       	adiw	r24, 0x06	; 6
    1fae:	0f b6       	in	r0, 0x3f	; 63
    1fb0:	f8 94       	cli
    1fb2:	9e bf       	out	0x3e, r25	; 62
    1fb4:	0f be       	out	0x3f, r0	; 63
    1fb6:	8d bf       	out	0x3d, r24	; 61
#endif

					sourceIndex	= exitIndex + 1 ;
    1fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fba:	8f 5f       	subi	r24, 0xFF	; 255
    1fbc:	88 87       	std	Y+8, r24	; 0x08
					exitIndex	= 0 ;
    1fbe:	1b 82       	std	Y+3, r1	; 0x03
    1fc0:	28 c0       	rjmp	.+80     	; 0x2012 <iterateStateMachine+0x7e8>

					while(exitIndex < sourceIndex)
					{
#ifdef TRACING_ENABLED
						printf("\t\t\t\t") ;
    1fc2:	00 d0       	rcall	.+0      	; 0x1fc4 <iterateStateMachine+0x79a>
    1fc4:	ed b7       	in	r30, 0x3d	; 61
    1fc6:	fe b7       	in	r31, 0x3e	; 62
    1fc8:	31 96       	adiw	r30, 0x01	; 1
    1fca:	8a ee       	ldi	r24, 0xEA	; 234
    1fcc:	95 e0       	ldi	r25, 0x05	; 5
    1fce:	91 83       	std	Z+1, r25	; 0x01
    1fd0:	80 83       	st	Z, r24
    1fd2:	0e 94 77 11 	call	0x22ee	; 0x22ee <printf>
    1fd6:	0f 90       	pop	r0
    1fd8:	0f 90       	pop	r0
#endif

						callStateHandler(sm, sourceHierarchy[exitIndex], &exitEvent) ;
    1fda:	8b 81       	ldd	r24, Y+3	; 0x03
    1fdc:	88 2f       	mov	r24, r24
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	9c 01       	movw	r18, r24
    1fe2:	22 0f       	add	r18, r18
    1fe4:	33 1f       	adc	r19, r19
    1fe6:	ce 01       	movw	r24, r28
    1fe8:	01 96       	adiw	r24, 0x01	; 1
    1fea:	82 0f       	add	r24, r18
    1fec:	93 1f       	adc	r25, r19
    1fee:	fc 01       	movw	r30, r24
    1ff0:	71 96       	adiw	r30, 0x11	; 17
    1ff2:	40 81       	ld	r20, Z
    1ff4:	51 81       	ldd	r21, Z+1	; 0x01
    1ff6:	fe 01       	movw	r30, r28
    1ff8:	ee 5a       	subi	r30, 0xAE	; 174
    1ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffc:	80 81       	ld	r24, Z
    1ffe:	91 81       	ldd	r25, Z+1	; 0x01
    2000:	2c e6       	ldi	r18, 0x6C	; 108
    2002:	34 e0       	ldi	r19, 0x04	; 4
    2004:	ba 01       	movw	r22, r20
    2006:	a9 01       	movw	r20, r18
    2008:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <callStateHandler>

						exitIndex++ ;
    200c:	8b 81       	ldd	r24, Y+3	; 0x03
    200e:	8f 5f       	subi	r24, 0xFF	; 255
    2010:	8b 83       	std	Y+3, r24	; 0x03
#endif

					sourceIndex	= exitIndex + 1 ;
					exitIndex	= 0 ;

					while(exitIndex < sourceIndex)
    2012:	9b 81       	ldd	r25, Y+3	; 0x03
    2014:	88 85       	ldd	r24, Y+8	; 0x08
    2016:	98 17       	cp	r25, r24
    2018:	a0 f2       	brcs	.-88     	; 0x1fc2 <iterateStateMachine+0x798>
						callStateHandler(sm, sourceHierarchy[exitIndex], &exitEvent) ;

						exitIndex++ ;
					}

					targetIndex = entryIndex + 1 ;
    201a:	8c 81       	ldd	r24, Y+4	; 0x04
    201c:	8f 5f       	subi	r24, 0xFF	; 255
    201e:	8f 83       	std	Y+7, r24	; 0x07
    2020:	25 c0       	rjmp	.+74     	; 0x206c <iterateStateMachine+0x842>

					while(targetIndex--)
					{
#ifdef TRACING_ENABLED
						printf("\t\t\t\t") ;
    2022:	00 d0       	rcall	.+0      	; 0x2024 <iterateStateMachine+0x7fa>
    2024:	ed b7       	in	r30, 0x3d	; 61
    2026:	fe b7       	in	r31, 0x3e	; 62
    2028:	31 96       	adiw	r30, 0x01	; 1
    202a:	8a ee       	ldi	r24, 0xEA	; 234
    202c:	95 e0       	ldi	r25, 0x05	; 5
    202e:	91 83       	std	Z+1, r25	; 0x01
    2030:	80 83       	st	Z, r24
    2032:	0e 94 77 11 	call	0x22ee	; 0x22ee <printf>
    2036:	0f 90       	pop	r0
    2038:	0f 90       	pop	r0
#endif
						callStateHandler(sm, targetHierarchy[targetIndex], &enterEvent) ;
    203a:	8f 81       	ldd	r24, Y+7	; 0x07
    203c:	88 2f       	mov	r24, r24
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	9c 01       	movw	r18, r24
    2042:	22 0f       	add	r18, r18
    2044:	33 1f       	adc	r19, r19
    2046:	ce 01       	movw	r24, r28
    2048:	01 96       	adiw	r24, 0x01	; 1
    204a:	82 0f       	add	r24, r18
    204c:	93 1f       	adc	r25, r19
    204e:	fc 01       	movw	r30, r24
    2050:	f1 96       	adiw	r30, 0x31	; 49
    2052:	40 81       	ld	r20, Z
    2054:	51 81       	ldd	r21, Z+1	; 0x01
    2056:	fe 01       	movw	r30, r28
    2058:	ee 5a       	subi	r30, 0xAE	; 174
    205a:	ff 4f       	sbci	r31, 0xFF	; 255
    205c:	80 81       	ld	r24, Z
    205e:	91 81       	ldd	r25, Z+1	; 0x01
    2060:	2b e6       	ldi	r18, 0x6B	; 107
    2062:	34 e0       	ldi	r19, 0x04	; 4
    2064:	ba 01       	movw	r22, r20
    2066:	a9 01       	movw	r20, r18
    2068:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <callStateHandler>
						exitIndex++ ;
					}

					targetIndex = entryIndex + 1 ;

					while(targetIndex--)
    206c:	9f 81       	ldd	r25, Y+7	; 0x07
    206e:	68 96       	adiw	r28, 0x18	; 24
    2070:	9f af       	std	Y+63, r25	; 0x3f
    2072:	68 97       	sbiw	r28, 0x18	; 24
    2074:	68 96       	adiw	r28, 0x18	; 24
    2076:	8f ad       	ldd	r24, Y+63	; 0x3f
    2078:	68 97       	sbiw	r28, 0x18	; 24
    207a:	88 23       	and	r24, r24
    207c:	21 f0       	breq	.+8      	; 0x2086 <iterateStateMachine+0x85c>
    207e:	91 e0       	ldi	r25, 0x01	; 1
    2080:	68 96       	adiw	r28, 0x18	; 24
    2082:	9f af       	std	Y+63, r25	; 0x3f
    2084:	68 97       	sbiw	r28, 0x18	; 24
    2086:	68 96       	adiw	r28, 0x18	; 24
    2088:	8f ad       	ldd	r24, Y+63	; 0x3f
    208a:	68 97       	sbiw	r28, 0x18	; 24
    208c:	9f 81       	ldd	r25, Y+7	; 0x07
    208e:	91 50       	subi	r25, 0x01	; 1
    2090:	9f 83       	std	Y+7, r25	; 0x07
    2092:	88 23       	and	r24, r24
    2094:	31 f6       	brne	.-116    	; 0x2022 <iterateStateMachine+0x7f8>
						printf("\t\t\t\t") ;
#endif
						callStateHandler(sm, targetHierarchy[targetIndex], &enterEvent) ;
					}

					sm->currentState = target ;
    2096:	fe 01       	movw	r30, r28
    2098:	ee 5a       	subi	r30, 0xAE	; 174
    209a:	ff 4f       	sbci	r31, 0xFF	; 255
    209c:	01 90       	ld	r0, Z+
    209e:	f0 81       	ld	r31, Z
    20a0:	e0 2d       	mov	r30, r0
    20a2:	89 85       	ldd	r24, Y+9	; 0x09
    20a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a6:	96 83       	std	Z+6, r25	; 0x06
    20a8:	85 83       	std	Z+5, r24	; 0x05

			/* Now force an initial transition event that will cause the
			 * target state to execute any initial transactions it might
			 * have so the next iteration through this loop will catch it. */

			sm->forceTransition = true ;
    20aa:	fe 01       	movw	r30, r28
    20ac:	ee 5a       	subi	r30, 0xAE	; 174
    20ae:	ff 4f       	sbci	r31, 0xFF	; 255
    20b0:	01 90       	ld	r0, Z+
    20b2:	f0 81       	ld	r31, Z
    20b4:	e0 2d       	mov	r30, r0
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	80 8b       	std	Z+16, r24	; 0x10
		}
	}

#ifdef TRACING_ENABLED
	printf("\t\tEvent queue empty.\n") ;
    20ba:	86 ef       	ldi	r24, 0xF6	; 246
    20bc:	96 e0       	ldi	r25, 0x06	; 6
    20be:	0e 94 93 11 	call	0x2326	; 0x2326 <puts>
#endif
}
    20c2:	c9 5a       	subi	r28, 0xA9	; 169
    20c4:	df 4f       	sbci	r29, 0xFF	; 255
    20c6:	0f b6       	in	r0, 0x3f	; 63
    20c8:	f8 94       	cli
    20ca:	de bf       	out	0x3e, r29	; 62
    20cc:	0f be       	out	0x3f, r0	; 63
    20ce:	cd bf       	out	0x3d, r28	; 61
    20d0:	cf 91       	pop	r28
    20d2:	df 91       	pop	r29
    20d4:	08 95       	ret

000020d6 <malloc>:
    20d6:	cf 93       	push	r28
    20d8:	df 93       	push	r29
    20da:	bc 01       	movw	r22, r24
    20dc:	82 30       	cpi	r24, 0x02	; 2
    20de:	91 05       	cpc	r25, r1
    20e0:	10 f4       	brcc	.+4      	; 0x20e6 <malloc+0x10>
    20e2:	62 e0       	ldi	r22, 0x02	; 2
    20e4:	70 e0       	ldi	r23, 0x00	; 0
    20e6:	a0 91 78 07 	lds	r26, 0x0778
    20ea:	b0 91 79 07 	lds	r27, 0x0779
    20ee:	ed 01       	movw	r28, r26
    20f0:	e0 e0       	ldi	r30, 0x00	; 0
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	40 e0       	ldi	r20, 0x00	; 0
    20f6:	50 e0       	ldi	r21, 0x00	; 0
    20f8:	21 c0       	rjmp	.+66     	; 0x213c <malloc+0x66>
    20fa:	88 81       	ld	r24, Y
    20fc:	99 81       	ldd	r25, Y+1	; 0x01
    20fe:	86 17       	cp	r24, r22
    2100:	97 07       	cpc	r25, r23
    2102:	69 f4       	brne	.+26     	; 0x211e <malloc+0x48>
    2104:	8a 81       	ldd	r24, Y+2	; 0x02
    2106:	9b 81       	ldd	r25, Y+3	; 0x03
    2108:	30 97       	sbiw	r30, 0x00	; 0
    210a:	19 f0       	breq	.+6      	; 0x2112 <malloc+0x3c>
    210c:	93 83       	std	Z+3, r25	; 0x03
    210e:	82 83       	std	Z+2, r24	; 0x02
    2110:	04 c0       	rjmp	.+8      	; 0x211a <malloc+0x44>
    2112:	90 93 79 07 	sts	0x0779, r25
    2116:	80 93 78 07 	sts	0x0778, r24
    211a:	fe 01       	movw	r30, r28
    211c:	34 c0       	rjmp	.+104    	; 0x2186 <malloc+0xb0>
    211e:	68 17       	cp	r22, r24
    2120:	79 07       	cpc	r23, r25
    2122:	38 f4       	brcc	.+14     	; 0x2132 <malloc+0x5c>
    2124:	41 15       	cp	r20, r1
    2126:	51 05       	cpc	r21, r1
    2128:	19 f0       	breq	.+6      	; 0x2130 <malloc+0x5a>
    212a:	84 17       	cp	r24, r20
    212c:	95 07       	cpc	r25, r21
    212e:	08 f4       	brcc	.+2      	; 0x2132 <malloc+0x5c>
    2130:	ac 01       	movw	r20, r24
    2132:	fe 01       	movw	r30, r28
    2134:	8a 81       	ldd	r24, Y+2	; 0x02
    2136:	9b 81       	ldd	r25, Y+3	; 0x03
    2138:	9c 01       	movw	r18, r24
    213a:	e9 01       	movw	r28, r18
    213c:	20 97       	sbiw	r28, 0x00	; 0
    213e:	e9 f6       	brne	.-70     	; 0x20fa <malloc+0x24>
    2140:	41 15       	cp	r20, r1
    2142:	51 05       	cpc	r21, r1
    2144:	a9 f1       	breq	.+106    	; 0x21b0 <malloc+0xda>
    2146:	ca 01       	movw	r24, r20
    2148:	86 1b       	sub	r24, r22
    214a:	97 0b       	sbc	r25, r23
    214c:	04 97       	sbiw	r24, 0x04	; 4
    214e:	08 f4       	brcc	.+2      	; 0x2152 <malloc+0x7c>
    2150:	ba 01       	movw	r22, r20
    2152:	e0 e0       	ldi	r30, 0x00	; 0
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	2a c0       	rjmp	.+84     	; 0x21ac <malloc+0xd6>
    2158:	8d 91       	ld	r24, X+
    215a:	9c 91       	ld	r25, X
    215c:	11 97       	sbiw	r26, 0x01	; 1
    215e:	84 17       	cp	r24, r20
    2160:	95 07       	cpc	r25, r21
    2162:	f9 f4       	brne	.+62     	; 0x21a2 <malloc+0xcc>
    2164:	64 17       	cp	r22, r20
    2166:	75 07       	cpc	r23, r21
    2168:	81 f4       	brne	.+32     	; 0x218a <malloc+0xb4>
    216a:	12 96       	adiw	r26, 0x02	; 2
    216c:	8d 91       	ld	r24, X+
    216e:	9c 91       	ld	r25, X
    2170:	13 97       	sbiw	r26, 0x03	; 3
    2172:	30 97       	sbiw	r30, 0x00	; 0
    2174:	19 f0       	breq	.+6      	; 0x217c <malloc+0xa6>
    2176:	93 83       	std	Z+3, r25	; 0x03
    2178:	82 83       	std	Z+2, r24	; 0x02
    217a:	04 c0       	rjmp	.+8      	; 0x2184 <malloc+0xae>
    217c:	90 93 79 07 	sts	0x0779, r25
    2180:	80 93 78 07 	sts	0x0778, r24
    2184:	fd 01       	movw	r30, r26
    2186:	32 96       	adiw	r30, 0x02	; 2
    2188:	4f c0       	rjmp	.+158    	; 0x2228 <malloc+0x152>
    218a:	ca 01       	movw	r24, r20
    218c:	86 1b       	sub	r24, r22
    218e:	97 0b       	sbc	r25, r23
    2190:	fd 01       	movw	r30, r26
    2192:	e8 0f       	add	r30, r24
    2194:	f9 1f       	adc	r31, r25
    2196:	61 93       	st	Z+, r22
    2198:	71 93       	st	Z+, r23
    219a:	02 97       	sbiw	r24, 0x02	; 2
    219c:	8d 93       	st	X+, r24
    219e:	9c 93       	st	X, r25
    21a0:	43 c0       	rjmp	.+134    	; 0x2228 <malloc+0x152>
    21a2:	fd 01       	movw	r30, r26
    21a4:	82 81       	ldd	r24, Z+2	; 0x02
    21a6:	93 81       	ldd	r25, Z+3	; 0x03
    21a8:	9c 01       	movw	r18, r24
    21aa:	d9 01       	movw	r26, r18
    21ac:	10 97       	sbiw	r26, 0x00	; 0
    21ae:	a1 f6       	brne	.-88     	; 0x2158 <malloc+0x82>
    21b0:	80 91 76 07 	lds	r24, 0x0776
    21b4:	90 91 77 07 	lds	r25, 0x0777
    21b8:	89 2b       	or	r24, r25
    21ba:	41 f4       	brne	.+16     	; 0x21cc <malloc+0xf6>
    21bc:	80 91 0d 07 	lds	r24, 0x070D
    21c0:	90 91 0e 07 	lds	r25, 0x070E
    21c4:	90 93 77 07 	sts	0x0777, r25
    21c8:	80 93 76 07 	sts	0x0776, r24
    21cc:	40 91 0f 07 	lds	r20, 0x070F
    21d0:	50 91 10 07 	lds	r21, 0x0710
    21d4:	41 15       	cp	r20, r1
    21d6:	51 05       	cpc	r21, r1
    21d8:	41 f4       	brne	.+16     	; 0x21ea <malloc+0x114>
    21da:	4d b7       	in	r20, 0x3d	; 61
    21dc:	5e b7       	in	r21, 0x3e	; 62
    21de:	80 91 0b 07 	lds	r24, 0x070B
    21e2:	90 91 0c 07 	lds	r25, 0x070C
    21e6:	48 1b       	sub	r20, r24
    21e8:	59 0b       	sbc	r21, r25
    21ea:	20 91 76 07 	lds	r18, 0x0776
    21ee:	30 91 77 07 	lds	r19, 0x0777
    21f2:	24 17       	cp	r18, r20
    21f4:	35 07       	cpc	r19, r21
    21f6:	b0 f4       	brcc	.+44     	; 0x2224 <malloc+0x14e>
    21f8:	ca 01       	movw	r24, r20
    21fa:	82 1b       	sub	r24, r18
    21fc:	93 0b       	sbc	r25, r19
    21fe:	86 17       	cp	r24, r22
    2200:	97 07       	cpc	r25, r23
    2202:	80 f0       	brcs	.+32     	; 0x2224 <malloc+0x14e>
    2204:	ab 01       	movw	r20, r22
    2206:	4e 5f       	subi	r20, 0xFE	; 254
    2208:	5f 4f       	sbci	r21, 0xFF	; 255
    220a:	84 17       	cp	r24, r20
    220c:	95 07       	cpc	r25, r21
    220e:	50 f0       	brcs	.+20     	; 0x2224 <malloc+0x14e>
    2210:	42 0f       	add	r20, r18
    2212:	53 1f       	adc	r21, r19
    2214:	50 93 77 07 	sts	0x0777, r21
    2218:	40 93 76 07 	sts	0x0776, r20
    221c:	f9 01       	movw	r30, r18
    221e:	61 93       	st	Z+, r22
    2220:	71 93       	st	Z+, r23
    2222:	02 c0       	rjmp	.+4      	; 0x2228 <malloc+0x152>
    2224:	e0 e0       	ldi	r30, 0x00	; 0
    2226:	f0 e0       	ldi	r31, 0x00	; 0
    2228:	cf 01       	movw	r24, r30
    222a:	df 91       	pop	r29
    222c:	cf 91       	pop	r28
    222e:	08 95       	ret

00002230 <free>:
    2230:	cf 93       	push	r28
    2232:	df 93       	push	r29
    2234:	00 97       	sbiw	r24, 0x00	; 0
    2236:	09 f4       	brne	.+2      	; 0x223a <free+0xa>
    2238:	50 c0       	rjmp	.+160    	; 0x22da <free+0xaa>
    223a:	ec 01       	movw	r28, r24
    223c:	22 97       	sbiw	r28, 0x02	; 2
    223e:	1b 82       	std	Y+3, r1	; 0x03
    2240:	1a 82       	std	Y+2, r1	; 0x02
    2242:	a0 91 78 07 	lds	r26, 0x0778
    2246:	b0 91 79 07 	lds	r27, 0x0779
    224a:	10 97       	sbiw	r26, 0x00	; 0
    224c:	09 f1       	breq	.+66     	; 0x2290 <free+0x60>
    224e:	40 e0       	ldi	r20, 0x00	; 0
    2250:	50 e0       	ldi	r21, 0x00	; 0
    2252:	ac 17       	cp	r26, r28
    2254:	bd 07       	cpc	r27, r29
    2256:	08 f1       	brcs	.+66     	; 0x229a <free+0x6a>
    2258:	bb 83       	std	Y+3, r27	; 0x03
    225a:	aa 83       	std	Y+2, r26	; 0x02
    225c:	fe 01       	movw	r30, r28
    225e:	21 91       	ld	r18, Z+
    2260:	31 91       	ld	r19, Z+
    2262:	e2 0f       	add	r30, r18
    2264:	f3 1f       	adc	r31, r19
    2266:	ae 17       	cp	r26, r30
    2268:	bf 07       	cpc	r27, r31
    226a:	79 f4       	brne	.+30     	; 0x228a <free+0x5a>
    226c:	8d 91       	ld	r24, X+
    226e:	9c 91       	ld	r25, X
    2270:	11 97       	sbiw	r26, 0x01	; 1
    2272:	28 0f       	add	r18, r24
    2274:	39 1f       	adc	r19, r25
    2276:	2e 5f       	subi	r18, 0xFE	; 254
    2278:	3f 4f       	sbci	r19, 0xFF	; 255
    227a:	39 83       	std	Y+1, r19	; 0x01
    227c:	28 83       	st	Y, r18
    227e:	12 96       	adiw	r26, 0x02	; 2
    2280:	8d 91       	ld	r24, X+
    2282:	9c 91       	ld	r25, X
    2284:	13 97       	sbiw	r26, 0x03	; 3
    2286:	9b 83       	std	Y+3, r25	; 0x03
    2288:	8a 83       	std	Y+2, r24	; 0x02
    228a:	41 15       	cp	r20, r1
    228c:	51 05       	cpc	r21, r1
    228e:	71 f4       	brne	.+28     	; 0x22ac <free+0x7c>
    2290:	d0 93 79 07 	sts	0x0779, r29
    2294:	c0 93 78 07 	sts	0x0778, r28
    2298:	20 c0       	rjmp	.+64     	; 0x22da <free+0xaa>
    229a:	12 96       	adiw	r26, 0x02	; 2
    229c:	8d 91       	ld	r24, X+
    229e:	9c 91       	ld	r25, X
    22a0:	13 97       	sbiw	r26, 0x03	; 3
    22a2:	ad 01       	movw	r20, r26
    22a4:	00 97       	sbiw	r24, 0x00	; 0
    22a6:	11 f0       	breq	.+4      	; 0x22ac <free+0x7c>
    22a8:	dc 01       	movw	r26, r24
    22aa:	d3 cf       	rjmp	.-90     	; 0x2252 <free+0x22>
    22ac:	fa 01       	movw	r30, r20
    22ae:	d3 83       	std	Z+3, r29	; 0x03
    22b0:	c2 83       	std	Z+2, r28	; 0x02
    22b2:	21 91       	ld	r18, Z+
    22b4:	31 91       	ld	r19, Z+
    22b6:	e2 0f       	add	r30, r18
    22b8:	f3 1f       	adc	r31, r19
    22ba:	ce 17       	cp	r28, r30
    22bc:	df 07       	cpc	r29, r31
    22be:	69 f4       	brne	.+26     	; 0x22da <free+0xaa>
    22c0:	88 81       	ld	r24, Y
    22c2:	99 81       	ldd	r25, Y+1	; 0x01
    22c4:	28 0f       	add	r18, r24
    22c6:	39 1f       	adc	r19, r25
    22c8:	2e 5f       	subi	r18, 0xFE	; 254
    22ca:	3f 4f       	sbci	r19, 0xFF	; 255
    22cc:	fa 01       	movw	r30, r20
    22ce:	31 83       	std	Z+1, r19	; 0x01
    22d0:	20 83       	st	Z, r18
    22d2:	8a 81       	ldd	r24, Y+2	; 0x02
    22d4:	9b 81       	ldd	r25, Y+3	; 0x03
    22d6:	93 83       	std	Z+3, r25	; 0x03
    22d8:	82 83       	std	Z+2, r24	; 0x02
    22da:	df 91       	pop	r29
    22dc:	cf 91       	pop	r28
    22de:	08 95       	ret

000022e0 <memset>:
    22e0:	dc 01       	movw	r26, r24
    22e2:	01 c0       	rjmp	.+2      	; 0x22e6 <memset+0x6>
    22e4:	6d 93       	st	X+, r22
    22e6:	41 50       	subi	r20, 0x01	; 1
    22e8:	50 40       	sbci	r21, 0x00	; 0
    22ea:	e0 f7       	brcc	.-8      	; 0x22e4 <memset+0x4>
    22ec:	08 95       	ret

000022ee <printf>:
    22ee:	a0 e0       	ldi	r26, 0x00	; 0
    22f0:	b0 e0       	ldi	r27, 0x00	; 0
    22f2:	ed e7       	ldi	r30, 0x7D	; 125
    22f4:	f1 e1       	ldi	r31, 0x11	; 17
    22f6:	0c 94 55 14 	jmp	0x28aa	; 0x28aa <__prologue_saves__+0x20>
    22fa:	fe 01       	movw	r30, r28
    22fc:	35 96       	adiw	r30, 0x05	; 5
    22fe:	61 91       	ld	r22, Z+
    2300:	71 91       	ld	r23, Z+
    2302:	80 91 7c 07 	lds	r24, 0x077C
    2306:	90 91 7d 07 	lds	r25, 0x077D
    230a:	af 01       	movw	r20, r30
    230c:	0e 94 c8 11 	call	0x2390	; 0x2390 <vfprintf>
    2310:	20 96       	adiw	r28, 0x00	; 0
    2312:	e2 e0       	ldi	r30, 0x02	; 2
    2314:	0c 94 71 14 	jmp	0x28e2	; 0x28e2 <__epilogue_restores__+0x20>

00002318 <putchar>:
    2318:	60 91 7c 07 	lds	r22, 0x077C
    231c:	70 91 7d 07 	lds	r23, 0x077D
    2320:	0e 94 bb 13 	call	0x2776	; 0x2776 <fputc>
    2324:	08 95       	ret

00002326 <puts>:
    2326:	0f 93       	push	r16
    2328:	1f 93       	push	r17
    232a:	cf 93       	push	r28
    232c:	df 93       	push	r29
    232e:	8c 01       	movw	r16, r24
    2330:	e0 91 7c 07 	lds	r30, 0x077C
    2334:	f0 91 7d 07 	lds	r31, 0x077D
    2338:	83 81       	ldd	r24, Z+3	; 0x03
    233a:	81 ff       	sbrs	r24, 1
    233c:	21 c0       	rjmp	.+66     	; 0x2380 <puts+0x5a>
    233e:	c0 e0       	ldi	r28, 0x00	; 0
    2340:	d0 e0       	ldi	r29, 0x00	; 0
    2342:	0d c0       	rjmp	.+26     	; 0x235e <puts+0x38>
    2344:	e0 91 7c 07 	lds	r30, 0x077C
    2348:	f0 91 7d 07 	lds	r31, 0x077D
    234c:	20 85       	ldd	r18, Z+8	; 0x08
    234e:	31 85       	ldd	r19, Z+9	; 0x09
    2350:	bf 01       	movw	r22, r30
    2352:	f9 01       	movw	r30, r18
    2354:	09 95       	icall
    2356:	89 2b       	or	r24, r25
    2358:	11 f0       	breq	.+4      	; 0x235e <puts+0x38>
    235a:	cf ef       	ldi	r28, 0xFF	; 255
    235c:	df ef       	ldi	r29, 0xFF	; 255
    235e:	f8 01       	movw	r30, r16
    2360:	81 91       	ld	r24, Z+
    2362:	8f 01       	movw	r16, r30
    2364:	88 23       	and	r24, r24
    2366:	71 f7       	brne	.-36     	; 0x2344 <puts+0x1e>
    2368:	e0 91 7c 07 	lds	r30, 0x077C
    236c:	f0 91 7d 07 	lds	r31, 0x077D
    2370:	20 85       	ldd	r18, Z+8	; 0x08
    2372:	31 85       	ldd	r19, Z+9	; 0x09
    2374:	8a e0       	ldi	r24, 0x0A	; 10
    2376:	bf 01       	movw	r22, r30
    2378:	f9 01       	movw	r30, r18
    237a:	09 95       	icall
    237c:	89 2b       	or	r24, r25
    237e:	11 f0       	breq	.+4      	; 0x2384 <puts+0x5e>
    2380:	cf ef       	ldi	r28, 0xFF	; 255
    2382:	df ef       	ldi	r29, 0xFF	; 255
    2384:	ce 01       	movw	r24, r28
    2386:	df 91       	pop	r29
    2388:	cf 91       	pop	r28
    238a:	1f 91       	pop	r17
    238c:	0f 91       	pop	r16
    238e:	08 95       	ret

00002390 <vfprintf>:
    2390:	ab e0       	ldi	r26, 0x0B	; 11
    2392:	b0 e0       	ldi	r27, 0x00	; 0
    2394:	ee ec       	ldi	r30, 0xCE	; 206
    2396:	f1 e1       	ldi	r31, 0x11	; 17
    2398:	0c 94 45 14 	jmp	0x288a	; 0x288a <__prologue_saves__>
    239c:	3c 01       	movw	r6, r24
    239e:	2b 01       	movw	r4, r22
    23a0:	5a 01       	movw	r10, r20
    23a2:	fc 01       	movw	r30, r24
    23a4:	17 82       	std	Z+7, r1	; 0x07
    23a6:	16 82       	std	Z+6, r1	; 0x06
    23a8:	83 81       	ldd	r24, Z+3	; 0x03
    23aa:	81 fd       	sbrc	r24, 1
    23ac:	03 c0       	rjmp	.+6      	; 0x23b4 <vfprintf+0x24>
    23ae:	6f ef       	ldi	r22, 0xFF	; 255
    23b0:	7f ef       	ldi	r23, 0xFF	; 255
    23b2:	c6 c1       	rjmp	.+908    	; 0x2740 <vfprintf+0x3b0>
    23b4:	9a e0       	ldi	r25, 0x0A	; 10
    23b6:	89 2e       	mov	r8, r25
    23b8:	1e 01       	movw	r2, r28
    23ba:	08 94       	sec
    23bc:	21 1c       	adc	r2, r1
    23be:	31 1c       	adc	r3, r1
    23c0:	f3 01       	movw	r30, r6
    23c2:	23 81       	ldd	r18, Z+3	; 0x03
    23c4:	f2 01       	movw	r30, r4
    23c6:	23 fd       	sbrc	r18, 3
    23c8:	85 91       	lpm	r24, Z+
    23ca:	23 ff       	sbrs	r18, 3
    23cc:	81 91       	ld	r24, Z+
    23ce:	2f 01       	movw	r4, r30
    23d0:	88 23       	and	r24, r24
    23d2:	09 f4       	brne	.+2      	; 0x23d6 <vfprintf+0x46>
    23d4:	b2 c1       	rjmp	.+868    	; 0x273a <vfprintf+0x3aa>
    23d6:	85 32       	cpi	r24, 0x25	; 37
    23d8:	39 f4       	brne	.+14     	; 0x23e8 <vfprintf+0x58>
    23da:	23 fd       	sbrc	r18, 3
    23dc:	85 91       	lpm	r24, Z+
    23de:	23 ff       	sbrs	r18, 3
    23e0:	81 91       	ld	r24, Z+
    23e2:	2f 01       	movw	r4, r30
    23e4:	85 32       	cpi	r24, 0x25	; 37
    23e6:	29 f4       	brne	.+10     	; 0x23f2 <vfprintf+0x62>
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	b3 01       	movw	r22, r6
    23ec:	0e 94 bb 13 	call	0x2776	; 0x2776 <fputc>
    23f0:	e7 cf       	rjmp	.-50     	; 0x23c0 <vfprintf+0x30>
    23f2:	98 2f       	mov	r25, r24
    23f4:	ff 24       	eor	r15, r15
    23f6:	ee 24       	eor	r14, r14
    23f8:	99 24       	eor	r9, r9
    23fa:	ff e1       	ldi	r31, 0x1F	; 31
    23fc:	ff 15       	cp	r31, r15
    23fe:	d0 f0       	brcs	.+52     	; 0x2434 <vfprintf+0xa4>
    2400:	9b 32       	cpi	r25, 0x2B	; 43
    2402:	69 f0       	breq	.+26     	; 0x241e <vfprintf+0x8e>
    2404:	9c 32       	cpi	r25, 0x2C	; 44
    2406:	28 f4       	brcc	.+10     	; 0x2412 <vfprintf+0x82>
    2408:	90 32       	cpi	r25, 0x20	; 32
    240a:	59 f0       	breq	.+22     	; 0x2422 <vfprintf+0x92>
    240c:	93 32       	cpi	r25, 0x23	; 35
    240e:	91 f4       	brne	.+36     	; 0x2434 <vfprintf+0xa4>
    2410:	0e c0       	rjmp	.+28     	; 0x242e <vfprintf+0x9e>
    2412:	9d 32       	cpi	r25, 0x2D	; 45
    2414:	49 f0       	breq	.+18     	; 0x2428 <vfprintf+0x98>
    2416:	90 33       	cpi	r25, 0x30	; 48
    2418:	69 f4       	brne	.+26     	; 0x2434 <vfprintf+0xa4>
    241a:	41 e0       	ldi	r20, 0x01	; 1
    241c:	24 c0       	rjmp	.+72     	; 0x2466 <vfprintf+0xd6>
    241e:	52 e0       	ldi	r21, 0x02	; 2
    2420:	f5 2a       	or	r15, r21
    2422:	84 e0       	ldi	r24, 0x04	; 4
    2424:	f8 2a       	or	r15, r24
    2426:	28 c0       	rjmp	.+80     	; 0x2478 <vfprintf+0xe8>
    2428:	98 e0       	ldi	r25, 0x08	; 8
    242a:	f9 2a       	or	r15, r25
    242c:	25 c0       	rjmp	.+74     	; 0x2478 <vfprintf+0xe8>
    242e:	e0 e1       	ldi	r30, 0x10	; 16
    2430:	fe 2a       	or	r15, r30
    2432:	22 c0       	rjmp	.+68     	; 0x2478 <vfprintf+0xe8>
    2434:	f7 fc       	sbrc	r15, 7
    2436:	29 c0       	rjmp	.+82     	; 0x248a <vfprintf+0xfa>
    2438:	89 2f       	mov	r24, r25
    243a:	80 53       	subi	r24, 0x30	; 48
    243c:	8a 30       	cpi	r24, 0x0A	; 10
    243e:	70 f4       	brcc	.+28     	; 0x245c <vfprintf+0xcc>
    2440:	f6 fe       	sbrs	r15, 6
    2442:	05 c0       	rjmp	.+10     	; 0x244e <vfprintf+0xbe>
    2444:	98 9c       	mul	r9, r8
    2446:	90 2c       	mov	r9, r0
    2448:	11 24       	eor	r1, r1
    244a:	98 0e       	add	r9, r24
    244c:	15 c0       	rjmp	.+42     	; 0x2478 <vfprintf+0xe8>
    244e:	e8 9c       	mul	r14, r8
    2450:	e0 2c       	mov	r14, r0
    2452:	11 24       	eor	r1, r1
    2454:	e8 0e       	add	r14, r24
    2456:	f0 e2       	ldi	r31, 0x20	; 32
    2458:	ff 2a       	or	r15, r31
    245a:	0e c0       	rjmp	.+28     	; 0x2478 <vfprintf+0xe8>
    245c:	9e 32       	cpi	r25, 0x2E	; 46
    245e:	29 f4       	brne	.+10     	; 0x246a <vfprintf+0xda>
    2460:	f6 fc       	sbrc	r15, 6
    2462:	6b c1       	rjmp	.+726    	; 0x273a <vfprintf+0x3aa>
    2464:	40 e4       	ldi	r20, 0x40	; 64
    2466:	f4 2a       	or	r15, r20
    2468:	07 c0       	rjmp	.+14     	; 0x2478 <vfprintf+0xe8>
    246a:	9c 36       	cpi	r25, 0x6C	; 108
    246c:	19 f4       	brne	.+6      	; 0x2474 <vfprintf+0xe4>
    246e:	50 e8       	ldi	r21, 0x80	; 128
    2470:	f5 2a       	or	r15, r21
    2472:	02 c0       	rjmp	.+4      	; 0x2478 <vfprintf+0xe8>
    2474:	98 36       	cpi	r25, 0x68	; 104
    2476:	49 f4       	brne	.+18     	; 0x248a <vfprintf+0xfa>
    2478:	f2 01       	movw	r30, r4
    247a:	23 fd       	sbrc	r18, 3
    247c:	95 91       	lpm	r25, Z+
    247e:	23 ff       	sbrs	r18, 3
    2480:	91 91       	ld	r25, Z+
    2482:	2f 01       	movw	r4, r30
    2484:	99 23       	and	r25, r25
    2486:	09 f0       	breq	.+2      	; 0x248a <vfprintf+0xfa>
    2488:	b8 cf       	rjmp	.-144    	; 0x23fa <vfprintf+0x6a>
    248a:	89 2f       	mov	r24, r25
    248c:	85 54       	subi	r24, 0x45	; 69
    248e:	83 30       	cpi	r24, 0x03	; 3
    2490:	18 f0       	brcs	.+6      	; 0x2498 <vfprintf+0x108>
    2492:	80 52       	subi	r24, 0x20	; 32
    2494:	83 30       	cpi	r24, 0x03	; 3
    2496:	38 f4       	brcc	.+14     	; 0x24a6 <vfprintf+0x116>
    2498:	44 e0       	ldi	r20, 0x04	; 4
    249a:	50 e0       	ldi	r21, 0x00	; 0
    249c:	a4 0e       	add	r10, r20
    249e:	b5 1e       	adc	r11, r21
    24a0:	5f e3       	ldi	r21, 0x3F	; 63
    24a2:	59 83       	std	Y+1, r21	; 0x01
    24a4:	0f c0       	rjmp	.+30     	; 0x24c4 <vfprintf+0x134>
    24a6:	93 36       	cpi	r25, 0x63	; 99
    24a8:	31 f0       	breq	.+12     	; 0x24b6 <vfprintf+0x126>
    24aa:	93 37       	cpi	r25, 0x73	; 115
    24ac:	79 f0       	breq	.+30     	; 0x24cc <vfprintf+0x13c>
    24ae:	93 35       	cpi	r25, 0x53	; 83
    24b0:	09 f0       	breq	.+2      	; 0x24b4 <vfprintf+0x124>
    24b2:	56 c0       	rjmp	.+172    	; 0x2560 <vfprintf+0x1d0>
    24b4:	20 c0       	rjmp	.+64     	; 0x24f6 <vfprintf+0x166>
    24b6:	f5 01       	movw	r30, r10
    24b8:	80 81       	ld	r24, Z
    24ba:	89 83       	std	Y+1, r24	; 0x01
    24bc:	42 e0       	ldi	r20, 0x02	; 2
    24be:	50 e0       	ldi	r21, 0x00	; 0
    24c0:	a4 0e       	add	r10, r20
    24c2:	b5 1e       	adc	r11, r21
    24c4:	61 01       	movw	r12, r2
    24c6:	01 e0       	ldi	r16, 0x01	; 1
    24c8:	10 e0       	ldi	r17, 0x00	; 0
    24ca:	12 c0       	rjmp	.+36     	; 0x24f0 <vfprintf+0x160>
    24cc:	f5 01       	movw	r30, r10
    24ce:	c0 80       	ld	r12, Z
    24d0:	d1 80       	ldd	r13, Z+1	; 0x01
    24d2:	f6 fc       	sbrc	r15, 6
    24d4:	03 c0       	rjmp	.+6      	; 0x24dc <vfprintf+0x14c>
    24d6:	6f ef       	ldi	r22, 0xFF	; 255
    24d8:	7f ef       	ldi	r23, 0xFF	; 255
    24da:	02 c0       	rjmp	.+4      	; 0x24e0 <vfprintf+0x150>
    24dc:	69 2d       	mov	r22, r9
    24de:	70 e0       	ldi	r23, 0x00	; 0
    24e0:	42 e0       	ldi	r20, 0x02	; 2
    24e2:	50 e0       	ldi	r21, 0x00	; 0
    24e4:	a4 0e       	add	r10, r20
    24e6:	b5 1e       	adc	r11, r21
    24e8:	c6 01       	movw	r24, r12
    24ea:	0e 94 b0 13 	call	0x2760	; 0x2760 <strnlen>
    24ee:	8c 01       	movw	r16, r24
    24f0:	5f e7       	ldi	r21, 0x7F	; 127
    24f2:	f5 22       	and	r15, r21
    24f4:	14 c0       	rjmp	.+40     	; 0x251e <vfprintf+0x18e>
    24f6:	f5 01       	movw	r30, r10
    24f8:	c0 80       	ld	r12, Z
    24fa:	d1 80       	ldd	r13, Z+1	; 0x01
    24fc:	f6 fc       	sbrc	r15, 6
    24fe:	03 c0       	rjmp	.+6      	; 0x2506 <vfprintf+0x176>
    2500:	6f ef       	ldi	r22, 0xFF	; 255
    2502:	7f ef       	ldi	r23, 0xFF	; 255
    2504:	02 c0       	rjmp	.+4      	; 0x250a <vfprintf+0x17a>
    2506:	69 2d       	mov	r22, r9
    2508:	70 e0       	ldi	r23, 0x00	; 0
    250a:	42 e0       	ldi	r20, 0x02	; 2
    250c:	50 e0       	ldi	r21, 0x00	; 0
    250e:	a4 0e       	add	r10, r20
    2510:	b5 1e       	adc	r11, r21
    2512:	c6 01       	movw	r24, r12
    2514:	0e 94 a5 13 	call	0x274a	; 0x274a <strnlen_P>
    2518:	8c 01       	movw	r16, r24
    251a:	50 e8       	ldi	r21, 0x80	; 128
    251c:	f5 2a       	or	r15, r21
    251e:	f3 fe       	sbrs	r15, 3
    2520:	07 c0       	rjmp	.+14     	; 0x2530 <vfprintf+0x1a0>
    2522:	1a c0       	rjmp	.+52     	; 0x2558 <vfprintf+0x1c8>
    2524:	80 e2       	ldi	r24, 0x20	; 32
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	b3 01       	movw	r22, r6
    252a:	0e 94 bb 13 	call	0x2776	; 0x2776 <fputc>
    252e:	ea 94       	dec	r14
    2530:	8e 2d       	mov	r24, r14
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	08 17       	cp	r16, r24
    2536:	19 07       	cpc	r17, r25
    2538:	a8 f3       	brcs	.-22     	; 0x2524 <vfprintf+0x194>
    253a:	0e c0       	rjmp	.+28     	; 0x2558 <vfprintf+0x1c8>
    253c:	f6 01       	movw	r30, r12
    253e:	f7 fc       	sbrc	r15, 7
    2540:	85 91       	lpm	r24, Z+
    2542:	f7 fe       	sbrs	r15, 7
    2544:	81 91       	ld	r24, Z+
    2546:	6f 01       	movw	r12, r30
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	b3 01       	movw	r22, r6
    254c:	0e 94 bb 13 	call	0x2776	; 0x2776 <fputc>
    2550:	e1 10       	cpse	r14, r1
    2552:	ea 94       	dec	r14
    2554:	01 50       	subi	r16, 0x01	; 1
    2556:	10 40       	sbci	r17, 0x00	; 0
    2558:	01 15       	cp	r16, r1
    255a:	11 05       	cpc	r17, r1
    255c:	79 f7       	brne	.-34     	; 0x253c <vfprintf+0x1ac>
    255e:	ea c0       	rjmp	.+468    	; 0x2734 <vfprintf+0x3a4>
    2560:	94 36       	cpi	r25, 0x64	; 100
    2562:	11 f0       	breq	.+4      	; 0x2568 <vfprintf+0x1d8>
    2564:	99 36       	cpi	r25, 0x69	; 105
    2566:	69 f5       	brne	.+90     	; 0x25c2 <vfprintf+0x232>
    2568:	f7 fe       	sbrs	r15, 7
    256a:	08 c0       	rjmp	.+16     	; 0x257c <vfprintf+0x1ec>
    256c:	f5 01       	movw	r30, r10
    256e:	20 81       	ld	r18, Z
    2570:	31 81       	ldd	r19, Z+1	; 0x01
    2572:	42 81       	ldd	r20, Z+2	; 0x02
    2574:	53 81       	ldd	r21, Z+3	; 0x03
    2576:	84 e0       	ldi	r24, 0x04	; 4
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	0a c0       	rjmp	.+20     	; 0x2590 <vfprintf+0x200>
    257c:	f5 01       	movw	r30, r10
    257e:	80 81       	ld	r24, Z
    2580:	91 81       	ldd	r25, Z+1	; 0x01
    2582:	9c 01       	movw	r18, r24
    2584:	44 27       	eor	r20, r20
    2586:	37 fd       	sbrc	r19, 7
    2588:	40 95       	com	r20
    258a:	54 2f       	mov	r21, r20
    258c:	82 e0       	ldi	r24, 0x02	; 2
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	a8 0e       	add	r10, r24
    2592:	b9 1e       	adc	r11, r25
    2594:	9f e6       	ldi	r25, 0x6F	; 111
    2596:	f9 22       	and	r15, r25
    2598:	57 ff       	sbrs	r21, 7
    259a:	09 c0       	rjmp	.+18     	; 0x25ae <vfprintf+0x21e>
    259c:	50 95       	com	r21
    259e:	40 95       	com	r20
    25a0:	30 95       	com	r19
    25a2:	21 95       	neg	r18
    25a4:	3f 4f       	sbci	r19, 0xFF	; 255
    25a6:	4f 4f       	sbci	r20, 0xFF	; 255
    25a8:	5f 4f       	sbci	r21, 0xFF	; 255
    25aa:	e0 e8       	ldi	r30, 0x80	; 128
    25ac:	fe 2a       	or	r15, r30
    25ae:	ca 01       	movw	r24, r20
    25b0:	b9 01       	movw	r22, r18
    25b2:	a1 01       	movw	r20, r2
    25b4:	2a e0       	ldi	r18, 0x0A	; 10
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__ultoa_invert>
    25bc:	d8 2e       	mov	r13, r24
    25be:	d2 18       	sub	r13, r2
    25c0:	40 c0       	rjmp	.+128    	; 0x2642 <vfprintf+0x2b2>
    25c2:	95 37       	cpi	r25, 0x75	; 117
    25c4:	29 f4       	brne	.+10     	; 0x25d0 <vfprintf+0x240>
    25c6:	1f 2d       	mov	r17, r15
    25c8:	1f 7e       	andi	r17, 0xEF	; 239
    25ca:	2a e0       	ldi	r18, 0x0A	; 10
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	1d c0       	rjmp	.+58     	; 0x260a <vfprintf+0x27a>
    25d0:	1f 2d       	mov	r17, r15
    25d2:	19 7f       	andi	r17, 0xF9	; 249
    25d4:	9f 36       	cpi	r25, 0x6F	; 111
    25d6:	61 f0       	breq	.+24     	; 0x25f0 <vfprintf+0x260>
    25d8:	90 37       	cpi	r25, 0x70	; 112
    25da:	20 f4       	brcc	.+8      	; 0x25e4 <vfprintf+0x254>
    25dc:	98 35       	cpi	r25, 0x58	; 88
    25de:	09 f0       	breq	.+2      	; 0x25e2 <vfprintf+0x252>
    25e0:	ac c0       	rjmp	.+344    	; 0x273a <vfprintf+0x3aa>
    25e2:	0f c0       	rjmp	.+30     	; 0x2602 <vfprintf+0x272>
    25e4:	90 37       	cpi	r25, 0x70	; 112
    25e6:	39 f0       	breq	.+14     	; 0x25f6 <vfprintf+0x266>
    25e8:	98 37       	cpi	r25, 0x78	; 120
    25ea:	09 f0       	breq	.+2      	; 0x25ee <vfprintf+0x25e>
    25ec:	a6 c0       	rjmp	.+332    	; 0x273a <vfprintf+0x3aa>
    25ee:	04 c0       	rjmp	.+8      	; 0x25f8 <vfprintf+0x268>
    25f0:	28 e0       	ldi	r18, 0x08	; 8
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	0a c0       	rjmp	.+20     	; 0x260a <vfprintf+0x27a>
    25f6:	10 61       	ori	r17, 0x10	; 16
    25f8:	14 fd       	sbrc	r17, 4
    25fa:	14 60       	ori	r17, 0x04	; 4
    25fc:	20 e1       	ldi	r18, 0x10	; 16
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	04 c0       	rjmp	.+8      	; 0x260a <vfprintf+0x27a>
    2602:	14 fd       	sbrc	r17, 4
    2604:	16 60       	ori	r17, 0x06	; 6
    2606:	20 e1       	ldi	r18, 0x10	; 16
    2608:	32 e0       	ldi	r19, 0x02	; 2
    260a:	17 ff       	sbrs	r17, 7
    260c:	08 c0       	rjmp	.+16     	; 0x261e <vfprintf+0x28e>
    260e:	f5 01       	movw	r30, r10
    2610:	60 81       	ld	r22, Z
    2612:	71 81       	ldd	r23, Z+1	; 0x01
    2614:	82 81       	ldd	r24, Z+2	; 0x02
    2616:	93 81       	ldd	r25, Z+3	; 0x03
    2618:	44 e0       	ldi	r20, 0x04	; 4
    261a:	50 e0       	ldi	r21, 0x00	; 0
    261c:	08 c0       	rjmp	.+16     	; 0x262e <vfprintf+0x29e>
    261e:	f5 01       	movw	r30, r10
    2620:	80 81       	ld	r24, Z
    2622:	91 81       	ldd	r25, Z+1	; 0x01
    2624:	bc 01       	movw	r22, r24
    2626:	80 e0       	ldi	r24, 0x00	; 0
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	42 e0       	ldi	r20, 0x02	; 2
    262c:	50 e0       	ldi	r21, 0x00	; 0
    262e:	a4 0e       	add	r10, r20
    2630:	b5 1e       	adc	r11, r21
    2632:	a1 01       	movw	r20, r2
    2634:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__ultoa_invert>
    2638:	d8 2e       	mov	r13, r24
    263a:	d2 18       	sub	r13, r2
    263c:	8f e7       	ldi	r24, 0x7F	; 127
    263e:	f8 2e       	mov	r15, r24
    2640:	f1 22       	and	r15, r17
    2642:	f6 fe       	sbrs	r15, 6
    2644:	0b c0       	rjmp	.+22     	; 0x265c <vfprintf+0x2cc>
    2646:	5e ef       	ldi	r21, 0xFE	; 254
    2648:	f5 22       	and	r15, r21
    264a:	d9 14       	cp	r13, r9
    264c:	38 f4       	brcc	.+14     	; 0x265c <vfprintf+0x2cc>
    264e:	f4 fe       	sbrs	r15, 4
    2650:	07 c0       	rjmp	.+14     	; 0x2660 <vfprintf+0x2d0>
    2652:	f2 fc       	sbrc	r15, 2
    2654:	05 c0       	rjmp	.+10     	; 0x2660 <vfprintf+0x2d0>
    2656:	8f ee       	ldi	r24, 0xEF	; 239
    2658:	f8 22       	and	r15, r24
    265a:	02 c0       	rjmp	.+4      	; 0x2660 <vfprintf+0x2d0>
    265c:	1d 2d       	mov	r17, r13
    265e:	01 c0       	rjmp	.+2      	; 0x2662 <vfprintf+0x2d2>
    2660:	19 2d       	mov	r17, r9
    2662:	f4 fe       	sbrs	r15, 4
    2664:	0d c0       	rjmp	.+26     	; 0x2680 <vfprintf+0x2f0>
    2666:	fe 01       	movw	r30, r28
    2668:	ed 0d       	add	r30, r13
    266a:	f1 1d       	adc	r31, r1
    266c:	80 81       	ld	r24, Z
    266e:	80 33       	cpi	r24, 0x30	; 48
    2670:	19 f4       	brne	.+6      	; 0x2678 <vfprintf+0x2e8>
    2672:	99 ee       	ldi	r25, 0xE9	; 233
    2674:	f9 22       	and	r15, r25
    2676:	08 c0       	rjmp	.+16     	; 0x2688 <vfprintf+0x2f8>
    2678:	1f 5f       	subi	r17, 0xFF	; 255
    267a:	f2 fe       	sbrs	r15, 2
    267c:	05 c0       	rjmp	.+10     	; 0x2688 <vfprintf+0x2f8>
    267e:	03 c0       	rjmp	.+6      	; 0x2686 <vfprintf+0x2f6>
    2680:	8f 2d       	mov	r24, r15
    2682:	86 78       	andi	r24, 0x86	; 134
    2684:	09 f0       	breq	.+2      	; 0x2688 <vfprintf+0x2f8>
    2686:	1f 5f       	subi	r17, 0xFF	; 255
    2688:	0f 2d       	mov	r16, r15
    268a:	f3 fc       	sbrc	r15, 3
    268c:	14 c0       	rjmp	.+40     	; 0x26b6 <vfprintf+0x326>
    268e:	f0 fe       	sbrs	r15, 0
    2690:	0f c0       	rjmp	.+30     	; 0x26b0 <vfprintf+0x320>
    2692:	1e 15       	cp	r17, r14
    2694:	10 f0       	brcs	.+4      	; 0x269a <vfprintf+0x30a>
    2696:	9d 2c       	mov	r9, r13
    2698:	0b c0       	rjmp	.+22     	; 0x26b0 <vfprintf+0x320>
    269a:	9d 2c       	mov	r9, r13
    269c:	9e 0c       	add	r9, r14
    269e:	91 1a       	sub	r9, r17
    26a0:	1e 2d       	mov	r17, r14
    26a2:	06 c0       	rjmp	.+12     	; 0x26b0 <vfprintf+0x320>
    26a4:	80 e2       	ldi	r24, 0x20	; 32
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	b3 01       	movw	r22, r6
    26aa:	0e 94 bb 13 	call	0x2776	; 0x2776 <fputc>
    26ae:	1f 5f       	subi	r17, 0xFF	; 255
    26b0:	1e 15       	cp	r17, r14
    26b2:	c0 f3       	brcs	.-16     	; 0x26a4 <vfprintf+0x314>
    26b4:	04 c0       	rjmp	.+8      	; 0x26be <vfprintf+0x32e>
    26b6:	1e 15       	cp	r17, r14
    26b8:	10 f4       	brcc	.+4      	; 0x26be <vfprintf+0x32e>
    26ba:	e1 1a       	sub	r14, r17
    26bc:	01 c0       	rjmp	.+2      	; 0x26c0 <vfprintf+0x330>
    26be:	ee 24       	eor	r14, r14
    26c0:	04 ff       	sbrs	r16, 4
    26c2:	0f c0       	rjmp	.+30     	; 0x26e2 <vfprintf+0x352>
    26c4:	80 e3       	ldi	r24, 0x30	; 48
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	b3 01       	movw	r22, r6
    26ca:	0e 94 bb 13 	call	0x2776	; 0x2776 <fputc>
    26ce:	02 ff       	sbrs	r16, 2
    26d0:	1d c0       	rjmp	.+58     	; 0x270c <vfprintf+0x37c>
    26d2:	01 fd       	sbrc	r16, 1
    26d4:	03 c0       	rjmp	.+6      	; 0x26dc <vfprintf+0x34c>
    26d6:	88 e7       	ldi	r24, 0x78	; 120
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	0e c0       	rjmp	.+28     	; 0x26f8 <vfprintf+0x368>
    26dc:	88 e5       	ldi	r24, 0x58	; 88
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	0b c0       	rjmp	.+22     	; 0x26f8 <vfprintf+0x368>
    26e2:	80 2f       	mov	r24, r16
    26e4:	86 78       	andi	r24, 0x86	; 134
    26e6:	91 f0       	breq	.+36     	; 0x270c <vfprintf+0x37c>
    26e8:	01 ff       	sbrs	r16, 1
    26ea:	02 c0       	rjmp	.+4      	; 0x26f0 <vfprintf+0x360>
    26ec:	8b e2       	ldi	r24, 0x2B	; 43
    26ee:	01 c0       	rjmp	.+2      	; 0x26f2 <vfprintf+0x362>
    26f0:	80 e2       	ldi	r24, 0x20	; 32
    26f2:	f7 fc       	sbrc	r15, 7
    26f4:	8d e2       	ldi	r24, 0x2D	; 45
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	b3 01       	movw	r22, r6
    26fa:	0e 94 bb 13 	call	0x2776	; 0x2776 <fputc>
    26fe:	06 c0       	rjmp	.+12     	; 0x270c <vfprintf+0x37c>
    2700:	80 e3       	ldi	r24, 0x30	; 48
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	b3 01       	movw	r22, r6
    2706:	0e 94 bb 13 	call	0x2776	; 0x2776 <fputc>
    270a:	9a 94       	dec	r9
    270c:	d9 14       	cp	r13, r9
    270e:	c0 f3       	brcs	.-16     	; 0x2700 <vfprintf+0x370>
    2710:	da 94       	dec	r13
    2712:	f1 01       	movw	r30, r2
    2714:	ed 0d       	add	r30, r13
    2716:	f1 1d       	adc	r31, r1
    2718:	80 81       	ld	r24, Z
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	b3 01       	movw	r22, r6
    271e:	0e 94 bb 13 	call	0x2776	; 0x2776 <fputc>
    2722:	dd 20       	and	r13, r13
    2724:	a9 f7       	brne	.-22     	; 0x2710 <vfprintf+0x380>
    2726:	06 c0       	rjmp	.+12     	; 0x2734 <vfprintf+0x3a4>
    2728:	80 e2       	ldi	r24, 0x20	; 32
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	b3 01       	movw	r22, r6
    272e:	0e 94 bb 13 	call	0x2776	; 0x2776 <fputc>
    2732:	ea 94       	dec	r14
    2734:	ee 20       	and	r14, r14
    2736:	c1 f7       	brne	.-16     	; 0x2728 <vfprintf+0x398>
    2738:	43 ce       	rjmp	.-890    	; 0x23c0 <vfprintf+0x30>
    273a:	f3 01       	movw	r30, r6
    273c:	66 81       	ldd	r22, Z+6	; 0x06
    273e:	77 81       	ldd	r23, Z+7	; 0x07
    2740:	cb 01       	movw	r24, r22
    2742:	2b 96       	adiw	r28, 0x0b	; 11
    2744:	e2 e1       	ldi	r30, 0x12	; 18
    2746:	0c 94 61 14 	jmp	0x28c2	; 0x28c2 <__epilogue_restores__>

0000274a <strnlen_P>:
    274a:	fc 01       	movw	r30, r24
    274c:	05 90       	lpm	r0, Z+
    274e:	61 50       	subi	r22, 0x01	; 1
    2750:	70 40       	sbci	r23, 0x00	; 0
    2752:	01 10       	cpse	r0, r1
    2754:	d8 f7       	brcc	.-10     	; 0x274c <strnlen_P+0x2>
    2756:	80 95       	com	r24
    2758:	90 95       	com	r25
    275a:	8e 0f       	add	r24, r30
    275c:	9f 1f       	adc	r25, r31
    275e:	08 95       	ret

00002760 <strnlen>:
    2760:	fc 01       	movw	r30, r24
    2762:	61 50       	subi	r22, 0x01	; 1
    2764:	70 40       	sbci	r23, 0x00	; 0
    2766:	01 90       	ld	r0, Z+
    2768:	01 10       	cpse	r0, r1
    276a:	d8 f7       	brcc	.-10     	; 0x2762 <strnlen+0x2>
    276c:	80 95       	com	r24
    276e:	90 95       	com	r25
    2770:	8e 0f       	add	r24, r30
    2772:	9f 1f       	adc	r25, r31
    2774:	08 95       	ret

00002776 <fputc>:
    2776:	0f 93       	push	r16
    2778:	1f 93       	push	r17
    277a:	cf 93       	push	r28
    277c:	df 93       	push	r29
    277e:	8c 01       	movw	r16, r24
    2780:	eb 01       	movw	r28, r22
    2782:	8b 81       	ldd	r24, Y+3	; 0x03
    2784:	81 ff       	sbrs	r24, 1
    2786:	1b c0       	rjmp	.+54     	; 0x27be <fputc+0x48>
    2788:	82 ff       	sbrs	r24, 2
    278a:	0d c0       	rjmp	.+26     	; 0x27a6 <fputc+0x30>
    278c:	2e 81       	ldd	r18, Y+6	; 0x06
    278e:	3f 81       	ldd	r19, Y+7	; 0x07
    2790:	8c 81       	ldd	r24, Y+4	; 0x04
    2792:	9d 81       	ldd	r25, Y+5	; 0x05
    2794:	28 17       	cp	r18, r24
    2796:	39 07       	cpc	r19, r25
    2798:	64 f4       	brge	.+24     	; 0x27b2 <fputc+0x3c>
    279a:	e8 81       	ld	r30, Y
    279c:	f9 81       	ldd	r31, Y+1	; 0x01
    279e:	01 93       	st	Z+, r16
    27a0:	f9 83       	std	Y+1, r31	; 0x01
    27a2:	e8 83       	st	Y, r30
    27a4:	06 c0       	rjmp	.+12     	; 0x27b2 <fputc+0x3c>
    27a6:	e8 85       	ldd	r30, Y+8	; 0x08
    27a8:	f9 85       	ldd	r31, Y+9	; 0x09
    27aa:	80 2f       	mov	r24, r16
    27ac:	09 95       	icall
    27ae:	89 2b       	or	r24, r25
    27b0:	31 f4       	brne	.+12     	; 0x27be <fputc+0x48>
    27b2:	8e 81       	ldd	r24, Y+6	; 0x06
    27b4:	9f 81       	ldd	r25, Y+7	; 0x07
    27b6:	01 96       	adiw	r24, 0x01	; 1
    27b8:	9f 83       	std	Y+7, r25	; 0x07
    27ba:	8e 83       	std	Y+6, r24	; 0x06
    27bc:	02 c0       	rjmp	.+4      	; 0x27c2 <fputc+0x4c>
    27be:	0f ef       	ldi	r16, 0xFF	; 255
    27c0:	1f ef       	ldi	r17, 0xFF	; 255
    27c2:	c8 01       	movw	r24, r16
    27c4:	df 91       	pop	r29
    27c6:	cf 91       	pop	r28
    27c8:	1f 91       	pop	r17
    27ca:	0f 91       	pop	r16
    27cc:	08 95       	ret

000027ce <__ultoa_invert>:
    27ce:	fa 01       	movw	r30, r20
    27d0:	aa 27       	eor	r26, r26
    27d2:	28 30       	cpi	r18, 0x08	; 8
    27d4:	51 f1       	breq	.+84     	; 0x282a <__ultoa_invert+0x5c>
    27d6:	20 31       	cpi	r18, 0x10	; 16
    27d8:	81 f1       	breq	.+96     	; 0x283a <__ultoa_invert+0x6c>
    27da:	e8 94       	clt
    27dc:	6f 93       	push	r22
    27de:	6e 7f       	andi	r22, 0xFE	; 254
    27e0:	6e 5f       	subi	r22, 0xFE	; 254
    27e2:	7f 4f       	sbci	r23, 0xFF	; 255
    27e4:	8f 4f       	sbci	r24, 0xFF	; 255
    27e6:	9f 4f       	sbci	r25, 0xFF	; 255
    27e8:	af 4f       	sbci	r26, 0xFF	; 255
    27ea:	b1 e0       	ldi	r27, 0x01	; 1
    27ec:	3e d0       	rcall	.+124    	; 0x286a <__ultoa_invert+0x9c>
    27ee:	b4 e0       	ldi	r27, 0x04	; 4
    27f0:	3c d0       	rcall	.+120    	; 0x286a <__ultoa_invert+0x9c>
    27f2:	67 0f       	add	r22, r23
    27f4:	78 1f       	adc	r23, r24
    27f6:	89 1f       	adc	r24, r25
    27f8:	9a 1f       	adc	r25, r26
    27fa:	a1 1d       	adc	r26, r1
    27fc:	68 0f       	add	r22, r24
    27fe:	79 1f       	adc	r23, r25
    2800:	8a 1f       	adc	r24, r26
    2802:	91 1d       	adc	r25, r1
    2804:	a1 1d       	adc	r26, r1
    2806:	6a 0f       	add	r22, r26
    2808:	71 1d       	adc	r23, r1
    280a:	81 1d       	adc	r24, r1
    280c:	91 1d       	adc	r25, r1
    280e:	a1 1d       	adc	r26, r1
    2810:	20 d0       	rcall	.+64     	; 0x2852 <__ultoa_invert+0x84>
    2812:	09 f4       	brne	.+2      	; 0x2816 <__ultoa_invert+0x48>
    2814:	68 94       	set
    2816:	3f 91       	pop	r19
    2818:	2a e0       	ldi	r18, 0x0A	; 10
    281a:	26 9f       	mul	r18, r22
    281c:	11 24       	eor	r1, r1
    281e:	30 19       	sub	r19, r0
    2820:	30 5d       	subi	r19, 0xD0	; 208
    2822:	31 93       	st	Z+, r19
    2824:	de f6       	brtc	.-74     	; 0x27dc <__ultoa_invert+0xe>
    2826:	cf 01       	movw	r24, r30
    2828:	08 95       	ret
    282a:	46 2f       	mov	r20, r22
    282c:	47 70       	andi	r20, 0x07	; 7
    282e:	40 5d       	subi	r20, 0xD0	; 208
    2830:	41 93       	st	Z+, r20
    2832:	b3 e0       	ldi	r27, 0x03	; 3
    2834:	0f d0       	rcall	.+30     	; 0x2854 <__ultoa_invert+0x86>
    2836:	c9 f7       	brne	.-14     	; 0x282a <__ultoa_invert+0x5c>
    2838:	f6 cf       	rjmp	.-20     	; 0x2826 <__ultoa_invert+0x58>
    283a:	46 2f       	mov	r20, r22
    283c:	4f 70       	andi	r20, 0x0F	; 15
    283e:	40 5d       	subi	r20, 0xD0	; 208
    2840:	4a 33       	cpi	r20, 0x3A	; 58
    2842:	18 f0       	brcs	.+6      	; 0x284a <__ultoa_invert+0x7c>
    2844:	49 5d       	subi	r20, 0xD9	; 217
    2846:	31 fd       	sbrc	r19, 1
    2848:	40 52       	subi	r20, 0x20	; 32
    284a:	41 93       	st	Z+, r20
    284c:	02 d0       	rcall	.+4      	; 0x2852 <__ultoa_invert+0x84>
    284e:	a9 f7       	brne	.-22     	; 0x283a <__ultoa_invert+0x6c>
    2850:	ea cf       	rjmp	.-44     	; 0x2826 <__ultoa_invert+0x58>
    2852:	b4 e0       	ldi	r27, 0x04	; 4
    2854:	a6 95       	lsr	r26
    2856:	97 95       	ror	r25
    2858:	87 95       	ror	r24
    285a:	77 95       	ror	r23
    285c:	67 95       	ror	r22
    285e:	ba 95       	dec	r27
    2860:	c9 f7       	brne	.-14     	; 0x2854 <__ultoa_invert+0x86>
    2862:	00 97       	sbiw	r24, 0x00	; 0
    2864:	61 05       	cpc	r22, r1
    2866:	71 05       	cpc	r23, r1
    2868:	08 95       	ret
    286a:	9b 01       	movw	r18, r22
    286c:	ac 01       	movw	r20, r24
    286e:	0a 2e       	mov	r0, r26
    2870:	06 94       	lsr	r0
    2872:	57 95       	ror	r21
    2874:	47 95       	ror	r20
    2876:	37 95       	ror	r19
    2878:	27 95       	ror	r18
    287a:	ba 95       	dec	r27
    287c:	c9 f7       	brne	.-14     	; 0x2870 <__ultoa_invert+0xa2>
    287e:	62 0f       	add	r22, r18
    2880:	73 1f       	adc	r23, r19
    2882:	84 1f       	adc	r24, r20
    2884:	95 1f       	adc	r25, r21
    2886:	a0 1d       	adc	r26, r0
    2888:	08 95       	ret

0000288a <__prologue_saves__>:
    288a:	2f 92       	push	r2
    288c:	3f 92       	push	r3
    288e:	4f 92       	push	r4
    2890:	5f 92       	push	r5
    2892:	6f 92       	push	r6
    2894:	7f 92       	push	r7
    2896:	8f 92       	push	r8
    2898:	9f 92       	push	r9
    289a:	af 92       	push	r10
    289c:	bf 92       	push	r11
    289e:	cf 92       	push	r12
    28a0:	df 92       	push	r13
    28a2:	ef 92       	push	r14
    28a4:	ff 92       	push	r15
    28a6:	0f 93       	push	r16
    28a8:	1f 93       	push	r17
    28aa:	cf 93       	push	r28
    28ac:	df 93       	push	r29
    28ae:	cd b7       	in	r28, 0x3d	; 61
    28b0:	de b7       	in	r29, 0x3e	; 62
    28b2:	ca 1b       	sub	r28, r26
    28b4:	db 0b       	sbc	r29, r27
    28b6:	0f b6       	in	r0, 0x3f	; 63
    28b8:	f8 94       	cli
    28ba:	de bf       	out	0x3e, r29	; 62
    28bc:	0f be       	out	0x3f, r0	; 63
    28be:	cd bf       	out	0x3d, r28	; 61
    28c0:	09 94       	ijmp

000028c2 <__epilogue_restores__>:
    28c2:	2a 88       	ldd	r2, Y+18	; 0x12
    28c4:	39 88       	ldd	r3, Y+17	; 0x11
    28c6:	48 88       	ldd	r4, Y+16	; 0x10
    28c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    28ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    28cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    28ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    28d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    28d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    28d4:	b9 84       	ldd	r11, Y+9	; 0x09
    28d6:	c8 84       	ldd	r12, Y+8	; 0x08
    28d8:	df 80       	ldd	r13, Y+7	; 0x07
    28da:	ee 80       	ldd	r14, Y+6	; 0x06
    28dc:	fd 80       	ldd	r15, Y+5	; 0x05
    28de:	0c 81       	ldd	r16, Y+4	; 0x04
    28e0:	1b 81       	ldd	r17, Y+3	; 0x03
    28e2:	aa 81       	ldd	r26, Y+2	; 0x02
    28e4:	b9 81       	ldd	r27, Y+1	; 0x01
    28e6:	ce 0f       	add	r28, r30
    28e8:	d1 1d       	adc	r29, r1
    28ea:	0f b6       	in	r0, 0x3f	; 63
    28ec:	f8 94       	cli
    28ee:	de bf       	out	0x3e, r29	; 62
    28f0:	0f be       	out	0x3f, r0	; 63
    28f2:	cd bf       	out	0x3d, r28	; 61
    28f4:	ed 01       	movw	r28, r26
    28f6:	08 95       	ret

000028f8 <_exit>:
    28f8:	f8 94       	cli

000028fa <__stop_program>:
    28fa:	ff cf       	rjmp	.-2      	; 0x28fa <__stop_program>
