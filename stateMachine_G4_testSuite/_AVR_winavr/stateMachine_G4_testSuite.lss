
stateMachine_G4_testSuite.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000220a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000057a  00800060  0000220a  0000229e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ae  008005da  008005da  00002818  2**0
                  ALLOC
  3 .stab         000022f8  00000000  00000000  00002818  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001f44  00000000  00000000  00004b10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	15 e0       	ldi	r17, 0x05	; 5
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e0       	ldi	r30, 0x0A	; 10
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3d       	cpi	r26, 0xDA	; 218
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	16 e0       	ldi	r17, 0x06	; 6
      78:	aa ed       	ldi	r26, 0xDA	; 218
      7a:	b5 e0       	ldi	r27, 0x05	; 5
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 38       	cpi	r26, 0x88	; 136
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c0 07 	call	0xf80	; 0xf80 <main>
      8a:	0c 94 03 11 	jmp	0x2206	; 0x2206 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <initializeEventQueue>:
#include "stateMachine_G4.h"
#include "stateMachine_G4_eventQueue.h"


bool initializeEventQueue(	eventQueue_t* Q, event_t** storage, uint8_t maxEntriesInQueue)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	00 d0       	rcall	.+0      	; 0x98 <initializeEventQueue+0x6>
      98:	00 d0       	rcall	.+0      	; 0x9a <initializeEventQueue+0x8>
      9a:	0f 92       	push	r0
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	9a 83       	std	Y+2, r25	; 0x02
      a2:	89 83       	std	Y+1, r24	; 0x01
      a4:	7c 83       	std	Y+4, r23	; 0x04
      a6:	6b 83       	std	Y+3, r22	; 0x03
      a8:	4d 83       	std	Y+5, r20	; 0x05
	Q->Capacity	= maxEntriesInQueue ;
      aa:	e9 81       	ldd	r30, Y+1	; 0x01
      ac:	fa 81       	ldd	r31, Y+2	; 0x02
      ae:	8d 81       	ldd	r24, Y+5	; 0x05
      b0:	80 83       	st	Z, r24
	Q->Size		= 0 ;
      b2:	e9 81       	ldd	r30, Y+1	; 0x01
      b4:	fa 81       	ldd	r31, Y+2	; 0x02
      b6:	13 82       	std	Z+3, r1	; 0x03
	Q->Front	= 1 ;
      b8:	e9 81       	ldd	r30, Y+1	; 0x01
      ba:	fa 81       	ldd	r31, Y+2	; 0x02
      bc:	81 e0       	ldi	r24, 0x01	; 1
      be:	81 83       	std	Z+1, r24	; 0x01
	Q->Rear		= 0 ;
      c0:	e9 81       	ldd	r30, Y+1	; 0x01
      c2:	fa 81       	ldd	r31, Y+2	; 0x02
      c4:	12 82       	std	Z+2, r1	; 0x02
	Q->Array	= storage ;
      c6:	e9 81       	ldd	r30, Y+1	; 0x01
      c8:	fa 81       	ldd	r31, Y+2	; 0x02
      ca:	8b 81       	ldd	r24, Y+3	; 0x03
      cc:	9c 81       	ldd	r25, Y+4	; 0x04
      ce:	95 83       	std	Z+5, r25	; 0x05
      d0:	84 83       	std	Z+4, r24	; 0x04

	return true ;
      d2:	81 e0       	ldi	r24, 0x01	; 1
}
      d4:	0f 90       	pop	r0
      d6:	0f 90       	pop	r0
      d8:	0f 90       	pop	r0
      da:	0f 90       	pop	r0
      dc:	0f 90       	pop	r0
      de:	cf 91       	pop	r28
      e0:	df 91       	pop	r29
      e2:	08 95       	ret

000000e4 <clearQueue>:


void clearQueue(			eventQueue_t* Q)
{
      e4:	df 93       	push	r29
      e6:	cf 93       	push	r28
      e8:	00 d0       	rcall	.+0      	; 0xea <clearQueue+0x6>
      ea:	cd b7       	in	r28, 0x3d	; 61
      ec:	de b7       	in	r29, 0x3e	; 62
      ee:	9a 83       	std	Y+2, r25	; 0x02
      f0:	89 83       	std	Y+1, r24	; 0x01
	Q->Size		= 0 ;
      f2:	e9 81       	ldd	r30, Y+1	; 0x01
      f4:	fa 81       	ldd	r31, Y+2	; 0x02
      f6:	13 82       	std	Z+3, r1	; 0x03
	Q->Front	= 1 ;
      f8:	e9 81       	ldd	r30, Y+1	; 0x01
      fa:	fa 81       	ldd	r31, Y+2	; 0x02
      fc:	81 e0       	ldi	r24, 0x01	; 1
      fe:	81 83       	std	Z+1, r24	; 0x01
	Q->Rear		= 0 ;
     100:	e9 81       	ldd	r30, Y+1	; 0x01
     102:	fa 81       	ldd	r31, Y+2	; 0x02
     104:	12 82       	std	Z+2, r1	; 0x02
}
     106:	0f 90       	pop	r0
     108:	0f 90       	pop	r0
     10a:	cf 91       	pop	r28
     10c:	df 91       	pop	r29
     10e:	08 95       	ret

00000110 <isEmpty>:


uint8_t isEmpty(			eventQueue_t* Q)
{
     110:	df 93       	push	r29
     112:	cf 93       	push	r28
     114:	00 d0       	rcall	.+0      	; 0x116 <isEmpty+0x6>
     116:	0f 92       	push	r0
     118:	cd b7       	in	r28, 0x3d	; 61
     11a:	de b7       	in	r29, 0x3e	; 62
     11c:	9a 83       	std	Y+2, r25	; 0x02
     11e:	89 83       	std	Y+1, r24	; 0x01
	return Q->Size == 0 ;
     120:	e9 81       	ldd	r30, Y+1	; 0x01
     122:	fa 81       	ldd	r31, Y+2	; 0x02
     124:	83 81       	ldd	r24, Z+3	; 0x03
     126:	1b 82       	std	Y+3, r1	; 0x03
     128:	88 23       	and	r24, r24
     12a:	11 f4       	brne	.+4      	; 0x130 <isEmpty+0x20>
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	8b 83       	std	Y+3, r24	; 0x03
     130:	8b 81       	ldd	r24, Y+3	; 0x03
}
     132:	0f 90       	pop	r0
     134:	0f 90       	pop	r0
     136:	0f 90       	pop	r0
     138:	cf 91       	pop	r28
     13a:	df 91       	pop	r29
     13c:	08 95       	ret

0000013e <isFull>:


uint8_t isFull(				eventQueue_t* Q)
{
     13e:	df 93       	push	r29
     140:	cf 93       	push	r28
     142:	00 d0       	rcall	.+0      	; 0x144 <isFull+0x6>
     144:	0f 92       	push	r0
     146:	cd b7       	in	r28, 0x3d	; 61
     148:	de b7       	in	r29, 0x3e	; 62
     14a:	9a 83       	std	Y+2, r25	; 0x02
     14c:	89 83       	std	Y+1, r24	; 0x01
	return Q->Size == Q->Capacity ;
     14e:	e9 81       	ldd	r30, Y+1	; 0x01
     150:	fa 81       	ldd	r31, Y+2	; 0x02
     152:	93 81       	ldd	r25, Z+3	; 0x03
     154:	e9 81       	ldd	r30, Y+1	; 0x01
     156:	fa 81       	ldd	r31, Y+2	; 0x02
     158:	80 81       	ld	r24, Z
     15a:	1b 82       	std	Y+3, r1	; 0x03
     15c:	98 17       	cp	r25, r24
     15e:	11 f4       	brne	.+4      	; 0x164 <isFull+0x26>
     160:	81 e0       	ldi	r24, 0x01	; 1
     162:	8b 83       	std	Y+3, r24	; 0x03
     164:	8b 81       	ldd	r24, Y+3	; 0x03
}
     166:	0f 90       	pop	r0
     168:	0f 90       	pop	r0
     16a:	0f 90       	pop	r0
     16c:	cf 91       	pop	r28
     16e:	df 91       	pop	r29
     170:	08 95       	ret

00000172 <nextLocationFromPoint>:


static uint8_t nextLocationFromPoint(	eventQueue_t* Q, uint8_t location)
{
     172:	df 93       	push	r29
     174:	cf 93       	push	r28
     176:	00 d0       	rcall	.+0      	; 0x178 <nextLocationFromPoint+0x6>
     178:	0f 92       	push	r0
     17a:	cd b7       	in	r28, 0x3d	; 61
     17c:	de b7       	in	r29, 0x3e	; 62
     17e:	9a 83       	std	Y+2, r25	; 0x02
     180:	89 83       	std	Y+1, r24	; 0x01
     182:	6b 83       	std	Y+3, r22	; 0x03
	if(++location == Q->Capacity)
     184:	8b 81       	ldd	r24, Y+3	; 0x03
     186:	8f 5f       	subi	r24, 0xFF	; 255
     188:	8b 83       	std	Y+3, r24	; 0x03
     18a:	e9 81       	ldd	r30, Y+1	; 0x01
     18c:	fa 81       	ldd	r31, Y+2	; 0x02
     18e:	90 81       	ld	r25, Z
     190:	8b 81       	ldd	r24, Y+3	; 0x03
     192:	89 17       	cp	r24, r25
     194:	09 f4       	brne	.+2      	; 0x198 <nextLocationFromPoint+0x26>
	{
		location = 0 ;
     196:	1b 82       	std	Y+3, r1	; 0x03
	}

	return location ;
     198:	8b 81       	ldd	r24, Y+3	; 0x03
}
     19a:	0f 90       	pop	r0
     19c:	0f 90       	pop	r0
     19e:	0f 90       	pop	r0
     1a0:	cf 91       	pop	r28
     1a2:	df 91       	pop	r29
     1a4:	08 95       	ret

000001a6 <NormalInsert>:


extern char*	eventTypes[] ;

bool NormalInsert(			eventQueue_t* Q, event_t* event)
{
     1a6:	df 93       	push	r29
     1a8:	cf 93       	push	r28
     1aa:	cd b7       	in	r28, 0x3d	; 61
     1ac:	de b7       	in	r29, 0x3e	; 62
     1ae:	27 97       	sbiw	r28, 0x07	; 7
     1b0:	0f b6       	in	r0, 0x3f	; 63
     1b2:	f8 94       	cli
     1b4:	de bf       	out	0x3e, r29	; 62
     1b6:	0f be       	out	0x3f, r0	; 63
     1b8:	cd bf       	out	0x3d, r28	; 61
     1ba:	9a 83       	std	Y+2, r25	; 0x02
     1bc:	89 83       	std	Y+1, r24	; 0x01
     1be:	7c 83       	std	Y+4, r23	; 0x04
     1c0:	6b 83       	std	Y+3, r22	; 0x03
	if(!isFull(Q))
     1c2:	89 81       	ldd	r24, Y+1	; 0x01
     1c4:	9a 81       	ldd	r25, Y+2	; 0x02
     1c6:	0e 94 9f 00 	call	0x13e	; 0x13e <isFull>
     1ca:	88 23       	and	r24, r24
     1cc:	09 f0       	breq	.+2      	; 0x1d0 <NormalInsert+0x2a>
     1ce:	52 c0       	rjmp	.+164    	; 0x274 <NormalInsert+0xce>
	{
		Q->Size++ ;
     1d0:	e9 81       	ldd	r30, Y+1	; 0x01
     1d2:	fa 81       	ldd	r31, Y+2	; 0x02
     1d4:	83 81       	ldd	r24, Z+3	; 0x03
     1d6:	8f 5f       	subi	r24, 0xFF	; 255
     1d8:	e9 81       	ldd	r30, Y+1	; 0x01
     1da:	fa 81       	ldd	r31, Y+2	; 0x02
     1dc:	83 83       	std	Z+3, r24	; 0x03
		Q->Rear = nextLocationFromPoint(Q, Q->Rear) ;
     1de:	e9 81       	ldd	r30, Y+1	; 0x01
     1e0:	fa 81       	ldd	r31, Y+2	; 0x02
     1e2:	22 81       	ldd	r18, Z+2	; 0x02
     1e4:	89 81       	ldd	r24, Y+1	; 0x01
     1e6:	9a 81       	ldd	r25, Y+2	; 0x02
     1e8:	62 2f       	mov	r22, r18
     1ea:	0e 94 b9 00 	call	0x172	; 0x172 <nextLocationFromPoint>
     1ee:	e9 81       	ldd	r30, Y+1	; 0x01
     1f0:	fa 81       	ldd	r31, Y+2	; 0x02
     1f2:	82 83       	std	Z+2, r24	; 0x02
		Q->Array[Q->Rear] = event ;
     1f4:	e9 81       	ldd	r30, Y+1	; 0x01
     1f6:	fa 81       	ldd	r31, Y+2	; 0x02
     1f8:	24 81       	ldd	r18, Z+4	; 0x04
     1fa:	35 81       	ldd	r19, Z+5	; 0x05
     1fc:	e9 81       	ldd	r30, Y+1	; 0x01
     1fe:	fa 81       	ldd	r31, Y+2	; 0x02
     200:	82 81       	ldd	r24, Z+2	; 0x02
     202:	88 2f       	mov	r24, r24
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	88 0f       	add	r24, r24
     208:	99 1f       	adc	r25, r25
     20a:	f9 01       	movw	r30, r18
     20c:	e8 0f       	add	r30, r24
     20e:	f9 1f       	adc	r31, r25
     210:	8b 81       	ldd	r24, Y+3	; 0x03
     212:	9c 81       	ldd	r25, Y+4	; 0x04
     214:	91 83       	std	Z+1, r25	; 0x01
     216:	80 83       	st	Z, r24

		printf("\t\t\tPosting event type: %s\n", event->eventType <= SUBSTATE_EXIT ? eventTypes[event->eventType] : "<USER_EVENT>") ;
     218:	eb 81       	ldd	r30, Y+3	; 0x03
     21a:	fc 81       	ldd	r31, Y+4	; 0x04
     21c:	80 81       	ld	r24, Z
     21e:	84 30       	cpi	r24, 0x04	; 4
     220:	78 f4       	brcc	.+30     	; 0x240 <NormalInsert+0x9a>
     222:	eb 81       	ldd	r30, Y+3	; 0x03
     224:	fc 81       	ldd	r31, Y+4	; 0x04
     226:	80 81       	ld	r24, Z
     228:	88 2f       	mov	r24, r24
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	88 0f       	add	r24, r24
     22e:	99 1f       	adc	r25, r25
     230:	fc 01       	movw	r30, r24
     232:	ed 52       	subi	r30, 0x2D	; 45
     234:	ff 4f       	sbci	r31, 0xFF	; 255
     236:	80 81       	ld	r24, Z
     238:	91 81       	ldd	r25, Z+1	; 0x01
     23a:	9f 83       	std	Y+7, r25	; 0x07
     23c:	8e 83       	std	Y+6, r24	; 0x06
     23e:	04 c0       	rjmp	.+8      	; 0x248 <NormalInsert+0xa2>
     240:	80 e6       	ldi	r24, 0x60	; 96
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	9f 83       	std	Y+7, r25	; 0x07
     246:	8e 83       	std	Y+6, r24	; 0x06
     248:	00 d0       	rcall	.+0      	; 0x24a <NormalInsert+0xa4>
     24a:	00 d0       	rcall	.+0      	; 0x24c <NormalInsert+0xa6>
     24c:	ed b7       	in	r30, 0x3d	; 61
     24e:	fe b7       	in	r31, 0x3e	; 62
     250:	31 96       	adiw	r30, 0x01	; 1
     252:	8d e6       	ldi	r24, 0x6D	; 109
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	91 83       	std	Z+1, r25	; 0x01
     258:	80 83       	st	Z, r24
     25a:	8e 81       	ldd	r24, Y+6	; 0x06
     25c:	9f 81       	ldd	r25, Y+7	; 0x07
     25e:	93 83       	std	Z+3, r25	; 0x03
     260:	82 83       	std	Z+2, r24	; 0x02
     262:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <printf>
     266:	0f 90       	pop	r0
     268:	0f 90       	pop	r0
     26a:	0f 90       	pop	r0
     26c:	0f 90       	pop	r0

		return true ;
     26e:	91 e0       	ldi	r25, 0x01	; 1
     270:	9d 83       	std	Y+5, r25	; 0x05
     272:	01 c0       	rjmp	.+2      	; 0x276 <NormalInsert+0xd0>
	}
	else
	{
		return false ;
     274:	1d 82       	std	Y+5, r1	; 0x05
     276:	8d 81       	ldd	r24, Y+5	; 0x05
	}
}
     278:	27 96       	adiw	r28, 0x07	; 7
     27a:	0f b6       	in	r0, 0x3f	; 63
     27c:	f8 94       	cli
     27e:	de bf       	out	0x3e, r29	; 62
     280:	0f be       	out	0x3f, r0	; 63
     282:	cd bf       	out	0x3d, r28	; 61
     284:	cf 91       	pop	r28
     286:	df 91       	pop	r29
     288:	08 95       	ret

0000028a <PriorityInsert>:


bool PriorityInsert(		eventQueue_t* Q, event_t* event)
{
     28a:	df 93       	push	r29
     28c:	cf 93       	push	r28
     28e:	00 d0       	rcall	.+0      	; 0x290 <PriorityInsert+0x6>
     290:	00 d0       	rcall	.+0      	; 0x292 <PriorityInsert+0x8>
     292:	0f 92       	push	r0
     294:	cd b7       	in	r28, 0x3d	; 61
     296:	de b7       	in	r29, 0x3e	; 62
     298:	9a 83       	std	Y+2, r25	; 0x02
     29a:	89 83       	std	Y+1, r24	; 0x01
     29c:	7c 83       	std	Y+4, r23	; 0x04
     29e:	6b 83       	std	Y+3, r22	; 0x03
	if(!isFull(Q))
     2a0:	89 81       	ldd	r24, Y+1	; 0x01
     2a2:	9a 81       	ldd	r25, Y+2	; 0x02
     2a4:	0e 94 9f 00 	call	0x13e	; 0x13e <isFull>
     2a8:	88 23       	and	r24, r24
     2aa:	81 f5       	brne	.+96     	; 0x30c <PriorityInsert+0x82>
	{
		Q->Size++ ;
     2ac:	e9 81       	ldd	r30, Y+1	; 0x01
     2ae:	fa 81       	ldd	r31, Y+2	; 0x02
     2b0:	83 81       	ldd	r24, Z+3	; 0x03
     2b2:	8f 5f       	subi	r24, 0xFF	; 255
     2b4:	e9 81       	ldd	r30, Y+1	; 0x01
     2b6:	fa 81       	ldd	r31, Y+2	; 0x02
     2b8:	83 83       	std	Z+3, r24	; 0x03
		if(Q->Front == 0)
     2ba:	e9 81       	ldd	r30, Y+1	; 0x01
     2bc:	fa 81       	ldd	r31, Y+2	; 0x02
     2be:	81 81       	ldd	r24, Z+1	; 0x01
     2c0:	88 23       	and	r24, r24
     2c2:	41 f4       	brne	.+16     	; 0x2d4 <PriorityInsert+0x4a>
		{
			Q->Front = Q->Capacity - 1 ;
     2c4:	e9 81       	ldd	r30, Y+1	; 0x01
     2c6:	fa 81       	ldd	r31, Y+2	; 0x02
     2c8:	80 81       	ld	r24, Z
     2ca:	81 50       	subi	r24, 0x01	; 1
     2cc:	e9 81       	ldd	r30, Y+1	; 0x01
     2ce:	fa 81       	ldd	r31, Y+2	; 0x02
     2d0:	81 83       	std	Z+1, r24	; 0x01
     2d2:	07 c0       	rjmp	.+14     	; 0x2e2 <PriorityInsert+0x58>
		}
		else
		{
			Q->Front-- ;
     2d4:	e9 81       	ldd	r30, Y+1	; 0x01
     2d6:	fa 81       	ldd	r31, Y+2	; 0x02
     2d8:	81 81       	ldd	r24, Z+1	; 0x01
     2da:	81 50       	subi	r24, 0x01	; 1
     2dc:	e9 81       	ldd	r30, Y+1	; 0x01
     2de:	fa 81       	ldd	r31, Y+2	; 0x02
     2e0:	81 83       	std	Z+1, r24	; 0x01
		}

		Q->Array[Q->Front] = event ;
     2e2:	e9 81       	ldd	r30, Y+1	; 0x01
     2e4:	fa 81       	ldd	r31, Y+2	; 0x02
     2e6:	24 81       	ldd	r18, Z+4	; 0x04
     2e8:	35 81       	ldd	r19, Z+5	; 0x05
     2ea:	e9 81       	ldd	r30, Y+1	; 0x01
     2ec:	fa 81       	ldd	r31, Y+2	; 0x02
     2ee:	81 81       	ldd	r24, Z+1	; 0x01
     2f0:	88 2f       	mov	r24, r24
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	88 0f       	add	r24, r24
     2f6:	99 1f       	adc	r25, r25
     2f8:	f9 01       	movw	r30, r18
     2fa:	e8 0f       	add	r30, r24
     2fc:	f9 1f       	adc	r31, r25
     2fe:	8b 81       	ldd	r24, Y+3	; 0x03
     300:	9c 81       	ldd	r25, Y+4	; 0x04
     302:	91 83       	std	Z+1, r25	; 0x01
     304:	80 83       	st	Z, r24

		return true ;
     306:	81 e0       	ldi	r24, 0x01	; 1
     308:	8d 83       	std	Y+5, r24	; 0x05
     30a:	01 c0       	rjmp	.+2      	; 0x30e <PriorityInsert+0x84>
	}
	else
	{
		return false ;
     30c:	1d 82       	std	Y+5, r1	; 0x05
     30e:	8d 81       	ldd	r24, Y+5	; 0x05
	}
}
     310:	0f 90       	pop	r0
     312:	0f 90       	pop	r0
     314:	0f 90       	pop	r0
     316:	0f 90       	pop	r0
     318:	0f 90       	pop	r0
     31a:	cf 91       	pop	r28
     31c:	df 91       	pop	r29
     31e:	08 95       	ret

00000320 <Remove>:


event_t* Remove(			eventQueue_t* Q)
{
     320:	df 93       	push	r29
     322:	cf 93       	push	r28
     324:	00 d0       	rcall	.+0      	; 0x326 <Remove+0x6>
     326:	00 d0       	rcall	.+0      	; 0x328 <Remove+0x8>
     328:	00 d0       	rcall	.+0      	; 0x32a <Remove+0xa>
     32a:	cd b7       	in	r28, 0x3d	; 61
     32c:	de b7       	in	r29, 0x3e	; 62
     32e:	9c 83       	std	Y+4, r25	; 0x04
     330:	8b 83       	std	Y+3, r24	; 0x03
	if(!isEmpty(Q))
     332:	8b 81       	ldd	r24, Y+3	; 0x03
     334:	9c 81       	ldd	r25, Y+4	; 0x04
     336:	0e 94 88 00 	call	0x110	; 0x110 <isEmpty>
     33a:	88 23       	and	r24, r24
     33c:	49 f5       	brne	.+82     	; 0x390 <Remove+0x70>
	{
		event_t* eventReceived = Q->Array[Q->Front] ;
     33e:	eb 81       	ldd	r30, Y+3	; 0x03
     340:	fc 81       	ldd	r31, Y+4	; 0x04
     342:	24 81       	ldd	r18, Z+4	; 0x04
     344:	35 81       	ldd	r19, Z+5	; 0x05
     346:	eb 81       	ldd	r30, Y+3	; 0x03
     348:	fc 81       	ldd	r31, Y+4	; 0x04
     34a:	81 81       	ldd	r24, Z+1	; 0x01
     34c:	88 2f       	mov	r24, r24
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	88 0f       	add	r24, r24
     352:	99 1f       	adc	r25, r25
     354:	f9 01       	movw	r30, r18
     356:	e8 0f       	add	r30, r24
     358:	f9 1f       	adc	r31, r25
     35a:	80 81       	ld	r24, Z
     35c:	91 81       	ldd	r25, Z+1	; 0x01
     35e:	9a 83       	std	Y+2, r25	; 0x02
     360:	89 83       	std	Y+1, r24	; 0x01

		Q->Size-- ;
     362:	eb 81       	ldd	r30, Y+3	; 0x03
     364:	fc 81       	ldd	r31, Y+4	; 0x04
     366:	83 81       	ldd	r24, Z+3	; 0x03
     368:	81 50       	subi	r24, 0x01	; 1
     36a:	eb 81       	ldd	r30, Y+3	; 0x03
     36c:	fc 81       	ldd	r31, Y+4	; 0x04
     36e:	83 83       	std	Z+3, r24	; 0x03
		Q->Front = nextLocationFromPoint(Q, Q->Front) ;
     370:	eb 81       	ldd	r30, Y+3	; 0x03
     372:	fc 81       	ldd	r31, Y+4	; 0x04
     374:	21 81       	ldd	r18, Z+1	; 0x01
     376:	8b 81       	ldd	r24, Y+3	; 0x03
     378:	9c 81       	ldd	r25, Y+4	; 0x04
     37a:	62 2f       	mov	r22, r18
     37c:	0e 94 b9 00 	call	0x172	; 0x172 <nextLocationFromPoint>
     380:	eb 81       	ldd	r30, Y+3	; 0x03
     382:	fc 81       	ldd	r31, Y+4	; 0x04
     384:	81 83       	std	Z+1, r24	; 0x01

		return eventReceived ;
     386:	89 81       	ldd	r24, Y+1	; 0x01
     388:	9a 81       	ldd	r25, Y+2	; 0x02
     38a:	9e 83       	std	Y+6, r25	; 0x06
     38c:	8d 83       	std	Y+5, r24	; 0x05
     38e:	02 c0       	rjmp	.+4      	; 0x394 <Remove+0x74>
	}
	else
	{
		return (event_t*)0 ;
     390:	1e 82       	std	Y+6, r1	; 0x06
     392:	1d 82       	std	Y+5, r1	; 0x05
     394:	8d 81       	ldd	r24, Y+5	; 0x05
     396:	9e 81       	ldd	r25, Y+6	; 0x06
	}
}
     398:	26 96       	adiw	r28, 0x06	; 6
     39a:	0f b6       	in	r0, 0x3f	; 63
     39c:	f8 94       	cli
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	0f be       	out	0x3f, r0	; 63
     3a2:	cd bf       	out	0x3d, r28	; 61
     3a4:	cf 91       	pop	r28
     3a6:	df 91       	pop	r29
     3a8:	08 95       	ret

000003aa <allocateStateMachineMemory>:

void iterateStateMachine(	stateMachine_t* sm) ;


stateMachine_t* allocateStateMachineMemory(		uint16_t sizeInBytes)
{
     3aa:	df 93       	push	r29
     3ac:	cf 93       	push	r28
     3ae:	00 d0       	rcall	.+0      	; 0x3b0 <allocateStateMachineMemory+0x6>
     3b0:	00 d0       	rcall	.+0      	; 0x3b2 <allocateStateMachineMemory+0x8>
     3b2:	cd b7       	in	r28, 0x3d	; 61
     3b4:	de b7       	in	r29, 0x3e	; 62
     3b6:	9c 83       	std	Y+4, r25	; 0x04
     3b8:	8b 83       	std	Y+3, r24	; 0x03
	stateMachine_t*	instance = malloc(sizeInBytes) ;
     3ba:	8b 81       	ldd	r24, Y+3	; 0x03
     3bc:	9c 81       	ldd	r25, Y+4	; 0x04
     3be:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <malloc>
     3c2:	9a 83       	std	Y+2, r25	; 0x02
     3c4:	89 83       	std	Y+1, r24	; 0x01

	if(instance)
     3c6:	89 81       	ldd	r24, Y+1	; 0x01
     3c8:	9a 81       	ldd	r25, Y+2	; 0x02
     3ca:	00 97       	sbiw	r24, 0x00	; 0
     3cc:	49 f0       	breq	.+18     	; 0x3e0 <allocateStateMachineMemory+0x36>
	{
		memset((char*)instance, 0, sizeInBytes) ;
     3ce:	89 81       	ldd	r24, Y+1	; 0x01
     3d0:	9a 81       	ldd	r25, Y+2	; 0x02
     3d2:	2b 81       	ldd	r18, Y+3	; 0x03
     3d4:	3c 81       	ldd	r19, Y+4	; 0x04
     3d6:	60 e0       	ldi	r22, 0x00	; 0
     3d8:	70 e0       	ldi	r23, 0x00	; 0
     3da:	a9 01       	movw	r20, r18
     3dc:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <memset>
	}

	return instance ;
     3e0:	89 81       	ldd	r24, Y+1	; 0x01
     3e2:	9a 81       	ldd	r25, Y+2	; 0x02
}
     3e4:	0f 90       	pop	r0
     3e6:	0f 90       	pop	r0
     3e8:	0f 90       	pop	r0
     3ea:	0f 90       	pop	r0
     3ec:	cf 91       	pop	r28
     3ee:	df 91       	pop	r29
     3f0:	08 95       	ret

000003f2 <deallocateStateMachineMemory>:


void deallocateStateMachineMemory(				stateMachine_t* instance)
{
     3f2:	df 93       	push	r29
     3f4:	cf 93       	push	r28
     3f6:	00 d0       	rcall	.+0      	; 0x3f8 <deallocateStateMachineMemory+0x6>
     3f8:	cd b7       	in	r28, 0x3d	; 61
     3fa:	de b7       	in	r29, 0x3e	; 62
     3fc:	9a 83       	std	Y+2, r25	; 0x02
     3fe:	89 83       	std	Y+1, r24	; 0x01
	if(instance != 0)
     400:	89 81       	ldd	r24, Y+1	; 0x01
     402:	9a 81       	ldd	r25, Y+2	; 0x02
     404:	00 97       	sbiw	r24, 0x00	; 0
     406:	21 f0       	breq	.+8      	; 0x410 <deallocateStateMachineMemory+0x1e>
	{
		free((char*)instance) ;
     408:	89 81       	ldd	r24, Y+1	; 0x01
     40a:	9a 81       	ldd	r25, Y+2	; 0x02
     40c:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <free>
	}
}
     410:	0f 90       	pop	r0
     412:	0f 90       	pop	r0
     414:	cf 91       	pop	r28
     416:	df 91       	pop	r29
     418:	08 95       	ret

0000041a <registerStateMachine>:


bool registerStateMachine(			stateMachine_t* sm)
{
     41a:	df 93       	push	r29
     41c:	cf 93       	push	r28
     41e:	00 d0       	rcall	.+0      	; 0x420 <registerStateMachine+0x6>
     420:	00 d0       	rcall	.+0      	; 0x422 <registerStateMachine+0x8>
     422:	cd b7       	in	r28, 0x3d	; 61
     424:	de b7       	in	r29, 0x3e	; 62
     426:	9b 83       	std	Y+3, r25	; 0x03
     428:	8a 83       	std	Y+2, r24	; 0x02
	if(sm)
     42a:	8a 81       	ldd	r24, Y+2	; 0x02
     42c:	9b 81       	ldd	r25, Y+3	; 0x03
     42e:	00 97       	sbiw	r24, 0x00	; 0
     430:	19 f1       	breq	.+70     	; 0x478 <__stack+0x19>
	{
		uint8_t	statetMachineIndex ;

		for( statetMachineIndex = 0 ; statetMachineIndex < configMAXIMUM_NUMBER_OF_STATE_MACHINES ; statetMachineIndex++ )
     432:	19 82       	std	Y+1, r1	; 0x01
     434:	1e c0       	rjmp	.+60     	; 0x472 <__stack+0x13>
		{
			if(stateMachines[statetMachineIndex] == NULL)
     436:	89 81       	ldd	r24, Y+1	; 0x01
     438:	88 2f       	mov	r24, r24
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	88 0f       	add	r24, r24
     43e:	99 1f       	adc	r25, r25
     440:	fc 01       	movw	r30, r24
     442:	e6 5e       	subi	r30, 0xE6	; 230
     444:	f9 4f       	sbci	r31, 0xF9	; 249
     446:	80 81       	ld	r24, Z
     448:	91 81       	ldd	r25, Z+1	; 0x01
     44a:	00 97       	sbiw	r24, 0x00	; 0
     44c:	79 f4       	brne	.+30     	; 0x46c <__stack+0xd>
			{
				stateMachines[statetMachineIndex] = sm ;
     44e:	89 81       	ldd	r24, Y+1	; 0x01
     450:	88 2f       	mov	r24, r24
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	88 0f       	add	r24, r24
     456:	99 1f       	adc	r25, r25
     458:	fc 01       	movw	r30, r24
     45a:	e6 5e       	subi	r30, 0xE6	; 230
     45c:	f9 4f       	sbci	r31, 0xF9	; 249
     45e:	8a 81       	ldd	r24, Y+2	; 0x02
     460:	9b 81       	ldd	r25, Y+3	; 0x03
     462:	91 83       	std	Z+1, r25	; 0x01
     464:	80 83       	st	Z, r24

				return true ;
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	8c 83       	std	Y+4, r24	; 0x04
     46a:	07 c0       	rjmp	.+14     	; 0x47a <__stack+0x1b>
{
	if(sm)
	{
		uint8_t	statetMachineIndex ;

		for( statetMachineIndex = 0 ; statetMachineIndex < configMAXIMUM_NUMBER_OF_STATE_MACHINES ; statetMachineIndex++ )
     46c:	89 81       	ldd	r24, Y+1	; 0x01
     46e:	8f 5f       	subi	r24, 0xFF	; 255
     470:	89 83       	std	Y+1, r24	; 0x01
     472:	89 81       	ldd	r24, Y+1	; 0x01
     474:	82 33       	cpi	r24, 0x32	; 50
     476:	f8 f2       	brcs	.-66     	; 0x436 <registerStateMachine+0x1c>
				return true ;
			}
		}
	}

	return false ;
     478:	1c 82       	std	Y+4, r1	; 0x04
     47a:	8c 81       	ldd	r24, Y+4	; 0x04
}
     47c:	0f 90       	pop	r0
     47e:	0f 90       	pop	r0
     480:	0f 90       	pop	r0
     482:	0f 90       	pop	r0
     484:	cf 91       	pop	r28
     486:	df 91       	pop	r29
     488:	08 95       	ret

0000048a <unregisterStateMachine>:

bool unregisterStateMachine(		stateMachine_t* sm)
{
     48a:	df 93       	push	r29
     48c:	cf 93       	push	r28
     48e:	00 d0       	rcall	.+0      	; 0x490 <unregisterStateMachine+0x6>
     490:	00 d0       	rcall	.+0      	; 0x492 <unregisterStateMachine+0x8>
     492:	cd b7       	in	r28, 0x3d	; 61
     494:	de b7       	in	r29, 0x3e	; 62
     496:	9b 83       	std	Y+3, r25	; 0x03
     498:	8a 83       	std	Y+2, r24	; 0x02
	if(sm)
     49a:	8a 81       	ldd	r24, Y+2	; 0x02
     49c:	9b 81       	ldd	r25, Y+3	; 0x03
     49e:	00 97       	sbiw	r24, 0x00	; 0
     4a0:	21 f1       	breq	.+72     	; 0x4ea <unregisterStateMachine+0x60>
	{
		uint8_t	statetMachineIndex ;

		for( statetMachineIndex = 0 ; statetMachineIndex < configMAXIMUM_NUMBER_OF_STATE_MACHINES ; statetMachineIndex++ )
     4a2:	19 82       	std	Y+1, r1	; 0x01
     4a4:	1f c0       	rjmp	.+62     	; 0x4e4 <unregisterStateMachine+0x5a>
		{
			if(stateMachines[statetMachineIndex] == sm)
     4a6:	89 81       	ldd	r24, Y+1	; 0x01
     4a8:	88 2f       	mov	r24, r24
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	88 0f       	add	r24, r24
     4ae:	99 1f       	adc	r25, r25
     4b0:	fc 01       	movw	r30, r24
     4b2:	e6 5e       	subi	r30, 0xE6	; 230
     4b4:	f9 4f       	sbci	r31, 0xF9	; 249
     4b6:	20 81       	ld	r18, Z
     4b8:	31 81       	ldd	r19, Z+1	; 0x01
     4ba:	8a 81       	ldd	r24, Y+2	; 0x02
     4bc:	9b 81       	ldd	r25, Y+3	; 0x03
     4be:	28 17       	cp	r18, r24
     4c0:	39 07       	cpc	r19, r25
     4c2:	69 f4       	brne	.+26     	; 0x4de <unregisterStateMachine+0x54>
			{
				stateMachines[statetMachineIndex] = NULL ;
     4c4:	89 81       	ldd	r24, Y+1	; 0x01
     4c6:	88 2f       	mov	r24, r24
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	88 0f       	add	r24, r24
     4cc:	99 1f       	adc	r25, r25
     4ce:	fc 01       	movw	r30, r24
     4d0:	e6 5e       	subi	r30, 0xE6	; 230
     4d2:	f9 4f       	sbci	r31, 0xF9	; 249
     4d4:	11 82       	std	Z+1, r1	; 0x01
     4d6:	10 82       	st	Z, r1

				return true ;
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	8c 83       	std	Y+4, r24	; 0x04
     4dc:	07 c0       	rjmp	.+14     	; 0x4ec <unregisterStateMachine+0x62>
{
	if(sm)
	{
		uint8_t	statetMachineIndex ;

		for( statetMachineIndex = 0 ; statetMachineIndex < configMAXIMUM_NUMBER_OF_STATE_MACHINES ; statetMachineIndex++ )
     4de:	89 81       	ldd	r24, Y+1	; 0x01
     4e0:	8f 5f       	subi	r24, 0xFF	; 255
     4e2:	89 83       	std	Y+1, r24	; 0x01
     4e4:	89 81       	ldd	r24, Y+1	; 0x01
     4e6:	82 33       	cpi	r24, 0x32	; 50
     4e8:	f0 f2       	brcs	.-68     	; 0x4a6 <unregisterStateMachine+0x1c>
				return true ;
			}
		}
	}

	return false ;
     4ea:	1c 82       	std	Y+4, r1	; 0x04
     4ec:	8c 81       	ldd	r24, Y+4	; 0x04
}
     4ee:	0f 90       	pop	r0
     4f0:	0f 90       	pop	r0
     4f2:	0f 90       	pop	r0
     4f4:	0f 90       	pop	r0
     4f6:	cf 91       	pop	r28
     4f8:	df 91       	pop	r29
     4fa:	08 95       	ret

000004fc <iterateAllStateMachines>:


void iterateAllStateMachines(	void)
{
     4fc:	df 93       	push	r29
     4fe:	cf 93       	push	r28
     500:	0f 92       	push	r0
     502:	cd b7       	in	r28, 0x3d	; 61
     504:	de b7       	in	r29, 0x3e	; 62
	uint8_t	statetMachineIndex ;

	for( statetMachineIndex = 0 ; statetMachineIndex < configMAXIMUM_NUMBER_OF_STATE_MACHINES ; statetMachineIndex++ )
     506:	19 82       	std	Y+1, r1	; 0x01
     508:	1b c0       	rjmp	.+54     	; 0x540 <iterateAllStateMachines+0x44>
	{
		if(stateMachines[statetMachineIndex] != NULL)
     50a:	89 81       	ldd	r24, Y+1	; 0x01
     50c:	88 2f       	mov	r24, r24
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	88 0f       	add	r24, r24
     512:	99 1f       	adc	r25, r25
     514:	fc 01       	movw	r30, r24
     516:	e6 5e       	subi	r30, 0xE6	; 230
     518:	f9 4f       	sbci	r31, 0xF9	; 249
     51a:	80 81       	ld	r24, Z
     51c:	91 81       	ldd	r25, Z+1	; 0x01
     51e:	00 97       	sbiw	r24, 0x00	; 0
     520:	61 f0       	breq	.+24     	; 0x53a <iterateAllStateMachines+0x3e>
		{
			iterateStateMachine(stateMachines[statetMachineIndex]) ;
     522:	89 81       	ldd	r24, Y+1	; 0x01
     524:	88 2f       	mov	r24, r24
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	88 0f       	add	r24, r24
     52a:	99 1f       	adc	r25, r25
     52c:	fc 01       	movw	r30, r24
     52e:	e6 5e       	subi	r30, 0xE6	; 230
     530:	f9 4f       	sbci	r31, 0xF9	; 249
     532:	80 81       	ld	r24, Z
     534:	91 81       	ldd	r25, Z+1	; 0x01
     536:	0e 94 41 03 	call	0x682	; 0x682 <iterateStateMachine>

void iterateAllStateMachines(	void)
{
	uint8_t	statetMachineIndex ;

	for( statetMachineIndex = 0 ; statetMachineIndex < configMAXIMUM_NUMBER_OF_STATE_MACHINES ; statetMachineIndex++ )
     53a:	89 81       	ldd	r24, Y+1	; 0x01
     53c:	8f 5f       	subi	r24, 0xFF	; 255
     53e:	89 83       	std	Y+1, r24	; 0x01
     540:	89 81       	ldd	r24, Y+1	; 0x01
     542:	82 33       	cpi	r24, 0x32	; 50
     544:	10 f3       	brcs	.-60     	; 0x50a <iterateAllStateMachines+0xe>
		if(stateMachines[statetMachineIndex] != NULL)
		{
			iterateStateMachine(stateMachines[statetMachineIndex]) ;
		}
	}
}
     546:	0f 90       	pop	r0
     548:	cf 91       	pop	r28
     54a:	df 91       	pop	r29
     54c:	08 95       	ret

0000054e <callStateHandler>:
char*	eventTypes[]	= { "SUBSTATE_GET_INFO", "SUBSTATE_ENTRY", "SUBSTATE_INITIAL_TRANSITION", "SUBSTATE_EXIT" } ;
char*	responseTypes[]	= { "IGNORED", "HANDLED", "TRANSITION" } ;


stateHandlerResponse_t callStateHandler(stateMachine_t* sm, state_t* state, event_t* event)
{
     54e:	df 93       	push	r29
     550:	cf 93       	push	r28
     552:	cd b7       	in	r28, 0x3d	; 61
     554:	de b7       	in	r29, 0x3e	; 62
     556:	2b 97       	sbiw	r28, 0x0b	; 11
     558:	0f b6       	in	r0, 0x3f	; 63
     55a:	f8 94       	cli
     55c:	de bf       	out	0x3e, r29	; 62
     55e:	0f be       	out	0x3f, r0	; 63
     560:	cd bf       	out	0x3d, r28	; 61
     562:	9b 83       	std	Y+3, r25	; 0x03
     564:	8a 83       	std	Y+2, r24	; 0x02
     566:	7d 83       	std	Y+5, r23	; 0x05
     568:	6c 83       	std	Y+4, r22	; 0x04
     56a:	5f 83       	std	Y+7, r21	; 0x07
     56c:	4e 83       	std	Y+6, r20	; 0x06
	stateHandlerResponse_t	response ;

	printf("\t\t\tCalling state: %s, event: %s, ", state->stateName, event->eventType <= SUBSTATE_EXIT ? eventTypes[event->eventType] : "<USER_EVENT>") ;
     56e:	ec 81       	ldd	r30, Y+4	; 0x04
     570:	fd 81       	ldd	r31, Y+5	; 0x05
     572:	85 81       	ldd	r24, Z+5	; 0x05
     574:	96 81       	ldd	r25, Z+6	; 0x06
     576:	9b 87       	std	Y+11, r25	; 0x0b
     578:	8a 87       	std	Y+10, r24	; 0x0a
     57a:	ee 81       	ldd	r30, Y+6	; 0x06
     57c:	ff 81       	ldd	r31, Y+7	; 0x07
     57e:	80 81       	ld	r24, Z
     580:	84 30       	cpi	r24, 0x04	; 4
     582:	78 f4       	brcc	.+30     	; 0x5a2 <callStateHandler+0x54>
     584:	ee 81       	ldd	r30, Y+6	; 0x06
     586:	ff 81       	ldd	r31, Y+7	; 0x07
     588:	80 81       	ld	r24, Z
     58a:	88 2f       	mov	r24, r24
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	88 0f       	add	r24, r24
     590:	99 1f       	adc	r25, r25
     592:	fc 01       	movw	r30, r24
     594:	ed 52       	subi	r30, 0x2D	; 45
     596:	ff 4f       	sbci	r31, 0xFF	; 255
     598:	80 81       	ld	r24, Z
     59a:	91 81       	ldd	r25, Z+1	; 0x01
     59c:	99 87       	std	Y+9, r25	; 0x09
     59e:	88 87       	std	Y+8, r24	; 0x08
     5a0:	04 c0       	rjmp	.+8      	; 0x5aa <callStateHandler+0x5c>
     5a2:	8c ef       	ldi	r24, 0xFC	; 252
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	99 87       	std	Y+9, r25	; 0x09
     5a8:	88 87       	std	Y+8, r24	; 0x08
     5aa:	00 d0       	rcall	.+0      	; 0x5ac <callStateHandler+0x5e>
     5ac:	00 d0       	rcall	.+0      	; 0x5ae <callStateHandler+0x60>
     5ae:	00 d0       	rcall	.+0      	; 0x5b0 <callStateHandler+0x62>
     5b0:	ed b7       	in	r30, 0x3d	; 61
     5b2:	fe b7       	in	r31, 0x3e	; 62
     5b4:	31 96       	adiw	r30, 0x01	; 1
     5b6:	89 e0       	ldi	r24, 0x09	; 9
     5b8:	91 e0       	ldi	r25, 0x01	; 1
     5ba:	91 83       	std	Z+1, r25	; 0x01
     5bc:	80 83       	st	Z, r24
     5be:	8a 85       	ldd	r24, Y+10	; 0x0a
     5c0:	9b 85       	ldd	r25, Y+11	; 0x0b
     5c2:	93 83       	std	Z+3, r25	; 0x03
     5c4:	82 83       	std	Z+2, r24	; 0x02
     5c6:	88 85       	ldd	r24, Y+8	; 0x08
     5c8:	99 85       	ldd	r25, Y+9	; 0x09
     5ca:	95 83       	std	Z+5, r25	; 0x05
     5cc:	84 83       	std	Z+4, r24	; 0x04
     5ce:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <printf>
     5d2:	8d b7       	in	r24, 0x3d	; 61
     5d4:	9e b7       	in	r25, 0x3e	; 62
     5d6:	06 96       	adiw	r24, 0x06	; 6
     5d8:	0f b6       	in	r0, 0x3f	; 63
     5da:	f8 94       	cli
     5dc:	9e bf       	out	0x3e, r25	; 62
     5de:	0f be       	out	0x3f, r0	; 63
     5e0:	8d bf       	out	0x3d, r24	; 61

	response = ((callStateHandler_t)(state->handler))(sm, event) ;
     5e2:	ec 81       	ldd	r30, Y+4	; 0x04
     5e4:	fd 81       	ldd	r31, Y+5	; 0x05
     5e6:	83 81       	ldd	r24, Z+3	; 0x03
     5e8:	94 81       	ldd	r25, Z+4	; 0x04
     5ea:	fc 01       	movw	r30, r24
     5ec:	8a 81       	ldd	r24, Y+2	; 0x02
     5ee:	9b 81       	ldd	r25, Y+3	; 0x03
     5f0:	2e 81       	ldd	r18, Y+6	; 0x06
     5f2:	3f 81       	ldd	r19, Y+7	; 0x07
     5f4:	b9 01       	movw	r22, r18
     5f6:	09 95       	icall
     5f8:	89 83       	std	Y+1, r24	; 0x01

	printf("response: %s ", responseTypes[response]) ;
     5fa:	89 81       	ldd	r24, Y+1	; 0x01
     5fc:	88 2f       	mov	r24, r24
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	88 0f       	add	r24, r24
     602:	99 1f       	adc	r25, r25
     604:	fc 01       	movw	r30, r24
     606:	ea 50       	subi	r30, 0x0A	; 10
     608:	ff 4f       	sbci	r31, 0xFF	; 255
     60a:	20 81       	ld	r18, Z
     60c:	31 81       	ldd	r19, Z+1	; 0x01
     60e:	00 d0       	rcall	.+0      	; 0x610 <callStateHandler+0xc2>
     610:	00 d0       	rcall	.+0      	; 0x612 <callStateHandler+0xc4>
     612:	ed b7       	in	r30, 0x3d	; 61
     614:	fe b7       	in	r31, 0x3e	; 62
     616:	31 96       	adiw	r30, 0x01	; 1
     618:	8b e2       	ldi	r24, 0x2B	; 43
     61a:	91 e0       	ldi	r25, 0x01	; 1
     61c:	91 83       	std	Z+1, r25	; 0x01
     61e:	80 83       	st	Z, r24
     620:	33 83       	std	Z+3, r19	; 0x03
     622:	22 83       	std	Z+2, r18	; 0x02
     624:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <printf>
     628:	0f 90       	pop	r0
     62a:	0f 90       	pop	r0
     62c:	0f 90       	pop	r0
     62e:	0f 90       	pop	r0

	if(response == TRANSITION)
     630:	89 81       	ldd	r24, Y+1	; 0x01
     632:	82 30       	cpi	r24, 0x02	; 2
     634:	c1 f4       	brne	.+48     	; 0x666 <callStateHandler+0x118>
	{
		printf("to %s ", sm->nextState->stateName) ;
     636:	ea 81       	ldd	r30, Y+2	; 0x02
     638:	fb 81       	ldd	r31, Y+3	; 0x03
     63a:	07 80       	ldd	r0, Z+7	; 0x07
     63c:	f0 85       	ldd	r31, Z+8	; 0x08
     63e:	e0 2d       	mov	r30, r0
     640:	25 81       	ldd	r18, Z+5	; 0x05
     642:	36 81       	ldd	r19, Z+6	; 0x06
     644:	00 d0       	rcall	.+0      	; 0x646 <callStateHandler+0xf8>
     646:	00 d0       	rcall	.+0      	; 0x648 <callStateHandler+0xfa>
     648:	ed b7       	in	r30, 0x3d	; 61
     64a:	fe b7       	in	r31, 0x3e	; 62
     64c:	31 96       	adiw	r30, 0x01	; 1
     64e:	89 e3       	ldi	r24, 0x39	; 57
     650:	91 e0       	ldi	r25, 0x01	; 1
     652:	91 83       	std	Z+1, r25	; 0x01
     654:	80 83       	st	Z, r24
     656:	33 83       	std	Z+3, r19	; 0x03
     658:	22 83       	std	Z+2, r18	; 0x02
     65a:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <printf>
     65e:	0f 90       	pop	r0
     660:	0f 90       	pop	r0
     662:	0f 90       	pop	r0
     664:	0f 90       	pop	r0
	}

	printf("\n") ;
     666:	8a e0       	ldi	r24, 0x0A	; 10
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <putchar>

	return response ;
     66e:	89 81       	ldd	r24, Y+1	; 0x01
}
     670:	2b 96       	adiw	r28, 0x0b	; 11
     672:	0f b6       	in	r0, 0x3f	; 63
     674:	f8 94       	cli
     676:	de bf       	out	0x3e, r29	; 62
     678:	0f be       	out	0x3f, r0	; 63
     67a:	cd bf       	out	0x3d, r28	; 61
     67c:	cf 91       	pop	r28
     67e:	df 91       	pop	r29
     680:	08 95       	ret

00000682 <iterateStateMachine>:


void iterateStateMachine(	stateMachine_t* sm)
{
     682:	df 93       	push	r29
     684:	cf 93       	push	r28
     686:	cd b7       	in	r28, 0x3d	; 61
     688:	de b7       	in	r29, 0x3e	; 62
     68a:	ca 55       	subi	r28, 0x5A	; 90
     68c:	d0 40       	sbci	r29, 0x00	; 0
     68e:	0f b6       	in	r0, 0x3f	; 63
     690:	f8 94       	cli
     692:	de bf       	out	0x3e, r29	; 62
     694:	0f be       	out	0x3f, r0	; 63
     696:	cd bf       	out	0x3d, r28	; 61
     698:	fe 01       	movw	r30, r28
     69a:	ee 5a       	subi	r30, 0xAE	; 174
     69c:	ff 4f       	sbci	r31, 0xFF	; 255
     69e:	91 83       	std	Z+1, r25	; 0x01
     6a0:	80 83       	st	Z, r24
	static event_t	initialTransitionEvent	= { SUBSTATE_INITIAL_TRANSITION } ;
	static event_t	enterEvent				= { SUBSTATE_ENTRY } ;
	static event_t	exitEvent				= { SUBSTATE_EXIT } ;
	static int iterationMax = 10 ;

	printf("\titerating %s\n", sm->stateMachineName) ;
     6a2:	fe 01       	movw	r30, r28
     6a4:	ee 5a       	subi	r30, 0xAE	; 174
     6a6:	ff 4f       	sbci	r31, 0xFF	; 255
     6a8:	01 90       	ld	r0, Z+
     6aa:	f0 81       	ld	r31, Z
     6ac:	e0 2d       	mov	r30, r0
     6ae:	23 81       	ldd	r18, Z+3	; 0x03
     6b0:	34 81       	ldd	r19, Z+4	; 0x04
     6b2:	00 d0       	rcall	.+0      	; 0x6b4 <iterateStateMachine+0x32>
     6b4:	00 d0       	rcall	.+0      	; 0x6b6 <iterateStateMachine+0x34>
     6b6:	ed b7       	in	r30, 0x3d	; 61
     6b8:	fe b7       	in	r31, 0x3e	; 62
     6ba:	31 96       	adiw	r30, 0x01	; 1
     6bc:	85 e4       	ldi	r24, 0x45	; 69
     6be:	91 e0       	ldi	r25, 0x01	; 1
     6c0:	91 83       	std	Z+1, r25	; 0x01
     6c2:	80 83       	st	Z, r24
     6c4:	33 83       	std	Z+3, r19	; 0x03
     6c6:	22 83       	std	Z+2, r18	; 0x02
     6c8:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <printf>
     6cc:	0f 90       	pop	r0
     6ce:	0f 90       	pop	r0
     6d0:	0f 90       	pop	r0
     6d2:	0f 90       	pop	r0

	// First of all, is the machine initialized? If not, take care of that.

	if(!sm->stateMachineInitialized)
     6d4:	fe 01       	movw	r30, r28
     6d6:	ee 5a       	subi	r30, 0xAE	; 174
     6d8:	ff 4f       	sbci	r31, 0xFF	; 255
     6da:	01 90       	ld	r0, Z+
     6dc:	f0 81       	ld	r31, Z
     6de:	e0 2d       	mov	r30, r0
     6e0:	87 85       	ldd	r24, Z+15	; 0x0f
     6e2:	88 23       	and	r24, r24
     6e4:	09 f0       	breq	.+2      	; 0x6e8 <iterateStateMachine+0x66>
     6e6:	25 c4       	rjmp	.+2122   	; 0xf32 <iterateStateMachine+0x8b0>
	{
		printf("\t\tinitializing...\n") ;
     6e8:	84 e5       	ldi	r24, 0x54	; 84
     6ea:	91 e0       	ldi	r25, 0x01	; 1
     6ec:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <puts>

		NormalInsert(&sm->eventQueue, &enterEvent) ;
     6f0:	fe 01       	movw	r30, r28
     6f2:	ee 5a       	subi	r30, 0xAE	; 174
     6f4:	ff 4f       	sbci	r31, 0xFF	; 255
     6f6:	80 81       	ld	r24, Z
     6f8:	91 81       	ldd	r25, Z+1	; 0x01
     6fa:	09 96       	adiw	r24, 0x09	; 9
     6fc:	23 e4       	ldi	r18, 0x43	; 67
     6fe:	31 e0       	ldi	r19, 0x01	; 1
     700:	b9 01       	movw	r22, r18
     702:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <NormalInsert>
		NormalInsert(&sm->eventQueue, &initialTransitionEvent) ;
     706:	fe 01       	movw	r30, r28
     708:	ee 5a       	subi	r30, 0xAE	; 174
     70a:	ff 4f       	sbci	r31, 0xFF	; 255
     70c:	80 81       	ld	r24, Z
     70e:	91 81       	ldd	r25, Z+1	; 0x01
     710:	09 96       	adiw	r24, 0x09	; 9
     712:	24 e4       	ldi	r18, 0x44	; 68
     714:	31 e0       	ldi	r19, 0x01	; 1
     716:	b9 01       	movw	r22, r18
     718:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <NormalInsert>

		sm->currentState			= (state_t*)sm->topState ;
     71c:	fe 01       	movw	r30, r28
     71e:	ee 5a       	subi	r30, 0xAE	; 174
     720:	ff 4f       	sbci	r31, 0xFF	; 255
     722:	01 90       	ld	r0, Z+
     724:	f0 81       	ld	r31, Z
     726:	e0 2d       	mov	r30, r0
     728:	80 81       	ld	r24, Z
     72a:	91 81       	ldd	r25, Z+1	; 0x01
     72c:	fe 01       	movw	r30, r28
     72e:	ee 5a       	subi	r30, 0xAE	; 174
     730:	ff 4f       	sbci	r31, 0xFF	; 255
     732:	01 90       	ld	r0, Z+
     734:	f0 81       	ld	r31, Z
     736:	e0 2d       	mov	r30, r0
     738:	96 83       	std	Z+6, r25	; 0x06
     73a:	85 83       	std	Z+5, r24	; 0x05
		sm->stateMachineInitialized	= true ;
     73c:	fe 01       	movw	r30, r28
     73e:	ee 5a       	subi	r30, 0xAE	; 174
     740:	ff 4f       	sbci	r31, 0xFF	; 255
     742:	01 90       	ld	r0, Z+
     744:	f0 81       	ld	r31, Z
     746:	e0 2d       	mov	r30, r0
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	87 87       	std	Z+15, r24	; 0x0f
     74c:	f2 c3       	rjmp	.+2020   	; 0xf32 <iterateStateMachine+0x8b0>

	// Any pending events?

	while(!isEmpty(&sm->eventQueue))
	{
		event_t*				eventToProcess		= Remove(&sm->eventQueue) ;
     74e:	fe 01       	movw	r30, r28
     750:	ee 5a       	subi	r30, 0xAE	; 174
     752:	ff 4f       	sbci	r31, 0xFF	; 255
     754:	80 81       	ld	r24, Z
     756:	91 81       	ldd	r25, Z+1	; 0x01
     758:	09 96       	adiw	r24, 0x09	; 9
     75a:	0e 94 90 01 	call	0x320	; 0x320 <Remove>
     75e:	99 8b       	std	Y+17, r25	; 0x11
     760:	88 8b       	std	Y+16, r24	; 0x10
		state_t*				stateBeingProcessed	= sm->currentState ;
     762:	fe 01       	movw	r30, r28
     764:	ee 5a       	subi	r30, 0xAE	; 174
     766:	ff 4f       	sbci	r31, 0xFF	; 255
     768:	01 90       	ld	r0, Z+
     76a:	f0 81       	ld	r31, Z
     76c:	e0 2d       	mov	r30, r0
     76e:	85 81       	ldd	r24, Z+5	; 0x05
     770:	96 81       	ldd	r25, Z+6	; 0x06
     772:	9f 87       	std	Y+15, r25	; 0x0f
     774:	8e 87       	std	Y+14, r24	; 0x0e
		stateHandlerResponse_t	action ;

		sm->nextState = (state_t*)0 ;	// just a little housecleaning
     776:	fe 01       	movw	r30, r28
     778:	ee 5a       	subi	r30, 0xAE	; 174
     77a:	ff 4f       	sbci	r31, 0xFF	; 255
     77c:	01 90       	ld	r0, Z+
     77e:	f0 81       	ld	r31, Z
     780:	e0 2d       	mov	r30, r0
     782:	10 86       	std	Z+8, r1	; 0x08
     784:	17 82       	std	Z+7, r1	; 0x07

		if(iterationMax-- == 0)
     786:	80 91 40 01 	lds	r24, 0x0140
     78a:	90 91 41 01 	lds	r25, 0x0141
     78e:	69 96       	adiw	r28, 0x19	; 25
     790:	9f af       	std	Y+63, r25	; 0x3f
     792:	8e af       	std	Y+62, r24	; 0x3e
     794:	69 97       	sbiw	r28, 0x19	; 25
     796:	67 96       	adiw	r28, 0x17	; 23
     798:	1f ae       	std	Y+63, r1	; 0x3f
     79a:	67 97       	sbiw	r28, 0x17	; 23
     79c:	69 96       	adiw	r28, 0x19	; 25
     79e:	8e ad       	ldd	r24, Y+62	; 0x3e
     7a0:	9f ad       	ldd	r25, Y+63	; 0x3f
     7a2:	69 97       	sbiw	r28, 0x19	; 25
     7a4:	00 97       	sbiw	r24, 0x00	; 0
     7a6:	21 f4       	brne	.+8      	; 0x7b0 <iterateStateMachine+0x12e>
     7a8:	91 e0       	ldi	r25, 0x01	; 1
     7aa:	67 96       	adiw	r28, 0x17	; 23
     7ac:	9f af       	std	Y+63, r25	; 0x3f
     7ae:	67 97       	sbiw	r28, 0x17	; 23
     7b0:	69 96       	adiw	r28, 0x19	; 25
     7b2:	8e ad       	ldd	r24, Y+62	; 0x3e
     7b4:	9f ad       	ldd	r25, Y+63	; 0x3f
     7b6:	69 97       	sbiw	r28, 0x19	; 25
     7b8:	01 97       	sbiw	r24, 0x01	; 1
     7ba:	90 93 41 01 	sts	0x0141, r25
     7be:	80 93 40 01 	sts	0x0140, r24
     7c2:	67 96       	adiw	r28, 0x17	; 23
     7c4:	8f ad       	ldd	r24, Y+63	; 0x3f
     7c6:	67 97       	sbiw	r28, 0x17	; 23
     7c8:	88 23       	and	r24, r24
     7ca:	09 f0       	breq	.+2      	; 0x7ce <iterateStateMachine+0x14c>
     7cc:	bd c3       	rjmp	.+1914   	; 0xf48 <iterateStateMachine+0x8c6>
		{
			break ;
		}

		printf("\t\tProcessing event...\n") ;
     7ce:	86 e6       	ldi	r24, 0x66	; 102
     7d0:	91 e0       	ldi	r25, 0x01	; 1
     7d2:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <puts>
		// state machine events and it is ignored, move up to the parent state
		// and try again. When the top is reached, bail...

		do
		{
			action = callStateHandler(sm, stateBeingProcessed, eventToProcess) ;
     7d6:	fe 01       	movw	r30, r28
     7d8:	ee 5a       	subi	r30, 0xAE	; 174
     7da:	ff 4f       	sbci	r31, 0xFF	; 255
     7dc:	80 81       	ld	r24, Z
     7de:	91 81       	ldd	r25, Z+1	; 0x01
     7e0:	2e 85       	ldd	r18, Y+14	; 0x0e
     7e2:	3f 85       	ldd	r19, Y+15	; 0x0f
     7e4:	48 89       	ldd	r20, Y+16	; 0x10
     7e6:	59 89       	ldd	r21, Y+17	; 0x11
     7e8:	b9 01       	movw	r22, r18
     7ea:	0e 94 a7 02 	call	0x54e	; 0x54e <callStateHandler>
     7ee:	8d 87       	std	Y+13, r24	; 0x0d

			if((action == IGNORED) && (eventToProcess->eventType > SUBSTATE_EXIT))
     7f0:	8d 85       	ldd	r24, Y+13	; 0x0d
     7f2:	88 23       	and	r24, r24
     7f4:	09 f0       	breq	.+2      	; 0x7f8 <iterateStateMachine+0x176>
     7f6:	3e c0       	rjmp	.+124    	; 0x874 <iterateStateMachine+0x1f2>
     7f8:	e8 89       	ldd	r30, Y+16	; 0x10
     7fa:	f9 89       	ldd	r31, Y+17	; 0x11
     7fc:	80 81       	ld	r24, Z
     7fe:	84 30       	cpi	r24, 0x04	; 4
     800:	c8 f1       	brcs	.+114    	; 0x874 <iterateStateMachine+0x1f2>
			{
				stateBeingProcessed = stateBeingProcessed->parent ;
     802:	ee 85       	ldd	r30, Y+14	; 0x0e
     804:	ff 85       	ldd	r31, Y+15	; 0x0f
     806:	80 81       	ld	r24, Z
     808:	91 81       	ldd	r25, Z+1	; 0x01
     80a:	9f 87       	std	Y+15, r25	; 0x0f
     80c:	8e 87       	std	Y+14, r24	; 0x0e
				printf("\t\t\t\t\t\t\tmoving to parent: %s\n", stateBeingProcessed ? stateBeingProcessed->stateName : "<root>") ; fflush(stdout) ;
     80e:	8e 85       	ldd	r24, Y+14	; 0x0e
     810:	9f 85       	ldd	r25, Y+15	; 0x0f
     812:	00 97       	sbiw	r24, 0x00	; 0
     814:	49 f0       	breq	.+18     	; 0x828 <iterateStateMachine+0x1a6>
     816:	ee 85       	ldd	r30, Y+14	; 0x0e
     818:	ff 85       	ldd	r31, Y+15	; 0x0f
     81a:	85 81       	ldd	r24, Z+5	; 0x05
     81c:	96 81       	ldd	r25, Z+6	; 0x06
     81e:	66 96       	adiw	r28, 0x16	; 22
     820:	9f af       	std	Y+63, r25	; 0x3f
     822:	8e af       	std	Y+62, r24	; 0x3e
     824:	66 97       	sbiw	r28, 0x16	; 22
     826:	06 c0       	rjmp	.+12     	; 0x834 <iterateStateMachine+0x1b2>
     828:	8c e7       	ldi	r24, 0x7C	; 124
     82a:	91 e0       	ldi	r25, 0x01	; 1
     82c:	66 96       	adiw	r28, 0x16	; 22
     82e:	9f af       	std	Y+63, r25	; 0x3f
     830:	8e af       	std	Y+62, r24	; 0x3e
     832:	66 97       	sbiw	r28, 0x16	; 22
     834:	00 d0       	rcall	.+0      	; 0x836 <iterateStateMachine+0x1b4>
     836:	00 d0       	rcall	.+0      	; 0x838 <iterateStateMachine+0x1b6>
     838:	ed b7       	in	r30, 0x3d	; 61
     83a:	fe b7       	in	r31, 0x3e	; 62
     83c:	31 96       	adiw	r30, 0x01	; 1
     83e:	83 e8       	ldi	r24, 0x83	; 131
     840:	91 e0       	ldi	r25, 0x01	; 1
     842:	91 83       	std	Z+1, r25	; 0x01
     844:	80 83       	st	Z, r24
     846:	66 96       	adiw	r28, 0x16	; 22
     848:	8e ad       	ldd	r24, Y+62	; 0x3e
     84a:	9f ad       	ldd	r25, Y+63	; 0x3f
     84c:	66 97       	sbiw	r28, 0x16	; 22
     84e:	93 83       	std	Z+3, r25	; 0x03
     850:	82 83       	std	Z+2, r24	; 0x02
     852:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <printf>
     856:	0f 90       	pop	r0
     858:	0f 90       	pop	r0
     85a:	0f 90       	pop	r0
     85c:	0f 90       	pop	r0
     85e:	80 91 84 06 	lds	r24, 0x0684
     862:	90 91 85 06 	lds	r25, 0x0685
     866:	0e 94 b2 07 	call	0xf64	; 0xf64 <fflush>
				// The event was handled or a transition was taken.
				// In either case, no need to continue up the chain.

				break ;
			}
		} while(stateBeingProcessed) ;
     86a:	8e 85       	ldd	r24, Y+14	; 0x0e
     86c:	9f 85       	ldd	r25, Y+15	; 0x0f
     86e:	00 97       	sbiw	r24, 0x00	; 0
     870:	09 f0       	breq	.+2      	; 0x874 <iterateStateMachine+0x1f2>
     872:	b1 cf       	rjmp	.-158    	; 0x7d6 <iterateStateMachine+0x154>

//		printf("\t\t\tresponse: %d from state %s\n", action, stateBeingProcessed ? stateBeingProcessed->stateName : "<root>") ; fflush(stdout) ;

		if(action == TRANSITION)
     874:	8d 85       	ldd	r24, Y+13	; 0x0d
     876:	82 30       	cpi	r24, 0x02	; 2
     878:	09 f0       	breq	.+2      	; 0x87c <iterateStateMachine+0x1fa>
     87a:	5b c3       	rjmp	.+1718   	; 0xf32 <iterateStateMachine+0x8b0>
		{
			state_t*	source	= sm->currentState ;
     87c:	fe 01       	movw	r30, r28
     87e:	ee 5a       	subi	r30, 0xAE	; 174
     880:	ff 4f       	sbci	r31, 0xFF	; 255
     882:	01 90       	ld	r0, Z+
     884:	f0 81       	ld	r31, Z
     886:	e0 2d       	mov	r30, r0
     888:	85 81       	ldd	r24, Z+5	; 0x05
     88a:	96 81       	ldd	r25, Z+6	; 0x06
     88c:	9c 87       	std	Y+12, r25	; 0x0c
     88e:	8b 87       	std	Y+11, r24	; 0x0b
			state_t*	target	= sm->nextState ;
     890:	fe 01       	movw	r30, r28
     892:	ee 5a       	subi	r30, 0xAE	; 174
     894:	ff 4f       	sbci	r31, 0xFF	; 255
     896:	01 90       	ld	r0, Z+
     898:	f0 81       	ld	r31, Z
     89a:	e0 2d       	mov	r30, r0
     89c:	87 81       	ldd	r24, Z+7	; 0x07
     89e:	90 85       	ldd	r25, Z+8	; 0x08
     8a0:	9a 87       	std	Y+10, r25	; 0x0a
     8a2:	89 87       	std	Y+9, r24	; 0x09

//			printf("\t\t\t\tTransitioning from %s to %s\n", source->stateName, target->stateName) ;

			// There are 8 different cases here. They are handled in case of complexity...

			if(source == target)
     8a4:	2b 85       	ldd	r18, Y+11	; 0x0b
     8a6:	3c 85       	ldd	r19, Y+12	; 0x0c
     8a8:	89 85       	ldd	r24, Y+9	; 0x09
     8aa:	9a 85       	ldd	r25, Y+10	; 0x0a
     8ac:	28 17       	cp	r18, r24
     8ae:	39 07       	cpc	r19, r25
     8b0:	39 f5       	brne	.+78     	; 0x900 <iterateStateMachine+0x27e>
			{
				printf("\t\t\t\tSelf transition.\n") ;
     8b2:	80 ea       	ldi	r24, 0xA0	; 160
     8b4:	91 e0       	ldi	r25, 0x01	; 1
     8b6:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <puts>

				// Self transition. Exit and then re-enter the same state

				callStateHandler(sm, source, &exitEvent) ;
     8ba:	fe 01       	movw	r30, r28
     8bc:	ee 5a       	subi	r30, 0xAE	; 174
     8be:	ff 4f       	sbci	r31, 0xFF	; 255
     8c0:	80 81       	ld	r24, Z
     8c2:	91 81       	ldd	r25, Z+1	; 0x01
     8c4:	2b 85       	ldd	r18, Y+11	; 0x0b
     8c6:	3c 85       	ldd	r19, Y+12	; 0x0c
     8c8:	42 e4       	ldi	r20, 0x42	; 66
     8ca:	51 e0       	ldi	r21, 0x01	; 1
     8cc:	b9 01       	movw	r22, r18
     8ce:	0e 94 a7 02 	call	0x54e	; 0x54e <callStateHandler>
				sm->currentState = target ;
     8d2:	fe 01       	movw	r30, r28
     8d4:	ee 5a       	subi	r30, 0xAE	; 174
     8d6:	ff 4f       	sbci	r31, 0xFF	; 255
     8d8:	01 90       	ld	r0, Z+
     8da:	f0 81       	ld	r31, Z
     8dc:	e0 2d       	mov	r30, r0
     8de:	89 85       	ldd	r24, Y+9	; 0x09
     8e0:	9a 85       	ldd	r25, Y+10	; 0x0a
     8e2:	96 83       	std	Z+6, r25	; 0x06
     8e4:	85 83       	std	Z+5, r24	; 0x05
				callStateHandler(sm, target, &enterEvent) ;
     8e6:	fe 01       	movw	r30, r28
     8e8:	ee 5a       	subi	r30, 0xAE	; 174
     8ea:	ff 4f       	sbci	r31, 0xFF	; 255
     8ec:	80 81       	ld	r24, Z
     8ee:	91 81       	ldd	r25, Z+1	; 0x01
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	43 e4       	ldi	r20, 0x43	; 67
     8f6:	51 e0       	ldi	r21, 0x01	; 1
     8f8:	b9 01       	movw	r22, r18
     8fa:	0e 94 a7 02 	call	0x54e	; 0x54e <callStateHandler>
     8fe:	0e c3       	rjmp	.+1564   	; 0xf1c <iterateStateMachine+0x89a>
			}
			else if(source == (state_t*)(target->parent))
     900:	e9 85       	ldd	r30, Y+9	; 0x09
     902:	fa 85       	ldd	r31, Y+10	; 0x0a
     904:	80 81       	ld	r24, Z
     906:	91 81       	ldd	r25, Z+1	; 0x01
     908:	9c 01       	movw	r18, r24
     90a:	8b 85       	ldd	r24, Y+11	; 0x0b
     90c:	9c 85       	ldd	r25, Y+12	; 0x0c
     90e:	28 17       	cp	r18, r24
     910:	39 07       	cpc	r19, r25
     912:	d9 f4       	brne	.+54     	; 0x94a <iterateStateMachine+0x2c8>
			{
				printf("\t\t\t\tTransition to direct child.\n") ;
     914:	85 eb       	ldi	r24, 0xB5	; 181
     916:	91 e0       	ldi	r25, 0x01	; 1
     918:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <puts>

				// target is a direct child of the source. Only need to enter
				// the target here without having to exit the source.

				sm->currentState = target ;
     91c:	fe 01       	movw	r30, r28
     91e:	ee 5a       	subi	r30, 0xAE	; 174
     920:	ff 4f       	sbci	r31, 0xFF	; 255
     922:	01 90       	ld	r0, Z+
     924:	f0 81       	ld	r31, Z
     926:	e0 2d       	mov	r30, r0
     928:	89 85       	ldd	r24, Y+9	; 0x09
     92a:	9a 85       	ldd	r25, Y+10	; 0x0a
     92c:	96 83       	std	Z+6, r25	; 0x06
     92e:	85 83       	std	Z+5, r24	; 0x05
				callStateHandler(sm, target, &enterEvent) ;
     930:	fe 01       	movw	r30, r28
     932:	ee 5a       	subi	r30, 0xAE	; 174
     934:	ff 4f       	sbci	r31, 0xFF	; 255
     936:	80 81       	ld	r24, Z
     938:	91 81       	ldd	r25, Z+1	; 0x01
     93a:	29 85       	ldd	r18, Y+9	; 0x09
     93c:	3a 85       	ldd	r19, Y+10	; 0x0a
     93e:	43 e4       	ldi	r20, 0x43	; 67
     940:	51 e0       	ldi	r21, 0x01	; 1
     942:	b9 01       	movw	r22, r18
     944:	0e 94 a7 02 	call	0x54e	; 0x54e <callStateHandler>
     948:	e9 c2       	rjmp	.+1490   	; 0xf1c <iterateStateMachine+0x89a>
			}
			else if((state_t*)(source->parent) == (state_t*)(target->parent))
     94a:	eb 85       	ldd	r30, Y+11	; 0x0b
     94c:	fc 85       	ldd	r31, Y+12	; 0x0c
     94e:	80 81       	ld	r24, Z
     950:	91 81       	ldd	r25, Z+1	; 0x01
     952:	9c 01       	movw	r18, r24
     954:	e9 85       	ldd	r30, Y+9	; 0x09
     956:	fa 85       	ldd	r31, Y+10	; 0x0a
     958:	80 81       	ld	r24, Z
     95a:	91 81       	ldd	r25, Z+1	; 0x01
     95c:	28 17       	cp	r18, r24
     95e:	39 07       	cpc	r19, r25
     960:	39 f5       	brne	.+78     	; 0x9b0 <iterateStateMachine+0x32e>
			{
				printf("\t\t\t\tTransition to direct peer.\n") ;
     962:	85 ed       	ldi	r24, 0xD5	; 213
     964:	91 e0       	ldi	r25, 0x01	; 1
     966:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <puts>

				// A direct peer transition within the same parent state.
				// Exit the source and then enter the target.

				callStateHandler(sm, source, &exitEvent) ;
     96a:	fe 01       	movw	r30, r28
     96c:	ee 5a       	subi	r30, 0xAE	; 174
     96e:	ff 4f       	sbci	r31, 0xFF	; 255
     970:	80 81       	ld	r24, Z
     972:	91 81       	ldd	r25, Z+1	; 0x01
     974:	2b 85       	ldd	r18, Y+11	; 0x0b
     976:	3c 85       	ldd	r19, Y+12	; 0x0c
     978:	42 e4       	ldi	r20, 0x42	; 66
     97a:	51 e0       	ldi	r21, 0x01	; 1
     97c:	b9 01       	movw	r22, r18
     97e:	0e 94 a7 02 	call	0x54e	; 0x54e <callStateHandler>
				sm->currentState = target ;
     982:	fe 01       	movw	r30, r28
     984:	ee 5a       	subi	r30, 0xAE	; 174
     986:	ff 4f       	sbci	r31, 0xFF	; 255
     988:	01 90       	ld	r0, Z+
     98a:	f0 81       	ld	r31, Z
     98c:	e0 2d       	mov	r30, r0
     98e:	89 85       	ldd	r24, Y+9	; 0x09
     990:	9a 85       	ldd	r25, Y+10	; 0x0a
     992:	96 83       	std	Z+6, r25	; 0x06
     994:	85 83       	std	Z+5, r24	; 0x05
				callStateHandler(sm, target, &enterEvent) ;
     996:	fe 01       	movw	r30, r28
     998:	ee 5a       	subi	r30, 0xAE	; 174
     99a:	ff 4f       	sbci	r31, 0xFF	; 255
     99c:	80 81       	ld	r24, Z
     99e:	91 81       	ldd	r25, Z+1	; 0x01
     9a0:	29 85       	ldd	r18, Y+9	; 0x09
     9a2:	3a 85       	ldd	r19, Y+10	; 0x0a
     9a4:	43 e4       	ldi	r20, 0x43	; 67
     9a6:	51 e0       	ldi	r21, 0x01	; 1
     9a8:	b9 01       	movw	r22, r18
     9aa:	0e 94 a7 02 	call	0x54e	; 0x54e <callStateHandler>
     9ae:	b6 c2       	rjmp	.+1388   	; 0xf1c <iterateStateMachine+0x89a>
			}
			else if((state_t*)(source->parent) == target)
     9b0:	eb 85       	ldd	r30, Y+11	; 0x0b
     9b2:	fc 85       	ldd	r31, Y+12	; 0x0c
     9b4:	80 81       	ld	r24, Z
     9b6:	91 81       	ldd	r25, Z+1	; 0x01
     9b8:	9c 01       	movw	r18, r24
     9ba:	89 85       	ldd	r24, Y+9	; 0x09
     9bc:	9a 85       	ldd	r25, Y+10	; 0x0a
     9be:	28 17       	cp	r18, r24
     9c0:	39 07       	cpc	r19, r25
     9c2:	d9 f4       	brne	.+54     	; 0x9fa <iterateStateMachine+0x378>
			{
				printf("\t\t\t\tTransition to direct parent.\n") ;
     9c4:	84 ef       	ldi	r24, 0xF4	; 244
     9c6:	91 e0       	ldi	r25, 0x01	; 1
     9c8:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <puts>

				// target is the direct parent of the source. Only need to exit
				// the source without having to re-enter the target since it
				// was already active.

				sm->currentState = target ;
     9cc:	fe 01       	movw	r30, r28
     9ce:	ee 5a       	subi	r30, 0xAE	; 174
     9d0:	ff 4f       	sbci	r31, 0xFF	; 255
     9d2:	01 90       	ld	r0, Z+
     9d4:	f0 81       	ld	r31, Z
     9d6:	e0 2d       	mov	r30, r0
     9d8:	89 85       	ldd	r24, Y+9	; 0x09
     9da:	9a 85       	ldd	r25, Y+10	; 0x0a
     9dc:	96 83       	std	Z+6, r25	; 0x06
     9de:	85 83       	std	Z+5, r24	; 0x05
				callStateHandler(sm, source, &exitEvent) ;
     9e0:	fe 01       	movw	r30, r28
     9e2:	ee 5a       	subi	r30, 0xAE	; 174
     9e4:	ff 4f       	sbci	r31, 0xFF	; 255
     9e6:	80 81       	ld	r24, Z
     9e8:	91 81       	ldd	r25, Z+1	; 0x01
     9ea:	2b 85       	ldd	r18, Y+11	; 0x0b
     9ec:	3c 85       	ldd	r19, Y+12	; 0x0c
     9ee:	42 e4       	ldi	r20, 0x42	; 66
     9f0:	51 e0       	ldi	r21, 0x01	; 1
     9f2:	b9 01       	movw	r22, r18
     9f4:	0e 94 a7 02 	call	0x54e	; 0x54e <callStateHandler>
     9f8:	91 c2       	rjmp	.+1314   	; 0xf1c <iterateStateMachine+0x89a>
				uint8_t		entryIndex ;
				uint8_t		exitIndex ;

				// This is where things start to get complicated...

				printf("\t\t\t\tScanning source hierarchy...\n") ;
     9fa:	85 e1       	ldi	r24, 0x15	; 21
     9fc:	92 e0       	ldi	r25, 0x02	; 2
     9fe:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <puts>

				sourceIndex			= 0 ;
     a02:	18 86       	std	Y+8, r1	; 0x08
				stateBeingProcessed	= source ;
     a04:	8b 85       	ldd	r24, Y+11	; 0x0b
     a06:	9c 85       	ldd	r25, Y+12	; 0x0c
     a08:	9f 87       	std	Y+15, r25	; 0x0f
     a0a:	8e 87       	std	Y+14, r24	; 0x0e

				do
				{
					sourceHierarchy[sourceIndex++] = stateBeingProcessed ;
     a0c:	88 85       	ldd	r24, Y+8	; 0x08
     a0e:	88 2f       	mov	r24, r24
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	9c 01       	movw	r18, r24
     a14:	22 0f       	add	r18, r18
     a16:	33 1f       	adc	r19, r19
     a18:	ce 01       	movw	r24, r28
     a1a:	01 96       	adiw	r24, 0x01	; 1
     a1c:	82 0f       	add	r24, r18
     a1e:	93 1f       	adc	r25, r19
     a20:	fc 01       	movw	r30, r24
     a22:	71 96       	adiw	r30, 0x11	; 17
     a24:	8e 85       	ldd	r24, Y+14	; 0x0e
     a26:	9f 85       	ldd	r25, Y+15	; 0x0f
     a28:	91 83       	std	Z+1, r25	; 0x01
     a2a:	80 83       	st	Z, r24
     a2c:	88 85       	ldd	r24, Y+8	; 0x08
     a2e:	8f 5f       	subi	r24, 0xFF	; 255
     a30:	88 87       	std	Y+8, r24	; 0x08

					printf("\t\t\t\t\tsourceHierarchy[%d] = %s\n", sourceIndex - 1, stateBeingProcessed->stateName) ;
     a32:	88 85       	ldd	r24, Y+8	; 0x08
     a34:	88 2f       	mov	r24, r24
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	ac 01       	movw	r20, r24
     a3a:	41 50       	subi	r20, 0x01	; 1
     a3c:	50 40       	sbci	r21, 0x00	; 0
     a3e:	ee 85       	ldd	r30, Y+14	; 0x0e
     a40:	ff 85       	ldd	r31, Y+15	; 0x0f
     a42:	25 81       	ldd	r18, Z+5	; 0x05
     a44:	36 81       	ldd	r19, Z+6	; 0x06
     a46:	00 d0       	rcall	.+0      	; 0xa48 <iterateStateMachine+0x3c6>
     a48:	00 d0       	rcall	.+0      	; 0xa4a <iterateStateMachine+0x3c8>
     a4a:	00 d0       	rcall	.+0      	; 0xa4c <iterateStateMachine+0x3ca>
     a4c:	ed b7       	in	r30, 0x3d	; 61
     a4e:	fe b7       	in	r31, 0x3e	; 62
     a50:	31 96       	adiw	r30, 0x01	; 1
     a52:	86 e3       	ldi	r24, 0x36	; 54
     a54:	92 e0       	ldi	r25, 0x02	; 2
     a56:	91 83       	std	Z+1, r25	; 0x01
     a58:	80 83       	st	Z, r24
     a5a:	53 83       	std	Z+3, r21	; 0x03
     a5c:	42 83       	std	Z+2, r20	; 0x02
     a5e:	35 83       	std	Z+5, r19	; 0x05
     a60:	24 83       	std	Z+4, r18	; 0x04
     a62:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <printf>
     a66:	8d b7       	in	r24, 0x3d	; 61
     a68:	9e b7       	in	r25, 0x3e	; 62
     a6a:	06 96       	adiw	r24, 0x06	; 6
     a6c:	0f b6       	in	r0, 0x3f	; 63
     a6e:	f8 94       	cli
     a70:	9e bf       	out	0x3e, r25	; 62
     a72:	0f be       	out	0x3f, r0	; 63
     a74:	8d bf       	out	0x3d, r24	; 61

					if(stateBeingProcessed == target)
     a76:	2e 85       	ldd	r18, Y+14	; 0x0e
     a78:	3f 85       	ldd	r19, Y+15	; 0x0f
     a7a:	89 85       	ldd	r24, Y+9	; 0x09
     a7c:	9a 85       	ldd	r25, Y+10	; 0x0a
     a7e:	28 17       	cp	r18, r24
     a80:	39 07       	cpc	r19, r25
     a82:	09 f0       	breq	.+2      	; 0xa86 <iterateStateMachine+0x404>
     a84:	40 c0       	rjmp	.+128    	; 0xb06 <iterateStateMachine+0x484>
					{
						uint8_t	exitIndex = 0 ;
     a86:	1a 82       	std	Y+2, r1	; 0x02

						printf("\t\t\t\t\t\tFound target as ancestor of source\n") ;
     a88:	85 e5       	ldi	r24, 0x55	; 85
     a8a:	92 e0       	ldi	r25, 0x02	; 2
     a8c:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <puts>

						sourceIndex-- ;
     a90:	88 85       	ldd	r24, Y+8	; 0x08
     a92:	81 50       	subi	r24, 0x01	; 1
     a94:	88 87       	std	Y+8, r24	; 0x08
     a96:	28 c0       	rjmp	.+80     	; 0xae8 <iterateStateMachine+0x466>

						while(exitIndex < sourceIndex)
						{
							printf("\t\t\t\t") ;
     a98:	00 d0       	rcall	.+0      	; 0xa9a <iterateStateMachine+0x418>
     a9a:	ed b7       	in	r30, 0x3d	; 61
     a9c:	fe b7       	in	r31, 0x3e	; 62
     a9e:	31 96       	adiw	r30, 0x01	; 1
     aa0:	8e e7       	ldi	r24, 0x7E	; 126
     aa2:	92 e0       	ldi	r25, 0x02	; 2
     aa4:	91 83       	std	Z+1, r25	; 0x01
     aa6:	80 83       	st	Z, r24
     aa8:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <printf>
     aac:	0f 90       	pop	r0
     aae:	0f 90       	pop	r0

							callStateHandler(sm, sourceHierarchy[exitIndex], &exitEvent) ;
     ab0:	8a 81       	ldd	r24, Y+2	; 0x02
     ab2:	88 2f       	mov	r24, r24
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	9c 01       	movw	r18, r24
     ab8:	22 0f       	add	r18, r18
     aba:	33 1f       	adc	r19, r19
     abc:	ce 01       	movw	r24, r28
     abe:	01 96       	adiw	r24, 0x01	; 1
     ac0:	82 0f       	add	r24, r18
     ac2:	93 1f       	adc	r25, r19
     ac4:	fc 01       	movw	r30, r24
     ac6:	71 96       	adiw	r30, 0x11	; 17
     ac8:	40 81       	ld	r20, Z
     aca:	51 81       	ldd	r21, Z+1	; 0x01
     acc:	fe 01       	movw	r30, r28
     ace:	ee 5a       	subi	r30, 0xAE	; 174
     ad0:	ff 4f       	sbci	r31, 0xFF	; 255
     ad2:	80 81       	ld	r24, Z
     ad4:	91 81       	ldd	r25, Z+1	; 0x01
     ad6:	22 e4       	ldi	r18, 0x42	; 66
     ad8:	31 e0       	ldi	r19, 0x01	; 1
     ada:	ba 01       	movw	r22, r20
     adc:	a9 01       	movw	r20, r18
     ade:	0e 94 a7 02 	call	0x54e	; 0x54e <callStateHandler>

							exitIndex++ ;
     ae2:	8a 81       	ldd	r24, Y+2	; 0x02
     ae4:	8f 5f       	subi	r24, 0xFF	; 255
     ae6:	8a 83       	std	Y+2, r24	; 0x02

						printf("\t\t\t\t\t\tFound target as ancestor of source\n") ;

						sourceIndex-- ;

						while(exitIndex < sourceIndex)
     ae8:	9a 81       	ldd	r25, Y+2	; 0x02
     aea:	88 85       	ldd	r24, Y+8	; 0x08
     aec:	98 17       	cp	r25, r24
     aee:	a0 f2       	brcs	.-88     	; 0xa98 <iterateStateMachine+0x416>
							callStateHandler(sm, sourceHierarchy[exitIndex], &exitEvent) ;

							exitIndex++ ;
						}

						sm->currentState = target ;
     af0:	fe 01       	movw	r30, r28
     af2:	ee 5a       	subi	r30, 0xAE	; 174
     af4:	ff 4f       	sbci	r31, 0xFF	; 255
     af6:	01 90       	ld	r0, Z+
     af8:	f0 81       	ld	r31, Z
     afa:	e0 2d       	mov	r30, r0
     afc:	89 85       	ldd	r24, Y+9	; 0x09
     afe:	9a 85       	ldd	r25, Y+10	; 0x0a
     b00:	96 83       	std	Z+6, r25	; 0x06
     b02:	85 83       	std	Z+5, r24	; 0x05
     b04:	0b c0       	rjmp	.+22     	; 0xb1c <iterateStateMachine+0x49a>

						break ;
					}

					stateBeingProcessed = stateBeingProcessed->parent ;
     b06:	ee 85       	ldd	r30, Y+14	; 0x0e
     b08:	ff 85       	ldd	r31, Y+15	; 0x0f
     b0a:	80 81       	ld	r24, Z
     b0c:	91 81       	ldd	r25, Z+1	; 0x01
     b0e:	9f 87       	std	Y+15, r25	; 0x0f
     b10:	8e 87       	std	Y+14, r24	; 0x0e
				} while(stateBeingProcessed) ;
     b12:	8e 85       	ldd	r24, Y+14	; 0x0e
     b14:	9f 85       	ldd	r25, Y+15	; 0x0f
     b16:	00 97       	sbiw	r24, 0x00	; 0
     b18:	09 f0       	breq	.+2      	; 0xb1c <iterateStateMachine+0x49a>
     b1a:	78 cf       	rjmp	.-272    	; 0xa0c <iterateStateMachine+0x38a>

				if(sm->currentState != target)
     b1c:	fe 01       	movw	r30, r28
     b1e:	ee 5a       	subi	r30, 0xAE	; 174
     b20:	ff 4f       	sbci	r31, 0xFF	; 255
     b22:	01 90       	ld	r0, Z+
     b24:	f0 81       	ld	r31, Z
     b26:	e0 2d       	mov	r30, r0
     b28:	25 81       	ldd	r18, Z+5	; 0x05
     b2a:	36 81       	ldd	r19, Z+6	; 0x06
     b2c:	89 85       	ldd	r24, Y+9	; 0x09
     b2e:	9a 85       	ldd	r25, Y+10	; 0x0a
     b30:	28 17       	cp	r18, r24
     b32:	39 07       	cpc	r19, r25
     b34:	09 f4       	brne	.+2      	; 0xb38 <iterateStateMachine+0x4b6>
     b36:	98 c0       	rjmp	.+304    	; 0xc68 <iterateStateMachine+0x5e6>
				{
					printf("\t\t\t\tScanning target hierarchy...\n") ;
     b38:	83 e8       	ldi	r24, 0x83	; 131
     b3a:	92 e0       	ldi	r25, 0x02	; 2
     b3c:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <puts>

					targetIndex			= 0 ;
     b40:	1f 82       	std	Y+7, r1	; 0x07
					stateBeingProcessed	= target ;
     b42:	89 85       	ldd	r24, Y+9	; 0x09
     b44:	9a 85       	ldd	r25, Y+10	; 0x0a
     b46:	9f 87       	std	Y+15, r25	; 0x0f
     b48:	8e 87       	std	Y+14, r24	; 0x0e

					do
					{
						targetHierarchy[targetIndex] = stateBeingProcessed ;
     b4a:	8f 81       	ldd	r24, Y+7	; 0x07
     b4c:	88 2f       	mov	r24, r24
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	9c 01       	movw	r18, r24
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	ce 01       	movw	r24, r28
     b58:	01 96       	adiw	r24, 0x01	; 1
     b5a:	82 0f       	add	r24, r18
     b5c:	93 1f       	adc	r25, r19
     b5e:	fc 01       	movw	r30, r24
     b60:	f1 96       	adiw	r30, 0x31	; 49
     b62:	8e 85       	ldd	r24, Y+14	; 0x0e
     b64:	9f 85       	ldd	r25, Y+15	; 0x0f
     b66:	91 83       	std	Z+1, r25	; 0x01
     b68:	80 83       	st	Z, r24

						printf("\t\t\t\t\ttargetHierarchy[%d] = %s\n", targetIndex, stateBeingProcessed->stateName) ;
     b6a:	8f 81       	ldd	r24, Y+7	; 0x07
     b6c:	48 2f       	mov	r20, r24
     b6e:	50 e0       	ldi	r21, 0x00	; 0
     b70:	ee 85       	ldd	r30, Y+14	; 0x0e
     b72:	ff 85       	ldd	r31, Y+15	; 0x0f
     b74:	25 81       	ldd	r18, Z+5	; 0x05
     b76:	36 81       	ldd	r19, Z+6	; 0x06
     b78:	00 d0       	rcall	.+0      	; 0xb7a <iterateStateMachine+0x4f8>
     b7a:	00 d0       	rcall	.+0      	; 0xb7c <iterateStateMachine+0x4fa>
     b7c:	00 d0       	rcall	.+0      	; 0xb7e <iterateStateMachine+0x4fc>
     b7e:	ed b7       	in	r30, 0x3d	; 61
     b80:	fe b7       	in	r31, 0x3e	; 62
     b82:	31 96       	adiw	r30, 0x01	; 1
     b84:	84 ea       	ldi	r24, 0xA4	; 164
     b86:	92 e0       	ldi	r25, 0x02	; 2
     b88:	91 83       	std	Z+1, r25	; 0x01
     b8a:	80 83       	st	Z, r24
     b8c:	53 83       	std	Z+3, r21	; 0x03
     b8e:	42 83       	std	Z+2, r20	; 0x02
     b90:	35 83       	std	Z+5, r19	; 0x05
     b92:	24 83       	std	Z+4, r18	; 0x04
     b94:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <printf>
     b98:	8d b7       	in	r24, 0x3d	; 61
     b9a:	9e b7       	in	r25, 0x3e	; 62
     b9c:	06 96       	adiw	r24, 0x06	; 6
     b9e:	0f b6       	in	r0, 0x3f	; 63
     ba0:	f8 94       	cli
     ba2:	9e bf       	out	0x3e, r25	; 62
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	8d bf       	out	0x3d, r24	; 61

						if(stateBeingProcessed == source)
     ba8:	2e 85       	ldd	r18, Y+14	; 0x0e
     baa:	3f 85       	ldd	r19, Y+15	; 0x0f
     bac:	8b 85       	ldd	r24, Y+11	; 0x0b
     bae:	9c 85       	ldd	r25, Y+12	; 0x0c
     bb0:	28 17       	cp	r18, r24
     bb2:	39 07       	cpc	r19, r25
     bb4:	09 f0       	breq	.+2      	; 0xbb8 <iterateStateMachine+0x536>
     bb6:	4a c0       	rjmp	.+148    	; 0xc4c <iterateStateMachine+0x5ca>
						{
							printf("\t\t\t\t\t\tFound source as ancestor of target\n") ;
     bb8:	83 ec       	ldi	r24, 0xC3	; 195
     bba:	92 e0       	ldi	r25, 0x02	; 2
     bbc:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <puts>
     bc0:	25 c0       	rjmp	.+74     	; 0xc0c <iterateStateMachine+0x58a>

							while(targetIndex--)
							{
								printf("\t\t\t\t") ;
     bc2:	00 d0       	rcall	.+0      	; 0xbc4 <iterateStateMachine+0x542>
     bc4:	ed b7       	in	r30, 0x3d	; 61
     bc6:	fe b7       	in	r31, 0x3e	; 62
     bc8:	31 96       	adiw	r30, 0x01	; 1
     bca:	8e e7       	ldi	r24, 0x7E	; 126
     bcc:	92 e0       	ldi	r25, 0x02	; 2
     bce:	91 83       	std	Z+1, r25	; 0x01
     bd0:	80 83       	st	Z, r24
     bd2:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <printf>
     bd6:	0f 90       	pop	r0
     bd8:	0f 90       	pop	r0
								callStateHandler(sm, targetHierarchy[targetIndex], &enterEvent) ;
     bda:	8f 81       	ldd	r24, Y+7	; 0x07
     bdc:	88 2f       	mov	r24, r24
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	9c 01       	movw	r18, r24
     be2:	22 0f       	add	r18, r18
     be4:	33 1f       	adc	r19, r19
     be6:	ce 01       	movw	r24, r28
     be8:	01 96       	adiw	r24, 0x01	; 1
     bea:	82 0f       	add	r24, r18
     bec:	93 1f       	adc	r25, r19
     bee:	fc 01       	movw	r30, r24
     bf0:	f1 96       	adiw	r30, 0x31	; 49
     bf2:	40 81       	ld	r20, Z
     bf4:	51 81       	ldd	r21, Z+1	; 0x01
     bf6:	fe 01       	movw	r30, r28
     bf8:	ee 5a       	subi	r30, 0xAE	; 174
     bfa:	ff 4f       	sbci	r31, 0xFF	; 255
     bfc:	80 81       	ld	r24, Z
     bfe:	91 81       	ldd	r25, Z+1	; 0x01
     c00:	23 e4       	ldi	r18, 0x43	; 67
     c02:	31 e0       	ldi	r19, 0x01	; 1
     c04:	ba 01       	movw	r22, r20
     c06:	a9 01       	movw	r20, r18
     c08:	0e 94 a7 02 	call	0x54e	; 0x54e <callStateHandler>

						if(stateBeingProcessed == source)
						{
							printf("\t\t\t\t\t\tFound source as ancestor of target\n") ;

							while(targetIndex--)
     c0c:	9f 81       	ldd	r25, Y+7	; 0x07
     c0e:	6a 96       	adiw	r28, 0x1a	; 26
     c10:	9f af       	std	Y+63, r25	; 0x3f
     c12:	6a 97       	sbiw	r28, 0x1a	; 26
     c14:	6a 96       	adiw	r28, 0x1a	; 26
     c16:	8f ad       	ldd	r24, Y+63	; 0x3f
     c18:	6a 97       	sbiw	r28, 0x1a	; 26
     c1a:	88 23       	and	r24, r24
     c1c:	21 f0       	breq	.+8      	; 0xc26 <iterateStateMachine+0x5a4>
     c1e:	91 e0       	ldi	r25, 0x01	; 1
     c20:	6a 96       	adiw	r28, 0x1a	; 26
     c22:	9f af       	std	Y+63, r25	; 0x3f
     c24:	6a 97       	sbiw	r28, 0x1a	; 26
     c26:	6a 96       	adiw	r28, 0x1a	; 26
     c28:	8f ad       	ldd	r24, Y+63	; 0x3f
     c2a:	6a 97       	sbiw	r28, 0x1a	; 26
     c2c:	9f 81       	ldd	r25, Y+7	; 0x07
     c2e:	91 50       	subi	r25, 0x01	; 1
     c30:	9f 83       	std	Y+7, r25	; 0x07
     c32:	88 23       	and	r24, r24
     c34:	31 f6       	brne	.-116    	; 0xbc2 <iterateStateMachine+0x540>
							{
								printf("\t\t\t\t") ;
								callStateHandler(sm, targetHierarchy[targetIndex], &enterEvent) ;
							}

							sm->currentState = target ;
     c36:	fe 01       	movw	r30, r28
     c38:	ee 5a       	subi	r30, 0xAE	; 174
     c3a:	ff 4f       	sbci	r31, 0xFF	; 255
     c3c:	01 90       	ld	r0, Z+
     c3e:	f0 81       	ld	r31, Z
     c40:	e0 2d       	mov	r30, r0
     c42:	89 85       	ldd	r24, Y+9	; 0x09
     c44:	9a 85       	ldd	r25, Y+10	; 0x0a
     c46:	96 83       	std	Z+6, r25	; 0x06
     c48:	85 83       	std	Z+5, r24	; 0x05
     c4a:	0e c0       	rjmp	.+28     	; 0xc68 <iterateStateMachine+0x5e6>

							break ;
						}

						targetIndex++ ;
     c4c:	8f 81       	ldd	r24, Y+7	; 0x07
     c4e:	8f 5f       	subi	r24, 0xFF	; 255
     c50:	8f 83       	std	Y+7, r24	; 0x07
						stateBeingProcessed = stateBeingProcessed->parent ;
     c52:	ee 85       	ldd	r30, Y+14	; 0x0e
     c54:	ff 85       	ldd	r31, Y+15	; 0x0f
     c56:	80 81       	ld	r24, Z
     c58:	91 81       	ldd	r25, Z+1	; 0x01
     c5a:	9f 87       	std	Y+15, r25	; 0x0f
     c5c:	8e 87       	std	Y+14, r24	; 0x0e
					} while(stateBeingProcessed) ;
     c5e:	8e 85       	ldd	r24, Y+14	; 0x0e
     c60:	9f 85       	ldd	r25, Y+15	; 0x0f
     c62:	00 97       	sbiw	r24, 0x00	; 0
     c64:	09 f0       	breq	.+2      	; 0xc68 <iterateStateMachine+0x5e6>
     c66:	71 cf       	rjmp	.-286    	; 0xb4a <iterateStateMachine+0x4c8>
				}

				if(sm->currentState != target)
     c68:	fe 01       	movw	r30, r28
     c6a:	ee 5a       	subi	r30, 0xAE	; 174
     c6c:	ff 4f       	sbci	r31, 0xFF	; 255
     c6e:	01 90       	ld	r0, Z+
     c70:	f0 81       	ld	r31, Z
     c72:	e0 2d       	mov	r30, r0
     c74:	25 81       	ldd	r18, Z+5	; 0x05
     c76:	36 81       	ldd	r19, Z+6	; 0x06
     c78:	89 85       	ldd	r24, Y+9	; 0x09
     c7a:	9a 85       	ldd	r25, Y+10	; 0x0a
     c7c:	28 17       	cp	r18, r24
     c7e:	39 07       	cpc	r19, r25
     c80:	09 f4       	brne	.+2      	; 0xc84 <iterateStateMachine+0x602>
     c82:	4c c1       	rjmp	.+664    	; 0xf1c <iterateStateMachine+0x89a>
				{
					uint8_t	LCAindex = 0 ;
     c84:	19 82       	std	Y+1, r1	; 0x01

					printf("\t\t\t\tStill haven't found relationship. Scanning for LCA...\n") ;
     c86:	8c ee       	ldi	r24, 0xEC	; 236
     c88:	92 e0       	ldi	r25, 0x02	; 2
     c8a:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <puts>
					entryIndex	= targetIndex - 1 ;
     c8e:	8f 81       	ldd	r24, Y+7	; 0x07
     c90:	81 50       	subi	r24, 0x01	; 1
     c92:	8c 83       	std	Y+4, r24	; 0x04
					exitIndex	= sourceIndex - 1 ;
     c94:	88 85       	ldd	r24, Y+8	; 0x08
     c96:	81 50       	subi	r24, 0x01	; 1
     c98:	8b 83       	std	Y+3, r24	; 0x03
					printf("\t\t\t\t\tentryIndex = %d, exitIndex = %d\n", entryIndex, exitIndex) ; fflush(stdout) ;
     c9a:	8c 81       	ldd	r24, Y+4	; 0x04
     c9c:	48 2f       	mov	r20, r24
     c9e:	50 e0       	ldi	r21, 0x00	; 0
     ca0:	8b 81       	ldd	r24, Y+3	; 0x03
     ca2:	28 2f       	mov	r18, r24
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	00 d0       	rcall	.+0      	; 0xca8 <iterateStateMachine+0x626>
     ca8:	00 d0       	rcall	.+0      	; 0xcaa <iterateStateMachine+0x628>
     caa:	00 d0       	rcall	.+0      	; 0xcac <iterateStateMachine+0x62a>
     cac:	ed b7       	in	r30, 0x3d	; 61
     cae:	fe b7       	in	r31, 0x3e	; 62
     cb0:	31 96       	adiw	r30, 0x01	; 1
     cb2:	86 e2       	ldi	r24, 0x26	; 38
     cb4:	93 e0       	ldi	r25, 0x03	; 3
     cb6:	91 83       	std	Z+1, r25	; 0x01
     cb8:	80 83       	st	Z, r24
     cba:	53 83       	std	Z+3, r21	; 0x03
     cbc:	42 83       	std	Z+2, r20	; 0x02
     cbe:	35 83       	std	Z+5, r19	; 0x05
     cc0:	24 83       	std	Z+4, r18	; 0x04
     cc2:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <printf>
     cc6:	8d b7       	in	r24, 0x3d	; 61
     cc8:	9e b7       	in	r25, 0x3e	; 62
     cca:	06 96       	adiw	r24, 0x06	; 6
     ccc:	0f b6       	in	r0, 0x3f	; 63
     cce:	f8 94       	cli
     cd0:	9e bf       	out	0x3e, r25	; 62
     cd2:	0f be       	out	0x3f, r0	; 63
     cd4:	8d bf       	out	0x3d, r24	; 61
     cd6:	80 91 84 06 	lds	r24, 0x0684
     cda:	90 91 85 06 	lds	r25, 0x0685
     cde:	0e 94 b2 07 	call	0xf64	; 0xf64 <fflush>
     ce2:	34 c0       	rjmp	.+104    	; 0xd4c <iterateStateMachine+0x6ca>

					while(sourceHierarchy[exitIndex] == targetHierarchy[entryIndex])
					{
						LCA = sourceHierarchy[exitIndex] ;
     ce4:	8b 81       	ldd	r24, Y+3	; 0x03
     ce6:	88 2f       	mov	r24, r24
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	9c 01       	movw	r18, r24
     cec:	22 0f       	add	r18, r18
     cee:	33 1f       	adc	r19, r19
     cf0:	ce 01       	movw	r24, r28
     cf2:	01 96       	adiw	r24, 0x01	; 1
     cf4:	82 0f       	add	r24, r18
     cf6:	93 1f       	adc	r25, r19
     cf8:	fc 01       	movw	r30, r24
     cfa:	71 96       	adiw	r30, 0x11	; 17
     cfc:	80 81       	ld	r24, Z
     cfe:	91 81       	ldd	r25, Z+1	; 0x01
     d00:	9e 83       	std	Y+6, r25	; 0x06
     d02:	8d 83       	std	Y+5, r24	; 0x05

						entryIndex-- ;
     d04:	8c 81       	ldd	r24, Y+4	; 0x04
     d06:	81 50       	subi	r24, 0x01	; 1
     d08:	8c 83       	std	Y+4, r24	; 0x04
						exitIndex-- ;
     d0a:	8b 81       	ldd	r24, Y+3	; 0x03
     d0c:	81 50       	subi	r24, 0x01	; 1
     d0e:	8b 83       	std	Y+3, r24	; 0x03

						printf("\t\t\t\t\tCurrent LCA candidate: %s\n", LCA->stateName) ; fflush(stdout) ;
     d10:	ed 81       	ldd	r30, Y+5	; 0x05
     d12:	fe 81       	ldd	r31, Y+6	; 0x06
     d14:	25 81       	ldd	r18, Z+5	; 0x05
     d16:	36 81       	ldd	r19, Z+6	; 0x06
     d18:	00 d0       	rcall	.+0      	; 0xd1a <iterateStateMachine+0x698>
     d1a:	00 d0       	rcall	.+0      	; 0xd1c <iterateStateMachine+0x69a>
     d1c:	ed b7       	in	r30, 0x3d	; 61
     d1e:	fe b7       	in	r31, 0x3e	; 62
     d20:	31 96       	adiw	r30, 0x01	; 1
     d22:	8c e4       	ldi	r24, 0x4C	; 76
     d24:	93 e0       	ldi	r25, 0x03	; 3
     d26:	91 83       	std	Z+1, r25	; 0x01
     d28:	80 83       	st	Z, r24
     d2a:	33 83       	std	Z+3, r19	; 0x03
     d2c:	22 83       	std	Z+2, r18	; 0x02
     d2e:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <printf>
     d32:	0f 90       	pop	r0
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
     d38:	0f 90       	pop	r0
     d3a:	80 91 84 06 	lds	r24, 0x0684
     d3e:	90 91 85 06 	lds	r25, 0x0685
     d42:	0e 94 b2 07 	call	0xf64	; 0xf64 <fflush>

						LCAindex++ ;
     d46:	89 81       	ldd	r24, Y+1	; 0x01
     d48:	8f 5f       	subi	r24, 0xFF	; 255
     d4a:	89 83       	std	Y+1, r24	; 0x01
					printf("\t\t\t\tStill haven't found relationship. Scanning for LCA...\n") ;
					entryIndex	= targetIndex - 1 ;
					exitIndex	= sourceIndex - 1 ;
					printf("\t\t\t\t\tentryIndex = %d, exitIndex = %d\n", entryIndex, exitIndex) ; fflush(stdout) ;

					while(sourceHierarchy[exitIndex] == targetHierarchy[entryIndex])
     d4c:	8b 81       	ldd	r24, Y+3	; 0x03
     d4e:	88 2f       	mov	r24, r24
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	9c 01       	movw	r18, r24
     d54:	22 0f       	add	r18, r18
     d56:	33 1f       	adc	r19, r19
     d58:	ce 01       	movw	r24, r28
     d5a:	01 96       	adiw	r24, 0x01	; 1
     d5c:	82 0f       	add	r24, r18
     d5e:	93 1f       	adc	r25, r19
     d60:	fc 01       	movw	r30, r24
     d62:	71 96       	adiw	r30, 0x11	; 17
     d64:	40 81       	ld	r20, Z
     d66:	51 81       	ldd	r21, Z+1	; 0x01
     d68:	8c 81       	ldd	r24, Y+4	; 0x04
     d6a:	88 2f       	mov	r24, r24
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	9c 01       	movw	r18, r24
     d70:	22 0f       	add	r18, r18
     d72:	33 1f       	adc	r19, r19
     d74:	ce 01       	movw	r24, r28
     d76:	01 96       	adiw	r24, 0x01	; 1
     d78:	82 0f       	add	r24, r18
     d7a:	93 1f       	adc	r25, r19
     d7c:	fc 01       	movw	r30, r24
     d7e:	f1 96       	adiw	r30, 0x31	; 49
     d80:	80 81       	ld	r24, Z
     d82:	91 81       	ldd	r25, Z+1	; 0x01
     d84:	48 17       	cp	r20, r24
     d86:	59 07       	cpc	r21, r25
     d88:	09 f4       	brne	.+2      	; 0xd8c <iterateStateMachine+0x70a>
     d8a:	ac cf       	rjmp	.-168    	; 0xce4 <iterateStateMachine+0x662>
						printf("\t\t\t\t\tCurrent LCA candidate: %s\n", LCA->stateName) ; fflush(stdout) ;

						LCAindex++ ;
					}

					printf("\t\t\t\t\tLCA of %s and %s is: %s\n", source->stateName, target->stateName, LCA->stateName) ;
     d8c:	eb 85       	ldd	r30, Y+11	; 0x0b
     d8e:	fc 85       	ldd	r31, Y+12	; 0x0c
     d90:	25 81       	ldd	r18, Z+5	; 0x05
     d92:	36 81       	ldd	r19, Z+6	; 0x06
     d94:	e9 85       	ldd	r30, Y+9	; 0x09
     d96:	fa 85       	ldd	r31, Y+10	; 0x0a
     d98:	45 81       	ldd	r20, Z+5	; 0x05
     d9a:	56 81       	ldd	r21, Z+6	; 0x06
     d9c:	ed 81       	ldd	r30, Y+5	; 0x05
     d9e:	fe 81       	ldd	r31, Y+6	; 0x06
     da0:	65 81       	ldd	r22, Z+5	; 0x05
     da2:	76 81       	ldd	r23, Z+6	; 0x06
     da4:	8d b7       	in	r24, 0x3d	; 61
     da6:	9e b7       	in	r25, 0x3e	; 62
     da8:	08 97       	sbiw	r24, 0x08	; 8
     daa:	0f b6       	in	r0, 0x3f	; 63
     dac:	f8 94       	cli
     dae:	9e bf       	out	0x3e, r25	; 62
     db0:	0f be       	out	0x3f, r0	; 63
     db2:	8d bf       	out	0x3d, r24	; 61
     db4:	ed b7       	in	r30, 0x3d	; 61
     db6:	fe b7       	in	r31, 0x3e	; 62
     db8:	31 96       	adiw	r30, 0x01	; 1
     dba:	8c e6       	ldi	r24, 0x6C	; 108
     dbc:	93 e0       	ldi	r25, 0x03	; 3
     dbe:	91 83       	std	Z+1, r25	; 0x01
     dc0:	80 83       	st	Z, r24
     dc2:	33 83       	std	Z+3, r19	; 0x03
     dc4:	22 83       	std	Z+2, r18	; 0x02
     dc6:	55 83       	std	Z+5, r21	; 0x05
     dc8:	44 83       	std	Z+4, r20	; 0x04
     dca:	77 83       	std	Z+7, r23	; 0x07
     dcc:	66 83       	std	Z+6, r22	; 0x06
     dce:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <printf>
     dd2:	8d b7       	in	r24, 0x3d	; 61
     dd4:	9e b7       	in	r25, 0x3e	; 62
     dd6:	08 96       	adiw	r24, 0x08	; 8
     dd8:	0f b6       	in	r0, 0x3f	; 63
     dda:	f8 94       	cli
     ddc:	9e bf       	out	0x3e, r25	; 62
     dde:	0f be       	out	0x3f, r0	; 63
     de0:	8d bf       	out	0x3d, r24	; 61
					printf("\t\t\t\t\tentryIndex = %d, exitIndex = %d\n", entryIndex, exitIndex) ; fflush(stdout) ;
     de2:	8c 81       	ldd	r24, Y+4	; 0x04
     de4:	48 2f       	mov	r20, r24
     de6:	50 e0       	ldi	r21, 0x00	; 0
     de8:	8b 81       	ldd	r24, Y+3	; 0x03
     dea:	28 2f       	mov	r18, r24
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	00 d0       	rcall	.+0      	; 0xdf0 <iterateStateMachine+0x76e>
     df0:	00 d0       	rcall	.+0      	; 0xdf2 <iterateStateMachine+0x770>
     df2:	00 d0       	rcall	.+0      	; 0xdf4 <iterateStateMachine+0x772>
     df4:	ed b7       	in	r30, 0x3d	; 61
     df6:	fe b7       	in	r31, 0x3e	; 62
     df8:	31 96       	adiw	r30, 0x01	; 1
     dfa:	86 e2       	ldi	r24, 0x26	; 38
     dfc:	93 e0       	ldi	r25, 0x03	; 3
     dfe:	91 83       	std	Z+1, r25	; 0x01
     e00:	80 83       	st	Z, r24
     e02:	53 83       	std	Z+3, r21	; 0x03
     e04:	42 83       	std	Z+2, r20	; 0x02
     e06:	35 83       	std	Z+5, r19	; 0x05
     e08:	24 83       	std	Z+4, r18	; 0x04
     e0a:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <printf>
     e0e:	8d b7       	in	r24, 0x3d	; 61
     e10:	9e b7       	in	r25, 0x3e	; 62
     e12:	06 96       	adiw	r24, 0x06	; 6
     e14:	0f b6       	in	r0, 0x3f	; 63
     e16:	f8 94       	cli
     e18:	9e bf       	out	0x3e, r25	; 62
     e1a:	0f be       	out	0x3f, r0	; 63
     e1c:	8d bf       	out	0x3d, r24	; 61
     e1e:	80 91 84 06 	lds	r24, 0x0684
     e22:	90 91 85 06 	lds	r25, 0x0685
     e26:	0e 94 b2 07 	call	0xf64	; 0xf64 <fflush>

					sourceIndex	= exitIndex + 1 ;
     e2a:	8b 81       	ldd	r24, Y+3	; 0x03
     e2c:	8f 5f       	subi	r24, 0xFF	; 255
     e2e:	88 87       	std	Y+8, r24	; 0x08
					exitIndex	= 0 ;
     e30:	1b 82       	std	Y+3, r1	; 0x03
     e32:	28 c0       	rjmp	.+80     	; 0xe84 <iterateStateMachine+0x802>

					while(exitIndex < sourceIndex)
					{
						printf("\t\t\t\t") ;
     e34:	00 d0       	rcall	.+0      	; 0xe36 <iterateStateMachine+0x7b4>
     e36:	ed b7       	in	r30, 0x3d	; 61
     e38:	fe b7       	in	r31, 0x3e	; 62
     e3a:	31 96       	adiw	r30, 0x01	; 1
     e3c:	8e e7       	ldi	r24, 0x7E	; 126
     e3e:	92 e0       	ldi	r25, 0x02	; 2
     e40:	91 83       	std	Z+1, r25	; 0x01
     e42:	80 83       	st	Z, r24
     e44:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <printf>
     e48:	0f 90       	pop	r0
     e4a:	0f 90       	pop	r0

						callStateHandler(sm, sourceHierarchy[exitIndex], &exitEvent) ;
     e4c:	8b 81       	ldd	r24, Y+3	; 0x03
     e4e:	88 2f       	mov	r24, r24
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	9c 01       	movw	r18, r24
     e54:	22 0f       	add	r18, r18
     e56:	33 1f       	adc	r19, r19
     e58:	ce 01       	movw	r24, r28
     e5a:	01 96       	adiw	r24, 0x01	; 1
     e5c:	82 0f       	add	r24, r18
     e5e:	93 1f       	adc	r25, r19
     e60:	fc 01       	movw	r30, r24
     e62:	71 96       	adiw	r30, 0x11	; 17
     e64:	40 81       	ld	r20, Z
     e66:	51 81       	ldd	r21, Z+1	; 0x01
     e68:	fe 01       	movw	r30, r28
     e6a:	ee 5a       	subi	r30, 0xAE	; 174
     e6c:	ff 4f       	sbci	r31, 0xFF	; 255
     e6e:	80 81       	ld	r24, Z
     e70:	91 81       	ldd	r25, Z+1	; 0x01
     e72:	22 e4       	ldi	r18, 0x42	; 66
     e74:	31 e0       	ldi	r19, 0x01	; 1
     e76:	ba 01       	movw	r22, r20
     e78:	a9 01       	movw	r20, r18
     e7a:	0e 94 a7 02 	call	0x54e	; 0x54e <callStateHandler>

						exitIndex++ ;
     e7e:	8b 81       	ldd	r24, Y+3	; 0x03
     e80:	8f 5f       	subi	r24, 0xFF	; 255
     e82:	8b 83       	std	Y+3, r24	; 0x03
					printf("\t\t\t\t\tentryIndex = %d, exitIndex = %d\n", entryIndex, exitIndex) ; fflush(stdout) ;

					sourceIndex	= exitIndex + 1 ;
					exitIndex	= 0 ;

					while(exitIndex < sourceIndex)
     e84:	9b 81       	ldd	r25, Y+3	; 0x03
     e86:	88 85       	ldd	r24, Y+8	; 0x08
     e88:	98 17       	cp	r25, r24
     e8a:	a0 f2       	brcs	.-88     	; 0xe34 <iterateStateMachine+0x7b2>
						callStateHandler(sm, sourceHierarchy[exitIndex], &exitEvent) ;

						exitIndex++ ;
					}

					targetIndex = entryIndex + 1 ;
     e8c:	8c 81       	ldd	r24, Y+4	; 0x04
     e8e:	8f 5f       	subi	r24, 0xFF	; 255
     e90:	8f 83       	std	Y+7, r24	; 0x07
     e92:	25 c0       	rjmp	.+74     	; 0xede <iterateStateMachine+0x85c>

					while(targetIndex--)
					{
						printf("\t\t\t\t") ;
     e94:	00 d0       	rcall	.+0      	; 0xe96 <iterateStateMachine+0x814>
     e96:	ed b7       	in	r30, 0x3d	; 61
     e98:	fe b7       	in	r31, 0x3e	; 62
     e9a:	31 96       	adiw	r30, 0x01	; 1
     e9c:	8e e7       	ldi	r24, 0x7E	; 126
     e9e:	92 e0       	ldi	r25, 0x02	; 2
     ea0:	91 83       	std	Z+1, r25	; 0x01
     ea2:	80 83       	st	Z, r24
     ea4:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <printf>
     ea8:	0f 90       	pop	r0
     eaa:	0f 90       	pop	r0
						callStateHandler(sm, targetHierarchy[targetIndex], &enterEvent) ;
     eac:	8f 81       	ldd	r24, Y+7	; 0x07
     eae:	88 2f       	mov	r24, r24
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	9c 01       	movw	r18, r24
     eb4:	22 0f       	add	r18, r18
     eb6:	33 1f       	adc	r19, r19
     eb8:	ce 01       	movw	r24, r28
     eba:	01 96       	adiw	r24, 0x01	; 1
     ebc:	82 0f       	add	r24, r18
     ebe:	93 1f       	adc	r25, r19
     ec0:	fc 01       	movw	r30, r24
     ec2:	f1 96       	adiw	r30, 0x31	; 49
     ec4:	40 81       	ld	r20, Z
     ec6:	51 81       	ldd	r21, Z+1	; 0x01
     ec8:	fe 01       	movw	r30, r28
     eca:	ee 5a       	subi	r30, 0xAE	; 174
     ecc:	ff 4f       	sbci	r31, 0xFF	; 255
     ece:	80 81       	ld	r24, Z
     ed0:	91 81       	ldd	r25, Z+1	; 0x01
     ed2:	23 e4       	ldi	r18, 0x43	; 67
     ed4:	31 e0       	ldi	r19, 0x01	; 1
     ed6:	ba 01       	movw	r22, r20
     ed8:	a9 01       	movw	r20, r18
     eda:	0e 94 a7 02 	call	0x54e	; 0x54e <callStateHandler>
						exitIndex++ ;
					}

					targetIndex = entryIndex + 1 ;

					while(targetIndex--)
     ede:	9f 81       	ldd	r25, Y+7	; 0x07
     ee0:	6b 96       	adiw	r28, 0x1b	; 27
     ee2:	9f af       	std	Y+63, r25	; 0x3f
     ee4:	6b 97       	sbiw	r28, 0x1b	; 27
     ee6:	6b 96       	adiw	r28, 0x1b	; 27
     ee8:	8f ad       	ldd	r24, Y+63	; 0x3f
     eea:	6b 97       	sbiw	r28, 0x1b	; 27
     eec:	88 23       	and	r24, r24
     eee:	21 f0       	breq	.+8      	; 0xef8 <iterateStateMachine+0x876>
     ef0:	91 e0       	ldi	r25, 0x01	; 1
     ef2:	6b 96       	adiw	r28, 0x1b	; 27
     ef4:	9f af       	std	Y+63, r25	; 0x3f
     ef6:	6b 97       	sbiw	r28, 0x1b	; 27
     ef8:	6b 96       	adiw	r28, 0x1b	; 27
     efa:	8f ad       	ldd	r24, Y+63	; 0x3f
     efc:	6b 97       	sbiw	r28, 0x1b	; 27
     efe:	9f 81       	ldd	r25, Y+7	; 0x07
     f00:	91 50       	subi	r25, 0x01	; 1
     f02:	9f 83       	std	Y+7, r25	; 0x07
     f04:	88 23       	and	r24, r24
     f06:	31 f6       	brne	.-116    	; 0xe94 <iterateStateMachine+0x812>
					{
						printf("\t\t\t\t") ;
						callStateHandler(sm, targetHierarchy[targetIndex], &enterEvent) ;
					}

					sm->currentState = target ;
     f08:	fe 01       	movw	r30, r28
     f0a:	ee 5a       	subi	r30, 0xAE	; 174
     f0c:	ff 4f       	sbci	r31, 0xFF	; 255
     f0e:	01 90       	ld	r0, Z+
     f10:	f0 81       	ld	r31, Z
     f12:	e0 2d       	mov	r30, r0
     f14:	89 85       	ldd	r24, Y+9	; 0x09
     f16:	9a 85       	ldd	r25, Y+10	; 0x0a
     f18:	96 83       	std	Z+6, r25	; 0x06
     f1a:	85 83       	std	Z+5, r24	; 0x05

			// Now insert an initial transition event that will cause the
			// target state to execute any initial transactions it might
			// have so the next iteration through this loop will catch it.

			NormalInsert(&sm->eventQueue, &initialTransitionEvent) ;
     f1c:	fe 01       	movw	r30, r28
     f1e:	ee 5a       	subi	r30, 0xAE	; 174
     f20:	ff 4f       	sbci	r31, 0xFF	; 255
     f22:	80 81       	ld	r24, Z
     f24:	91 81       	ldd	r25, Z+1	; 0x01
     f26:	09 96       	adiw	r24, 0x09	; 9
     f28:	24 e4       	ldi	r18, 0x44	; 68
     f2a:	31 e0       	ldi	r19, 0x01	; 1
     f2c:	b9 01       	movw	r22, r18
     f2e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <NormalInsert>
		sm->stateMachineInitialized	= true ;
	}

	// Any pending events?

	while(!isEmpty(&sm->eventQueue))
     f32:	fe 01       	movw	r30, r28
     f34:	ee 5a       	subi	r30, 0xAE	; 174
     f36:	ff 4f       	sbci	r31, 0xFF	; 255
     f38:	80 81       	ld	r24, Z
     f3a:	91 81       	ldd	r25, Z+1	; 0x01
     f3c:	09 96       	adiw	r24, 0x09	; 9
     f3e:	0e 94 88 00 	call	0x110	; 0x110 <isEmpty>
     f42:	88 23       	and	r24, r24
     f44:	09 f4       	brne	.+2      	; 0xf48 <iterateStateMachine+0x8c6>
     f46:	03 cc       	rjmp	.-2042   	; 0x74e <iterateStateMachine+0xcc>

			NormalInsert(&sm->eventQueue, &initialTransitionEvent) ;
		}
	}

	printf("\t\tEvent queue empty.\n") ;
     f48:	8a e8       	ldi	r24, 0x8A	; 138
     f4a:	93 e0       	ldi	r25, 0x03	; 3
     f4c:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <puts>
			outputStateMachineDebugData_G4(sm) ;
		}
	} while(sm->immediateChangePending) ;
//	STATE_MACHINE_ITERATOR_SKIN_POST(	STATE_MACHINE_NAME)() ;
#endif
}
     f50:	c6 5a       	subi	r28, 0xA6	; 166
     f52:	df 4f       	sbci	r29, 0xFF	; 255
     f54:	0f b6       	in	r0, 0x3f	; 63
     f56:	f8 94       	cli
     f58:	de bf       	out	0x3e, r29	; 62
     f5a:	0f be       	out	0x3f, r0	; 63
     f5c:	cd bf       	out	0x3d, r28	; 61
     f5e:	cf 91       	pop	r28
     f60:	df 91       	pop	r29
     f62:	08 95       	ret

00000f64 <fflush>:
   any buffering.
 */
extern int	fflush(FILE *stream);
#else
static __inline__ int fflush(FILE *stream __attribute__((unused)))
{
     f64:	df 93       	push	r29
     f66:	cf 93       	push	r28
     f68:	00 d0       	rcall	.+0      	; 0xf6a <fflush+0x6>
     f6a:	cd b7       	in	r28, 0x3d	; 61
     f6c:	de b7       	in	r29, 0x3e	; 62
     f6e:	9a 83       	std	Y+2, r25	; 0x02
     f70:	89 83       	std	Y+1, r24	; 0x01
	return 0;
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	90 e0       	ldi	r25, 0x00	; 0
}
     f76:	0f 90       	pop	r0
     f78:	0f 90       	pop	r0
     f7a:	cf 91       	pop	r28
     f7c:	df 91       	pop	r29
     f7e:	08 95       	ret

00000f80 <main>:
 *  Created on: Dec 2, 2009
 *      Author: jlewis
 */

int main()
{
     f80:	df 93       	push	r29
     f82:	cf 93       	push	r28
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
	return 0 ;
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	90 e0       	ldi	r25, 0x00	; 0
}
     f8c:	cf 91       	pop	r28
     f8e:	df 91       	pop	r29
     f90:	08 95       	ret

00000f92 <createInstanceOf_calculator>:
			ADD_SUB_STATE(operand2, frac2) ;
END_STATE_MACHINE_DEFINITION() ;


CREATE_STATE_MACHINE_INSTANCE()
{
     f92:	df 93       	push	r29
     f94:	cf 93       	push	r28
     f96:	cd b7       	in	r28, 0x3d	; 61
     f98:	de b7       	in	r29, 0x3e	; 62
	static event_t*	eventQueue[configEVENT_QUEUE_DEPTH] ;

	initializeEventQueue(&calculatorMachine.parent.eventQueue, &eventQueue[0], configEVENT_QUEUE_DEPTH) ;
     f9a:	89 ec       	ldi	r24, 0xC9	; 201
     f9c:	93 e0       	ldi	r25, 0x03	; 3
     f9e:	2a ed       	ldi	r18, 0xDA	; 218
     fa0:	35 e0       	ldi	r19, 0x05	; 5
     fa2:	b9 01       	movw	r22, r18
     fa4:	40 e1       	ldi	r20, 0x10	; 16
     fa6:	0e 94 49 00 	call	0x92	; 0x92 <initializeEventQueue>

	return (stateMachine_t*)&calculatorMachine ;
     faa:	80 ec       	ldi	r24, 0xC0	; 192
     fac:	93 e0       	ldi	r25, 0x03	; 3
}
     fae:	cf 91       	pop	r28
     fb0:	df 91       	pop	r29
     fb2:	08 95       	ret

00000fb4 <destroyInstanceOf_calculator>:


DESTROY_STATE_MACHINE_INSTANCE()
{
     fb4:	df 93       	push	r29
     fb6:	cf 93       	push	r28
     fb8:	00 d0       	rcall	.+0      	; 0xfba <destroyInstanceOf_calculator+0x6>
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
     fbe:	9a 83       	std	Y+2, r25	; 0x02
     fc0:	89 83       	std	Y+1, r24	; 0x01
	// Nothing to do here since I am only working with a static instance
}
     fc2:	0f 90       	pop	r0
     fc4:	0f 90       	pop	r0
     fc6:	cf 91       	pop	r28
     fc8:	df 91       	pop	r29
     fca:	08 95       	ret

00000fcc <calculator_TOP_handler>:


DEFINE_TOP_STATE()
     fcc:	df 93       	push	r29
     fce:	cf 93       	push	r28
     fd0:	00 d0       	rcall	.+0      	; 0xfd2 <calculator_TOP_handler+0x6>
     fd2:	00 d0       	rcall	.+0      	; 0xfd4 <calculator_TOP_handler+0x8>
     fd4:	0f 92       	push	r0
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62
     fda:	9a 83       	std	Y+2, r25	; 0x02
     fdc:	89 83       	std	Y+1, r24	; 0x01
     fde:	7c 83       	std	Y+4, r23	; 0x04
     fe0:	6b 83       	std	Y+3, r22	; 0x03
{
	INITIAL_TRANSITION(TO(begin),																	NO_ACTION) ;
     fe2:	eb 81       	ldd	r30, Y+3	; 0x03
     fe4:	fc 81       	ldd	r31, Y+4	; 0x04
     fe6:	80 81       	ld	r24, Z
     fe8:	82 30       	cpi	r24, 0x02	; 2
     fea:	49 f4       	brne	.+18     	; 0xffe <calculator_TOP_handler+0x32>
     fec:	e9 81       	ldd	r30, Y+1	; 0x01
     fee:	fa 81       	ldd	r31, Y+2	; 0x02
     ff0:	8b e2       	ldi	r24, 0x2B	; 43
     ff2:	94 e0       	ldi	r25, 0x04	; 4
     ff4:	90 87       	std	Z+8, r25	; 0x08
     ff6:	87 83       	std	Z+7, r24	; 0x07
     ff8:	82 e0       	ldi	r24, 0x02	; 2
     ffa:	8d 83       	std	Y+5, r24	; 0x05
     ffc:	01 c0       	rjmp	.+2      	; 0x1000 <calculator_TOP_handler+0x34>
}
END_DEFINE_STATE()
     ffe:	1d 82       	std	Y+5, r1	; 0x05
    1000:	8d 81       	ldd	r24, Y+5	; 0x05
    1002:	0f 90       	pop	r0
    1004:	0f 90       	pop	r0
    1006:	0f 90       	pop	r0
    1008:	0f 90       	pop	r0
    100a:	0f 90       	pop	r0
    100c:	cf 91       	pop	r28
    100e:	df 91       	pop	r29
    1010:	08 95       	ret

00001012 <calculator_on_handler>:


DEFINE_STATE(on)
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	00 d0       	rcall	.+0      	; 0x1018 <calculator_on_handler+0x6>
    1018:	00 d0       	rcall	.+0      	; 0x101a <calculator_on_handler+0x8>
    101a:	0f 92       	push	r0
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
    1020:	9a 83       	std	Y+2, r25	; 0x02
    1022:	89 83       	std	Y+1, r24	; 0x01
    1024:	7c 83       	std	Y+4, r23	; 0x04
    1026:	6b 83       	std	Y+3, r22	; 0x03
{
	INITIAL_TRANSITION(TO(ready),																NO_ACTION) ;
    1028:	eb 81       	ldd	r30, Y+3	; 0x03
    102a:	fc 81       	ldd	r31, Y+4	; 0x04
    102c:	80 81       	ld	r24, Z
    102e:	82 30       	cpi	r24, 0x02	; 2
    1030:	49 f4       	brne	.+18     	; 0x1044 <calculator_on_handler+0x32>
    1032:	e9 81       	ldd	r30, Y+1	; 0x01
    1034:	fa 81       	ldd	r31, Y+2	; 0x02
    1036:	8a ef       	ldi	r24, 0xFA	; 250
    1038:	93 e0       	ldi	r25, 0x03	; 3
    103a:	90 87       	std	Z+8, r25	; 0x08
    103c:	87 83       	std	Z+7, r24	; 0x07
    103e:	82 e0       	ldi	r24, 0x02	; 2
    1040:	8d 83       	std	Y+5, r24	; 0x05
    1042:	1d c0       	rjmp	.+58     	; 0x107e <calculator_on_handler+0x6c>

	TRANSITION_ON(CLEAR,		UNCONDITIONALLY,						TO(on),					NO_ACTION) ;
    1044:	eb 81       	ldd	r30, Y+3	; 0x03
    1046:	fc 81       	ldd	r31, Y+4	; 0x04
    1048:	80 81       	ld	r24, Z
    104a:	84 30       	cpi	r24, 0x04	; 4
    104c:	49 f4       	brne	.+18     	; 0x1060 <calculator_on_handler+0x4e>
    104e:	e9 81       	ldd	r30, Y+1	; 0x01
    1050:	fa 81       	ldd	r31, Y+2	; 0x02
    1052:	82 ee       	ldi	r24, 0xE2	; 226
    1054:	93 e0       	ldi	r25, 0x03	; 3
    1056:	90 87       	std	Z+8, r25	; 0x08
    1058:	87 83       	std	Z+7, r24	; 0x07
    105a:	82 e0       	ldi	r24, 0x02	; 2
    105c:	8d 83       	std	Y+5, r24	; 0x05
    105e:	0f c0       	rjmp	.+30     	; 0x107e <calculator_on_handler+0x6c>
	TRANSITION_ON(OFF,			UNCONDITIONALLY,						TO(STATE_MACHINE_EXIT),	NO_ACTION) ;
    1060:	eb 81       	ldd	r30, Y+3	; 0x03
    1062:	fc 81       	ldd	r31, Y+4	; 0x04
    1064:	80 81       	ld	r24, Z
    1066:	8b 30       	cpi	r24, 0x0B	; 11
    1068:	49 f4       	brne	.+18     	; 0x107c <calculator_on_handler+0x6a>
    106a:	e9 81       	ldd	r30, Y+1	; 0x01
    106c:	fa 81       	ldd	r31, Y+2	; 0x02
    106e:	8e ea       	ldi	r24, 0xAE	; 174
    1070:	93 e0       	ldi	r25, 0x03	; 3
    1072:	90 87       	std	Z+8, r25	; 0x08
    1074:	87 83       	std	Z+7, r24	; 0x07
    1076:	82 e0       	ldi	r24, 0x02	; 2
    1078:	8d 83       	std	Y+5, r24	; 0x05
    107a:	01 c0       	rjmp	.+2      	; 0x107e <calculator_on_handler+0x6c>
}
END_DEFINE_STATE()
    107c:	1d 82       	std	Y+5, r1	; 0x05
    107e:	8d 81       	ldd	r24, Y+5	; 0x05
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <calculator_ready_handler>:


DEFINE_STATE(ready)
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	00 d0       	rcall	.+0      	; 0x1096 <calculator_ready_handler+0x6>
    1096:	00 d0       	rcall	.+0      	; 0x1098 <calculator_ready_handler+0x8>
    1098:	0f 92       	push	r0
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
    109e:	9a 83       	std	Y+2, r25	; 0x02
    10a0:	89 83       	std	Y+1, r24	; 0x01
    10a2:	7c 83       	std	Y+4, r23	; 0x04
    10a4:	6b 83       	std	Y+3, r22	; 0x03
{
	INITIAL_TRANSITION(TO(zero1),																NO_ACTION) ;
    10a6:	eb 81       	ldd	r30, Y+3	; 0x03
    10a8:	fc 81       	ldd	r31, Y+4	; 0x04
    10aa:	80 81       	ld	r24, Z
    10ac:	82 30       	cpi	r24, 0x02	; 2
    10ae:	49 f4       	brne	.+18     	; 0x10c2 <calculator_ready_handler+0x32>
    10b0:	e9 81       	ldd	r30, Y+1	; 0x01
    10b2:	fa 81       	ldd	r31, Y+2	; 0x02
    10b4:	89 e7       	ldi	r24, 0x79	; 121
    10b6:	94 e0       	ldi	r25, 0x04	; 4
    10b8:	90 87       	std	Z+8, r25	; 0x08
    10ba:	87 83       	std	Z+7, r24	; 0x07
    10bc:	82 e0       	ldi	r24, 0x02	; 2
    10be:	8d 83       	std	Y+5, r24	; 0x05
    10c0:	0f c0       	rjmp	.+30     	; 0x10e0 <calculator_ready_handler+0x50>

	TRANSITION_ON(OPERATION,	UNCONDITIONALLY,						TO(opEntered),			NO_ACTION) ;
    10c2:	eb 81       	ldd	r30, Y+3	; 0x03
    10c4:	fc 81       	ldd	r31, Y+4	; 0x04
    10c6:	80 81       	ld	r24, Z
    10c8:	89 30       	cpi	r24, 0x09	; 9
    10ca:	49 f4       	brne	.+18     	; 0x10de <calculator_ready_handler+0x4e>
    10cc:	e9 81       	ldd	r30, Y+1	; 0x01
    10ce:	fa 81       	ldd	r31, Y+2	; 0x02
    10d0:	8c ed       	ldi	r24, 0xDC	; 220
    10d2:	94 e0       	ldi	r25, 0x04	; 4
    10d4:	90 87       	std	Z+8, r25	; 0x08
    10d6:	87 83       	std	Z+7, r24	; 0x07
    10d8:	82 e0       	ldi	r24, 0x02	; 2
    10da:	8d 83       	std	Y+5, r24	; 0x05
    10dc:	01 c0       	rjmp	.+2      	; 0x10e0 <calculator_ready_handler+0x50>
}
END_DEFINE_STATE()
    10de:	1d 82       	std	Y+5, r1	; 0x05
    10e0:	8d 81       	ldd	r24, Y+5	; 0x05
    10e2:	0f 90       	pop	r0
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	0f 90       	pop	r0
    10ea:	0f 90       	pop	r0
    10ec:	cf 91       	pop	r28
    10ee:	df 91       	pop	r29
    10f0:	08 95       	ret

000010f2 <calculator_result_handler>:


DEFINE_STATE(result)
    10f2:	df 93       	push	r29
    10f4:	cf 93       	push	r28
    10f6:	00 d0       	rcall	.+0      	; 0x10f8 <calculator_result_handler+0x6>
    10f8:	00 d0       	rcall	.+0      	; 0x10fa <calculator_result_handler+0x8>
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
    10fe:	9a 83       	std	Y+2, r25	; 0x02
    1100:	89 83       	std	Y+1, r24	; 0x01
    1102:	7c 83       	std	Y+4, r23	; 0x04
    1104:	6b 83       	std	Y+3, r22	; 0x03
{
}
END_DEFINE_STATE()
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	0f 90       	pop	r0
    110a:	0f 90       	pop	r0
    110c:	0f 90       	pop	r0
    110e:	0f 90       	pop	r0
    1110:	cf 91       	pop	r28
    1112:	df 91       	pop	r29
    1114:	08 95       	ret

00001116 <calculator_begin_handler>:


DEFINE_STATE(begin)
    1116:	df 93       	push	r29
    1118:	cf 93       	push	r28
    111a:	00 d0       	rcall	.+0      	; 0x111c <calculator_begin_handler+0x6>
    111c:	00 d0       	rcall	.+0      	; 0x111e <calculator_begin_handler+0x8>
    111e:	0f 92       	push	r0
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
    1124:	9a 83       	std	Y+2, r25	; 0x02
    1126:	89 83       	std	Y+1, r24	; 0x01
    1128:	7c 83       	std	Y+4, r23	; 0x04
    112a:	6b 83       	std	Y+3, r22	; 0x03
{
	// This will cause a loop in the state machine, but for testing purposes, it tests a couple of cases
	INITIAL_TRANSITION(TO(on),																	NO_ACTION) ;
    112c:	eb 81       	ldd	r30, Y+3	; 0x03
    112e:	fc 81       	ldd	r31, Y+4	; 0x04
    1130:	80 81       	ld	r24, Z
    1132:	82 30       	cpi	r24, 0x02	; 2
    1134:	49 f4       	brne	.+18     	; 0x1148 <calculator_begin_handler+0x32>
    1136:	e9 81       	ldd	r30, Y+1	; 0x01
    1138:	fa 81       	ldd	r31, Y+2	; 0x02
    113a:	82 ee       	ldi	r24, 0xE2	; 226
    113c:	93 e0       	ldi	r25, 0x03	; 3
    113e:	90 87       	std	Z+8, r25	; 0x08
    1140:	87 83       	std	Z+7, r24	; 0x07
    1142:	82 e0       	ldi	r24, 0x02	; 2
    1144:	8d 83       	std	Y+5, r24	; 0x05
    1146:	3e c0       	rjmp	.+124    	; 0x11c4 <calculator_begin_handler+0xae>

	TRANSITION_ON(OPERATION,	IF(EVENT_IS(keyEvent_t)->key == '-'),	TO(negated1),			NO_ACTION) ;
    1148:	eb 81       	ldd	r30, Y+3	; 0x03
    114a:	fc 81       	ldd	r31, Y+4	; 0x04
    114c:	80 81       	ld	r24, Z
    114e:	89 30       	cpi	r24, 0x09	; 9
    1150:	71 f4       	brne	.+28     	; 0x116e <calculator_begin_handler+0x58>
    1152:	eb 81       	ldd	r30, Y+3	; 0x03
    1154:	fc 81       	ldd	r31, Y+4	; 0x04
    1156:	81 81       	ldd	r24, Z+1	; 0x01
    1158:	8d 32       	cpi	r24, 0x2D	; 45
    115a:	49 f4       	brne	.+18     	; 0x116e <calculator_begin_handler+0x58>
    115c:	e9 81       	ldd	r30, Y+1	; 0x01
    115e:	fa 81       	ldd	r31, Y+2	; 0x02
    1160:	86 e4       	ldi	r24, 0x46	; 70
    1162:	94 e0       	ldi	r25, 0x04	; 4
    1164:	90 87       	std	Z+8, r25	; 0x08
    1166:	87 83       	std	Z+7, r24	; 0x07
    1168:	82 e0       	ldi	r24, 0x02	; 2
    116a:	8d 83       	std	Y+5, r24	; 0x05
    116c:	2b c0       	rjmp	.+86     	; 0x11c4 <calculator_begin_handler+0xae>
	TRANSITION_ON(DIGIT_0,		UNCONDITIONALLY,						TO(zero1),				NO_ACTION) ;
    116e:	eb 81       	ldd	r30, Y+3	; 0x03
    1170:	fc 81       	ldd	r31, Y+4	; 0x04
    1172:	80 81       	ld	r24, Z
    1174:	86 30       	cpi	r24, 0x06	; 6
    1176:	49 f4       	brne	.+18     	; 0x118a <calculator_begin_handler+0x74>
    1178:	e9 81       	ldd	r30, Y+1	; 0x01
    117a:	fa 81       	ldd	r31, Y+2	; 0x02
    117c:	89 e7       	ldi	r24, 0x79	; 121
    117e:	94 e0       	ldi	r25, 0x04	; 4
    1180:	90 87       	std	Z+8, r25	; 0x08
    1182:	87 83       	std	Z+7, r24	; 0x07
    1184:	82 e0       	ldi	r24, 0x02	; 2
    1186:	8d 83       	std	Y+5, r24	; 0x05
    1188:	1d c0       	rjmp	.+58     	; 0x11c4 <calculator_begin_handler+0xae>
	TRANSITION_ON(DIGIT_1_9,	UNCONDITIONALLY,						TO(int1),				NO_ACTION) ;
    118a:	eb 81       	ldd	r30, Y+3	; 0x03
    118c:	fc 81       	ldd	r31, Y+4	; 0x04
    118e:	80 81       	ld	r24, Z
    1190:	87 30       	cpi	r24, 0x07	; 7
    1192:	49 f4       	brne	.+18     	; 0x11a6 <calculator_begin_handler+0x90>
    1194:	e9 81       	ldd	r30, Y+1	; 0x01
    1196:	fa 81       	ldd	r31, Y+2	; 0x02
    1198:	80 e9       	ldi	r24, 0x90	; 144
    119a:	94 e0       	ldi	r25, 0x04	; 4
    119c:	90 87       	std	Z+8, r25	; 0x08
    119e:	87 83       	std	Z+7, r24	; 0x07
    11a0:	82 e0       	ldi	r24, 0x02	; 2
    11a2:	8d 83       	std	Y+5, r24	; 0x05
    11a4:	0f c0       	rjmp	.+30     	; 0x11c4 <calculator_begin_handler+0xae>
	TRANSITION_ON(POINT,		UNCONDITIONALLY,						TO(frac1),				NO_ACTION) ;
    11a6:	eb 81       	ldd	r30, Y+3	; 0x03
    11a8:	fc 81       	ldd	r31, Y+4	; 0x04
    11aa:	80 81       	ld	r24, Z
    11ac:	88 30       	cpi	r24, 0x08	; 8
    11ae:	49 f4       	brne	.+18     	; 0x11c2 <calculator_begin_handler+0xac>
    11b0:	e9 81       	ldd	r30, Y+1	; 0x01
    11b2:	fa 81       	ldd	r31, Y+2	; 0x02
    11b4:	88 ea       	ldi	r24, 0xA8	; 168
    11b6:	94 e0       	ldi	r25, 0x04	; 4
    11b8:	90 87       	std	Z+8, r25	; 0x08
    11ba:	87 83       	std	Z+7, r24	; 0x07
    11bc:	82 e0       	ldi	r24, 0x02	; 2
    11be:	8d 83       	std	Y+5, r24	; 0x05
    11c0:	01 c0       	rjmp	.+2      	; 0x11c4 <calculator_begin_handler+0xae>
}
END_DEFINE_STATE()
    11c2:	1d 82       	std	Y+5, r1	; 0x05
    11c4:	8d 81       	ldd	r24, Y+5	; 0x05
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	cf 91       	pop	r28
    11d2:	df 91       	pop	r29
    11d4:	08 95       	ret

000011d6 <calculator_negated1_handler>:


DEFINE_STATE(negated1)
    11d6:	df 93       	push	r29
    11d8:	cf 93       	push	r28
    11da:	00 d0       	rcall	.+0      	; 0x11dc <calculator_negated1_handler+0x6>
    11dc:	00 d0       	rcall	.+0      	; 0x11de <calculator_negated1_handler+0x8>
    11de:	0f 92       	push	r0
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	9a 83       	std	Y+2, r25	; 0x02
    11e6:	89 83       	std	Y+1, r24	; 0x01
    11e8:	7c 83       	std	Y+4, r23	; 0x04
    11ea:	6b 83       	std	Y+3, r22	; 0x03
{
	TRANSITION_ON(CLEAR_ENTRY,	UNCONDITIONALLY,						TO(begin),				NO_ACTION) ;
    11ec:	eb 81       	ldd	r30, Y+3	; 0x03
    11ee:	fc 81       	ldd	r31, Y+4	; 0x04
    11f0:	80 81       	ld	r24, Z
    11f2:	85 30       	cpi	r24, 0x05	; 5
    11f4:	49 f4       	brne	.+18     	; 0x1208 <calculator_negated1_handler+0x32>
    11f6:	e9 81       	ldd	r30, Y+1	; 0x01
    11f8:	fa 81       	ldd	r31, Y+2	; 0x02
    11fa:	8b e2       	ldi	r24, 0x2B	; 43
    11fc:	94 e0       	ldi	r25, 0x04	; 4
    11fe:	90 87       	std	Z+8, r25	; 0x08
    1200:	87 83       	std	Z+7, r24	; 0x07
    1202:	82 e0       	ldi	r24, 0x02	; 2
    1204:	8d 83       	std	Y+5, r24	; 0x05
    1206:	33 c0       	rjmp	.+102    	; 0x126e <calculator_negated1_handler+0x98>
	TRANSITION_ON(DIGIT_0,		UNCONDITIONALLY,						TO(zero1),				NO_ACTION) ;
    1208:	eb 81       	ldd	r30, Y+3	; 0x03
    120a:	fc 81       	ldd	r31, Y+4	; 0x04
    120c:	80 81       	ld	r24, Z
    120e:	86 30       	cpi	r24, 0x06	; 6
    1210:	49 f4       	brne	.+18     	; 0x1224 <calculator_negated1_handler+0x4e>
    1212:	e9 81       	ldd	r30, Y+1	; 0x01
    1214:	fa 81       	ldd	r31, Y+2	; 0x02
    1216:	89 e7       	ldi	r24, 0x79	; 121
    1218:	94 e0       	ldi	r25, 0x04	; 4
    121a:	90 87       	std	Z+8, r25	; 0x08
    121c:	87 83       	std	Z+7, r24	; 0x07
    121e:	82 e0       	ldi	r24, 0x02	; 2
    1220:	8d 83       	std	Y+5, r24	; 0x05
    1222:	25 c0       	rjmp	.+74     	; 0x126e <calculator_negated1_handler+0x98>
	TRANSITION_ON(DIGIT_1_9,	UNCONDITIONALLY,						TO(int1),				NO_ACTION) ;
    1224:	eb 81       	ldd	r30, Y+3	; 0x03
    1226:	fc 81       	ldd	r31, Y+4	; 0x04
    1228:	80 81       	ld	r24, Z
    122a:	87 30       	cpi	r24, 0x07	; 7
    122c:	49 f4       	brne	.+18     	; 0x1240 <calculator_negated1_handler+0x6a>
    122e:	e9 81       	ldd	r30, Y+1	; 0x01
    1230:	fa 81       	ldd	r31, Y+2	; 0x02
    1232:	80 e9       	ldi	r24, 0x90	; 144
    1234:	94 e0       	ldi	r25, 0x04	; 4
    1236:	90 87       	std	Z+8, r25	; 0x08
    1238:	87 83       	std	Z+7, r24	; 0x07
    123a:	82 e0       	ldi	r24, 0x02	; 2
    123c:	8d 83       	std	Y+5, r24	; 0x05
    123e:	17 c0       	rjmp	.+46     	; 0x126e <calculator_negated1_handler+0x98>
	TRANSITION_ON(POINT,		UNCONDITIONALLY,						TO(frac1),				NO_ACTION) ;
    1240:	eb 81       	ldd	r30, Y+3	; 0x03
    1242:	fc 81       	ldd	r31, Y+4	; 0x04
    1244:	80 81       	ld	r24, Z
    1246:	88 30       	cpi	r24, 0x08	; 8
    1248:	49 f4       	brne	.+18     	; 0x125c <calculator_negated1_handler+0x86>
    124a:	e9 81       	ldd	r30, Y+1	; 0x01
    124c:	fa 81       	ldd	r31, Y+2	; 0x02
    124e:	88 ea       	ldi	r24, 0xA8	; 168
    1250:	94 e0       	ldi	r25, 0x04	; 4
    1252:	90 87       	std	Z+8, r25	; 0x08
    1254:	87 83       	std	Z+7, r24	; 0x07
    1256:	82 e0       	ldi	r24, 0x02	; 2
    1258:	8d 83       	std	Y+5, r24	; 0x05
    125a:	09 c0       	rjmp	.+18     	; 0x126e <calculator_negated1_handler+0x98>
	CONSUME_EVENT_IF(OPERATION,	IF(EVENT_IS(keyEvent_t)->key == '-'),							NO_ACTION) ;
    125c:	eb 81       	ldd	r30, Y+3	; 0x03
    125e:	fc 81       	ldd	r31, Y+4	; 0x04
    1260:	81 81       	ldd	r24, Z+1	; 0x01
    1262:	8d 32       	cpi	r24, 0x2D	; 45
    1264:	19 f4       	brne	.+6      	; 0x126c <calculator_negated1_handler+0x96>
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	8d 83       	std	Y+5, r24	; 0x05
    126a:	01 c0       	rjmp	.+2      	; 0x126e <calculator_negated1_handler+0x98>
}
END_DEFINE_STATE()
    126c:	1d 82       	std	Y+5, r1	; 0x05
    126e:	8d 81       	ldd	r24, Y+5	; 0x05
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
    1276:	0f 90       	pop	r0
    1278:	0f 90       	pop	r0
    127a:	cf 91       	pop	r28
    127c:	df 91       	pop	r29
    127e:	08 95       	ret

00001280 <calculator_operand1_handler>:


DEFINE_STATE(operand1)
    1280:	df 93       	push	r29
    1282:	cf 93       	push	r28
    1284:	00 d0       	rcall	.+0      	; 0x1286 <calculator_operand1_handler+0x6>
    1286:	00 d0       	rcall	.+0      	; 0x1288 <calculator_operand1_handler+0x8>
    1288:	0f 92       	push	r0
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
    128e:	9a 83       	std	Y+2, r25	; 0x02
    1290:	89 83       	std	Y+1, r24	; 0x01
    1292:	7c 83       	std	Y+4, r23	; 0x04
    1294:	6b 83       	std	Y+3, r22	; 0x03
{
	TRANSITION_ON(CLEAR_ENTRY,	UNCONDITIONALLY,						TO(ready),				NO_ACTION) ;
    1296:	eb 81       	ldd	r30, Y+3	; 0x03
    1298:	fc 81       	ldd	r31, Y+4	; 0x04
    129a:	80 81       	ld	r24, Z
    129c:	85 30       	cpi	r24, 0x05	; 5
    129e:	49 f4       	brne	.+18     	; 0x12b2 <calculator_operand1_handler+0x32>
    12a0:	e9 81       	ldd	r30, Y+1	; 0x01
    12a2:	fa 81       	ldd	r31, Y+2	; 0x02
    12a4:	8a ef       	ldi	r24, 0xFA	; 250
    12a6:	93 e0       	ldi	r25, 0x03	; 3
    12a8:	90 87       	std	Z+8, r25	; 0x08
    12aa:	87 83       	std	Z+7, r24	; 0x07
    12ac:	82 e0       	ldi	r24, 0x02	; 2
    12ae:	8d 83       	std	Y+5, r24	; 0x05
    12b0:	0f c0       	rjmp	.+30     	; 0x12d0 <calculator_operand1_handler+0x50>
	TRANSITION_ON(OPERATION,	UNCONDITIONALLY,						TO(opEntered),			NO_ACTION) ;
    12b2:	eb 81       	ldd	r30, Y+3	; 0x03
    12b4:	fc 81       	ldd	r31, Y+4	; 0x04
    12b6:	80 81       	ld	r24, Z
    12b8:	89 30       	cpi	r24, 0x09	; 9
    12ba:	49 f4       	brne	.+18     	; 0x12ce <calculator_operand1_handler+0x4e>
    12bc:	e9 81       	ldd	r30, Y+1	; 0x01
    12be:	fa 81       	ldd	r31, Y+2	; 0x02
    12c0:	8c ed       	ldi	r24, 0xDC	; 220
    12c2:	94 e0       	ldi	r25, 0x04	; 4
    12c4:	90 87       	std	Z+8, r25	; 0x08
    12c6:	87 83       	std	Z+7, r24	; 0x07
    12c8:	82 e0       	ldi	r24, 0x02	; 2
    12ca:	8d 83       	std	Y+5, r24	; 0x05
    12cc:	01 c0       	rjmp	.+2      	; 0x12d0 <calculator_operand1_handler+0x50>
}
END_DEFINE_STATE()
    12ce:	1d 82       	std	Y+5, r1	; 0x05
    12d0:	8d 81       	ldd	r24, Y+5	; 0x05
    12d2:	0f 90       	pop	r0
    12d4:	0f 90       	pop	r0
    12d6:	0f 90       	pop	r0
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	cf 91       	pop	r28
    12de:	df 91       	pop	r29
    12e0:	08 95       	ret

000012e2 <calculator_zero1_handler>:


DEFINE_STATE(zero1)
    12e2:	df 93       	push	r29
    12e4:	cf 93       	push	r28
    12e6:	00 d0       	rcall	.+0      	; 0x12e8 <calculator_zero1_handler+0x6>
    12e8:	00 d0       	rcall	.+0      	; 0x12ea <calculator_zero1_handler+0x8>
    12ea:	0f 92       	push	r0
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
    12f0:	9a 83       	std	Y+2, r25	; 0x02
    12f2:	89 83       	std	Y+1, r24	; 0x01
    12f4:	7c 83       	std	Y+4, r23	; 0x04
    12f6:	6b 83       	std	Y+3, r22	; 0x03
{
	INITIAL_TRANSITION(TO(zero2),																NO_ACTION) ;
    12f8:	eb 81       	ldd	r30, Y+3	; 0x03
    12fa:	fc 81       	ldd	r31, Y+4	; 0x04
    12fc:	80 81       	ld	r24, Z
    12fe:	82 30       	cpi	r24, 0x02	; 2
    1300:	49 f4       	brne	.+18     	; 0x1314 <calculator_zero1_handler+0x32>
    1302:	e9 81       	ldd	r30, Y+1	; 0x01
    1304:	fa 81       	ldd	r31, Y+2	; 0x02
    1306:	8a e2       	ldi	r24, 0x2A	; 42
    1308:	95 e0       	ldi	r25, 0x05	; 5
    130a:	90 87       	std	Z+8, r25	; 0x08
    130c:	87 83       	std	Z+7, r24	; 0x07
    130e:	82 e0       	ldi	r24, 0x02	; 2
    1310:	8d 83       	std	Y+5, r24	; 0x05
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <calculator_zero1_handler+0x36>
	CONSUME_EVENT(DIGIT_0,																		NO_ACTION) ;
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	8d 83       	std	Y+5, r24	; 0x05
    1318:	8d 81       	ldd	r24, Y+5	; 0x05
	TRANSITION_ON(DIGIT_1_9,	UNCONDITIONALLY,						TO(int1),				NO_ACTION) ;
	TRANSITION_ON(POINT,		UNCONDITIONALLY,						TO(frac1),				NO_ACTION) ;
}
END_DEFINE_STATE()
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	cf 91       	pop	r28
    1326:	df 91       	pop	r29
    1328:	08 95       	ret

0000132a <calculator_int1_handler>:


DEFINE_STATE(int1)
    132a:	df 93       	push	r29
    132c:	cf 93       	push	r28
    132e:	00 d0       	rcall	.+0      	; 0x1330 <calculator_int1_handler+0x6>
    1330:	00 d0       	rcall	.+0      	; 0x1332 <calculator_int1_handler+0x8>
    1332:	0f 92       	push	r0
    1334:	cd b7       	in	r28, 0x3d	; 61
    1336:	de b7       	in	r29, 0x3e	; 62
    1338:	9a 83       	std	Y+2, r25	; 0x02
    133a:	89 83       	std	Y+1, r24	; 0x01
    133c:	7c 83       	std	Y+4, r23	; 0x04
    133e:	6b 83       	std	Y+3, r22	; 0x03
{
	TRANSITION_ON(POINT,		UNCONDITIONALLY,						TO(frac1),				NO_ACTION) ;
    1340:	eb 81       	ldd	r30, Y+3	; 0x03
    1342:	fc 81       	ldd	r31, Y+4	; 0x04
    1344:	80 81       	ld	r24, Z
    1346:	88 30       	cpi	r24, 0x08	; 8
    1348:	49 f4       	brne	.+18     	; 0x135c <calculator_int1_handler+0x32>
    134a:	e9 81       	ldd	r30, Y+1	; 0x01
    134c:	fa 81       	ldd	r31, Y+2	; 0x02
    134e:	88 ea       	ldi	r24, 0xA8	; 168
    1350:	94 e0       	ldi	r25, 0x04	; 4
    1352:	90 87       	std	Z+8, r25	; 0x08
    1354:	87 83       	std	Z+7, r24	; 0x07
    1356:	82 e0       	ldi	r24, 0x02	; 2
    1358:	8d 83       	std	Y+5, r24	; 0x05
    135a:	01 c0       	rjmp	.+2      	; 0x135e <calculator_int1_handler+0x34>
}
END_DEFINE_STATE()
    135c:	1d 82       	std	Y+5, r1	; 0x05
    135e:	8d 81       	ldd	r24, Y+5	; 0x05
    1360:	0f 90       	pop	r0
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	cf 91       	pop	r28
    136c:	df 91       	pop	r29
    136e:	08 95       	ret

00001370 <calculator_frac1_handler>:


DEFINE_STATE(frac1)
    1370:	df 93       	push	r29
    1372:	cf 93       	push	r28
    1374:	00 d0       	rcall	.+0      	; 0x1376 <calculator_frac1_handler+0x6>
    1376:	00 d0       	rcall	.+0      	; 0x1378 <calculator_frac1_handler+0x8>
    1378:	cd b7       	in	r28, 0x3d	; 61
    137a:	de b7       	in	r29, 0x3e	; 62
    137c:	9a 83       	std	Y+2, r25	; 0x02
    137e:	89 83       	std	Y+1, r24	; 0x01
    1380:	7c 83       	std	Y+4, r23	; 0x04
    1382:	6b 83       	std	Y+3, r22	; 0x03
{
	CONSUME_EVENT(POINT,																		NO_ACTION) ;
    1384:	81 e0       	ldi	r24, 0x01	; 1
}
END_DEFINE_STATE()
    1386:	0f 90       	pop	r0
    1388:	0f 90       	pop	r0
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	cf 91       	pop	r28
    1390:	df 91       	pop	r29
    1392:	08 95       	ret

00001394 <calculator_error_handler>:


DEFINE_STATE(error)
    1394:	df 93       	push	r29
    1396:	cf 93       	push	r28
    1398:	00 d0       	rcall	.+0      	; 0x139a <calculator_error_handler+0x6>
    139a:	00 d0       	rcall	.+0      	; 0x139c <calculator_error_handler+0x8>
    139c:	0f 92       	push	r0
    139e:	cd b7       	in	r28, 0x3d	; 61
    13a0:	de b7       	in	r29, 0x3e	; 62
    13a2:	9a 83       	std	Y+2, r25	; 0x02
    13a4:	89 83       	std	Y+1, r24	; 0x01
    13a6:	7c 83       	std	Y+4, r23	; 0x04
    13a8:	6b 83       	std	Y+3, r22	; 0x03
{
	INITIAL_TRANSITION(TO(frac2),																NO_ACTION) ;
    13aa:	eb 81       	ldd	r30, Y+3	; 0x03
    13ac:	fc 81       	ldd	r31, Y+4	; 0x04
    13ae:	80 81       	ld	r24, Z
    13b0:	82 30       	cpi	r24, 0x02	; 2
    13b2:	49 f4       	brne	.+18     	; 0x13c6 <calculator_error_handler+0x32>
    13b4:	e9 81       	ldd	r30, Y+1	; 0x01
    13b6:	fa 81       	ldd	r31, Y+2	; 0x02
    13b8:	89 e5       	ldi	r24, 0x59	; 89
    13ba:	95 e0       	ldi	r25, 0x05	; 5
    13bc:	90 87       	std	Z+8, r25	; 0x08
    13be:	87 83       	std	Z+7, r24	; 0x07
    13c0:	82 e0       	ldi	r24, 0x02	; 2
    13c2:	8d 83       	std	Y+5, r24	; 0x05
    13c4:	01 c0       	rjmp	.+2      	; 0x13c8 <calculator_error_handler+0x34>
}
END_DEFINE_STATE()
    13c6:	1d 82       	std	Y+5, r1	; 0x05
    13c8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	cf 91       	pop	r28
    13d6:	df 91       	pop	r29
    13d8:	08 95       	ret

000013da <calculator_opEntered_handler>:


DEFINE_STATE(opEntered)
    13da:	df 93       	push	r29
    13dc:	cf 93       	push	r28
    13de:	00 d0       	rcall	.+0      	; 0x13e0 <calculator_opEntered_handler+0x6>
    13e0:	00 d0       	rcall	.+0      	; 0x13e2 <calculator_opEntered_handler+0x8>
    13e2:	0f 92       	push	r0
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
    13e8:	9a 83       	std	Y+2, r25	; 0x02
    13ea:	89 83       	std	Y+1, r24	; 0x01
    13ec:	7c 83       	std	Y+4, r23	; 0x04
    13ee:	6b 83       	std	Y+3, r22	; 0x03
{
	TRANSITION_ON(OPERATION,	IF(EVENT_IS(keyEvent_t)->key == '-'),	TO(negated2),			NO_ACTION) ;
    13f0:	eb 81       	ldd	r30, Y+3	; 0x03
    13f2:	fc 81       	ldd	r31, Y+4	; 0x04
    13f4:	80 81       	ld	r24, Z
    13f6:	89 30       	cpi	r24, 0x09	; 9
    13f8:	71 f4       	brne	.+28     	; 0x1416 <calculator_opEntered_handler+0x3c>
    13fa:	eb 81       	ldd	r30, Y+3	; 0x03
    13fc:	fc 81       	ldd	r31, Y+4	; 0x04
    13fe:	81 81       	ldd	r24, Z+1	; 0x01
    1400:	8d 32       	cpi	r24, 0x2D	; 45
    1402:	49 f4       	brne	.+18     	; 0x1416 <calculator_opEntered_handler+0x3c>
    1404:	e9 81       	ldd	r30, Y+1	; 0x01
    1406:	fa 81       	ldd	r31, Y+2	; 0x02
    1408:	87 ef       	ldi	r24, 0xF7	; 247
    140a:	94 e0       	ldi	r25, 0x04	; 4
    140c:	90 87       	std	Z+8, r25	; 0x08
    140e:	87 83       	std	Z+7, r24	; 0x07
    1410:	82 e0       	ldi	r24, 0x02	; 2
    1412:	8d 83       	std	Y+5, r24	; 0x05
    1414:	2b c0       	rjmp	.+86     	; 0x146c <calculator_opEntered_handler+0x92>
	TRANSITION_ON(DIGIT_0,		UNCONDITIONALLY,						TO(zero2),				NO_ACTION) ;
    1416:	eb 81       	ldd	r30, Y+3	; 0x03
    1418:	fc 81       	ldd	r31, Y+4	; 0x04
    141a:	80 81       	ld	r24, Z
    141c:	86 30       	cpi	r24, 0x06	; 6
    141e:	49 f4       	brne	.+18     	; 0x1432 <calculator_opEntered_handler+0x58>
    1420:	e9 81       	ldd	r30, Y+1	; 0x01
    1422:	fa 81       	ldd	r31, Y+2	; 0x02
    1424:	8a e2       	ldi	r24, 0x2A	; 42
    1426:	95 e0       	ldi	r25, 0x05	; 5
    1428:	90 87       	std	Z+8, r25	; 0x08
    142a:	87 83       	std	Z+7, r24	; 0x07
    142c:	82 e0       	ldi	r24, 0x02	; 2
    142e:	8d 83       	std	Y+5, r24	; 0x05
    1430:	1d c0       	rjmp	.+58     	; 0x146c <calculator_opEntered_handler+0x92>
	TRANSITION_ON(DIGIT_1_9,	UNCONDITIONALLY,						TO(int2),				NO_ACTION) ;
    1432:	eb 81       	ldd	r30, Y+3	; 0x03
    1434:	fc 81       	ldd	r31, Y+4	; 0x04
    1436:	80 81       	ld	r24, Z
    1438:	87 30       	cpi	r24, 0x07	; 7
    143a:	49 f4       	brne	.+18     	; 0x144e <calculator_opEntered_handler+0x74>
    143c:	e9 81       	ldd	r30, Y+1	; 0x01
    143e:	fa 81       	ldd	r31, Y+2	; 0x02
    1440:	81 e4       	ldi	r24, 0x41	; 65
    1442:	95 e0       	ldi	r25, 0x05	; 5
    1444:	90 87       	std	Z+8, r25	; 0x08
    1446:	87 83       	std	Z+7, r24	; 0x07
    1448:	82 e0       	ldi	r24, 0x02	; 2
    144a:	8d 83       	std	Y+5, r24	; 0x05
    144c:	0f c0       	rjmp	.+30     	; 0x146c <calculator_opEntered_handler+0x92>
	TRANSITION_ON(POINT,		UNCONDITIONALLY,						TO(frac2),				NO_ACTION) ;
    144e:	eb 81       	ldd	r30, Y+3	; 0x03
    1450:	fc 81       	ldd	r31, Y+4	; 0x04
    1452:	80 81       	ld	r24, Z
    1454:	88 30       	cpi	r24, 0x08	; 8
    1456:	49 f4       	brne	.+18     	; 0x146a <calculator_opEntered_handler+0x90>
    1458:	e9 81       	ldd	r30, Y+1	; 0x01
    145a:	fa 81       	ldd	r31, Y+2	; 0x02
    145c:	89 e5       	ldi	r24, 0x59	; 89
    145e:	95 e0       	ldi	r25, 0x05	; 5
    1460:	90 87       	std	Z+8, r25	; 0x08
    1462:	87 83       	std	Z+7, r24	; 0x07
    1464:	82 e0       	ldi	r24, 0x02	; 2
    1466:	8d 83       	std	Y+5, r24	; 0x05
    1468:	01 c0       	rjmp	.+2      	; 0x146c <calculator_opEntered_handler+0x92>
}
END_DEFINE_STATE()
    146a:	1d 82       	std	Y+5, r1	; 0x05
    146c:	8d 81       	ldd	r24, Y+5	; 0x05
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	0f 90       	pop	r0
    1474:	0f 90       	pop	r0
    1476:	0f 90       	pop	r0
    1478:	cf 91       	pop	r28
    147a:	df 91       	pop	r29
    147c:	08 95       	ret

0000147e <calculator_negated2_handler>:


DEFINE_STATE(negated2)
    147e:	df 93       	push	r29
    1480:	cf 93       	push	r28
    1482:	00 d0       	rcall	.+0      	; 0x1484 <calculator_negated2_handler+0x6>
    1484:	00 d0       	rcall	.+0      	; 0x1486 <calculator_negated2_handler+0x8>
    1486:	0f 92       	push	r0
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
    148c:	9a 83       	std	Y+2, r25	; 0x02
    148e:	89 83       	std	Y+1, r24	; 0x01
    1490:	7c 83       	std	Y+4, r23	; 0x04
    1492:	6b 83       	std	Y+3, r22	; 0x03
{
	TRANSITION_ON(CLEAR_ENTRY,	UNCONDITIONALLY,						TO(opEntered),			NO_ACTION) ;
    1494:	eb 81       	ldd	r30, Y+3	; 0x03
    1496:	fc 81       	ldd	r31, Y+4	; 0x04
    1498:	80 81       	ld	r24, Z
    149a:	85 30       	cpi	r24, 0x05	; 5
    149c:	49 f4       	brne	.+18     	; 0x14b0 <calculator_negated2_handler+0x32>
    149e:	e9 81       	ldd	r30, Y+1	; 0x01
    14a0:	fa 81       	ldd	r31, Y+2	; 0x02
    14a2:	8c ed       	ldi	r24, 0xDC	; 220
    14a4:	94 e0       	ldi	r25, 0x04	; 4
    14a6:	90 87       	std	Z+8, r25	; 0x08
    14a8:	87 83       	std	Z+7, r24	; 0x07
    14aa:	82 e0       	ldi	r24, 0x02	; 2
    14ac:	8d 83       	std	Y+5, r24	; 0x05
    14ae:	33 c0       	rjmp	.+102    	; 0x1516 <calculator_negated2_handler+0x98>
	TRANSITION_ON(DIGIT_0,		UNCONDITIONALLY,						TO(zero2),				NO_ACTION) ;
    14b0:	eb 81       	ldd	r30, Y+3	; 0x03
    14b2:	fc 81       	ldd	r31, Y+4	; 0x04
    14b4:	80 81       	ld	r24, Z
    14b6:	86 30       	cpi	r24, 0x06	; 6
    14b8:	49 f4       	brne	.+18     	; 0x14cc <calculator_negated2_handler+0x4e>
    14ba:	e9 81       	ldd	r30, Y+1	; 0x01
    14bc:	fa 81       	ldd	r31, Y+2	; 0x02
    14be:	8a e2       	ldi	r24, 0x2A	; 42
    14c0:	95 e0       	ldi	r25, 0x05	; 5
    14c2:	90 87       	std	Z+8, r25	; 0x08
    14c4:	87 83       	std	Z+7, r24	; 0x07
    14c6:	82 e0       	ldi	r24, 0x02	; 2
    14c8:	8d 83       	std	Y+5, r24	; 0x05
    14ca:	25 c0       	rjmp	.+74     	; 0x1516 <calculator_negated2_handler+0x98>
	TRANSITION_ON(DIGIT_1_9,	UNCONDITIONALLY,						TO(int2),				NO_ACTION) ;
    14cc:	eb 81       	ldd	r30, Y+3	; 0x03
    14ce:	fc 81       	ldd	r31, Y+4	; 0x04
    14d0:	80 81       	ld	r24, Z
    14d2:	87 30       	cpi	r24, 0x07	; 7
    14d4:	49 f4       	brne	.+18     	; 0x14e8 <calculator_negated2_handler+0x6a>
    14d6:	e9 81       	ldd	r30, Y+1	; 0x01
    14d8:	fa 81       	ldd	r31, Y+2	; 0x02
    14da:	81 e4       	ldi	r24, 0x41	; 65
    14dc:	95 e0       	ldi	r25, 0x05	; 5
    14de:	90 87       	std	Z+8, r25	; 0x08
    14e0:	87 83       	std	Z+7, r24	; 0x07
    14e2:	82 e0       	ldi	r24, 0x02	; 2
    14e4:	8d 83       	std	Y+5, r24	; 0x05
    14e6:	17 c0       	rjmp	.+46     	; 0x1516 <calculator_negated2_handler+0x98>
	TRANSITION_ON(POINT,		UNCONDITIONALLY,						TO(frac2),				NO_ACTION) ;
    14e8:	eb 81       	ldd	r30, Y+3	; 0x03
    14ea:	fc 81       	ldd	r31, Y+4	; 0x04
    14ec:	80 81       	ld	r24, Z
    14ee:	88 30       	cpi	r24, 0x08	; 8
    14f0:	49 f4       	brne	.+18     	; 0x1504 <calculator_negated2_handler+0x86>
    14f2:	e9 81       	ldd	r30, Y+1	; 0x01
    14f4:	fa 81       	ldd	r31, Y+2	; 0x02
    14f6:	89 e5       	ldi	r24, 0x59	; 89
    14f8:	95 e0       	ldi	r25, 0x05	; 5
    14fa:	90 87       	std	Z+8, r25	; 0x08
    14fc:	87 83       	std	Z+7, r24	; 0x07
    14fe:	82 e0       	ldi	r24, 0x02	; 2
    1500:	8d 83       	std	Y+5, r24	; 0x05
    1502:	09 c0       	rjmp	.+18     	; 0x1516 <calculator_negated2_handler+0x98>
	CONSUME_EVENT_IF(OPERATION,	IF(EVENT_IS(keyEvent_t)->key == '-'),							NO_ACTION) ;
    1504:	eb 81       	ldd	r30, Y+3	; 0x03
    1506:	fc 81       	ldd	r31, Y+4	; 0x04
    1508:	81 81       	ldd	r24, Z+1	; 0x01
    150a:	8d 32       	cpi	r24, 0x2D	; 45
    150c:	19 f4       	brne	.+6      	; 0x1514 <calculator_negated2_handler+0x96>
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	8d 83       	std	Y+5, r24	; 0x05
    1512:	01 c0       	rjmp	.+2      	; 0x1516 <calculator_negated2_handler+0x98>
}
END_DEFINE_STATE()
    1514:	1d 82       	std	Y+5, r1	; 0x05
    1516:	8d 81       	ldd	r24, Y+5	; 0x05
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	0f 90       	pop	r0
    1522:	cf 91       	pop	r28
    1524:	df 91       	pop	r29
    1526:	08 95       	ret

00001528 <doCalculation>:


bool doCalculation(	uint8_t type)
{
    1528:	df 93       	push	r29
    152a:	cf 93       	push	r28
    152c:	00 d0       	rcall	.+0      	; 0x152e <doCalculation+0x6>
    152e:	00 d0       	rcall	.+0      	; 0x1530 <doCalculation+0x8>
    1530:	cd b7       	in	r28, 0x3d	; 61
    1532:	de b7       	in	r29, 0x3e	; 62
    1534:	89 83       	std	Y+1, r24	; 0x01
	switch(type)
    1536:	89 81       	ldd	r24, Y+1	; 0x01
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	3c 83       	std	Y+4, r19	; 0x04
    153e:	2b 83       	std	Y+3, r18	; 0x03
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	9c 81       	ldd	r25, Y+4	; 0x04
    1544:	8b 32       	cpi	r24, 0x2B	; 43
    1546:	91 05       	cpc	r25, r1
    1548:	b1 f0       	breq	.+44     	; 0x1576 <doCalculation+0x4e>
    154a:	2b 81       	ldd	r18, Y+3	; 0x03
    154c:	3c 81       	ldd	r19, Y+4	; 0x04
    154e:	2c 32       	cpi	r18, 0x2C	; 44
    1550:	31 05       	cpc	r19, r1
    1552:	34 f4       	brge	.+12     	; 0x1560 <doCalculation+0x38>
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	9c 81       	ldd	r25, Y+4	; 0x04
    1558:	8a 32       	cpi	r24, 0x2A	; 42
    155a:	91 05       	cpc	r25, r1
    155c:	91 f0       	breq	.+36     	; 0x1582 <doCalculation+0x5a>
    155e:	17 c0       	rjmp	.+46     	; 0x158e <doCalculation+0x66>
    1560:	2b 81       	ldd	r18, Y+3	; 0x03
    1562:	3c 81       	ldd	r19, Y+4	; 0x04
    1564:	2d 32       	cpi	r18, 0x2D	; 45
    1566:	31 05       	cpc	r19, r1
    1568:	49 f0       	breq	.+18     	; 0x157c <doCalculation+0x54>
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
    156c:	9c 81       	ldd	r25, Y+4	; 0x04
    156e:	8f 32       	cpi	r24, 0x2F	; 47
    1570:	91 05       	cpc	r25, r1
    1572:	51 f0       	breq	.+20     	; 0x1588 <doCalculation+0x60>
    1574:	0c c0       	rjmp	.+24     	; 0x158e <doCalculation+0x66>
	{
		case '+': { return true ; }
    1576:	91 e0       	ldi	r25, 0x01	; 1
    1578:	9a 83       	std	Y+2, r25	; 0x02
    157a:	0a c0       	rjmp	.+20     	; 0x1590 <doCalculation+0x68>
		case '-': { return true ; }
    157c:	21 e0       	ldi	r18, 0x01	; 1
    157e:	2a 83       	std	Y+2, r18	; 0x02
    1580:	07 c0       	rjmp	.+14     	; 0x1590 <doCalculation+0x68>
		case '*': { return true ; }
    1582:	31 e0       	ldi	r19, 0x01	; 1
    1584:	3a 83       	std	Y+2, r19	; 0x02
    1586:	04 c0       	rjmp	.+8      	; 0x1590 <doCalculation+0x68>
		case '/': { return true ; }
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	8a 83       	std	Y+2, r24	; 0x02
    158c:	01 c0       	rjmp	.+2      	; 0x1590 <doCalculation+0x68>
		default:  { return false ; }
    158e:	1a 82       	std	Y+2, r1	; 0x02
    1590:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    1592:	0f 90       	pop	r0
    1594:	0f 90       	pop	r0
    1596:	0f 90       	pop	r0
    1598:	0f 90       	pop	r0
    159a:	cf 91       	pop	r28
    159c:	df 91       	pop	r29
    159e:	08 95       	ret

000015a0 <calculator_operand2_handler>:


DEFINE_STATE(operand2)
    15a0:	df 93       	push	r29
    15a2:	cf 93       	push	r28
    15a4:	00 d0       	rcall	.+0      	; 0x15a6 <calculator_operand2_handler+0x6>
    15a6:	00 d0       	rcall	.+0      	; 0x15a8 <calculator_operand2_handler+0x8>
    15a8:	00 d0       	rcall	.+0      	; 0x15aa <calculator_operand2_handler+0xa>
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62
    15ae:	9b 83       	std	Y+3, r25	; 0x03
    15b0:	8a 83       	std	Y+2, r24	; 0x02
    15b2:	7d 83       	std	Y+5, r23	; 0x05
    15b4:	6c 83       	std	Y+4, r22	; 0x04
{
	TRANSITION_ON(CLEAR_ENTRY,	UNCONDITIONALLY,						TO(opEntered),			NO_ACTION) ;
    15b6:	ec 81       	ldd	r30, Y+4	; 0x04
    15b8:	fd 81       	ldd	r31, Y+5	; 0x05
    15ba:	80 81       	ld	r24, Z
    15bc:	85 30       	cpi	r24, 0x05	; 5
    15be:	49 f4       	brne	.+18     	; 0x15d2 <calculator_operand2_handler+0x32>
    15c0:	ea 81       	ldd	r30, Y+2	; 0x02
    15c2:	fb 81       	ldd	r31, Y+3	; 0x03
    15c4:	8c ed       	ldi	r24, 0xDC	; 220
    15c6:	94 e0       	ldi	r25, 0x04	; 4
    15c8:	90 87       	std	Z+8, r25	; 0x08
    15ca:	87 83       	std	Z+7, r24	; 0x07
    15cc:	82 e0       	ldi	r24, 0x02	; 2
    15ce:	8e 83       	std	Y+6, r24	; 0x06
    15d0:	3b c0       	rjmp	.+118    	; 0x1648 <calculator_operand2_handler+0xa8>

	HANDLE_STATE_EVENTS
    15d2:	ec 81       	ldd	r30, Y+4	; 0x04
    15d4:	fd 81       	ldd	r31, Y+5	; 0x05
    15d6:	80 81       	ld	r24, Z
    15d8:	88 2f       	mov	r24, r24
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	09 97       	sbiw	r24, 0x09	; 9
    15de:	82 30       	cpi	r24, 0x02	; 2
    15e0:	91 05       	cpc	r25, r1
    15e2:	88 f5       	brcc	.+98     	; 0x1646 <calculator_operand2_handler+0xa6>
	{
		EVENT(OPERATION)
		EVENT(EQUALS)
		{
			bool goodCalc = doCalculation(EVENT_IS(keyEvent_t)->key) ;
    15e4:	ec 81       	ldd	r30, Y+4	; 0x04
    15e6:	fd 81       	ldd	r31, Y+5	; 0x05
    15e8:	81 81       	ldd	r24, Z+1	; 0x01
    15ea:	0e 94 94 0a 	call	0x1528	; 0x1528 <doCalculation>
    15ee:	89 83       	std	Y+1, r24	; 0x01

			if(goodCalc)
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
    15f2:	88 23       	and	r24, r24
    15f4:	f9 f0       	breq	.+62     	; 0x1634 <calculator_operand2_handler+0x94>
			{
				TRANSITION_ON(OPERATION,	UNCONDITIONALLY,			TO(opEntered),			NO_ACTION) ;
    15f6:	ec 81       	ldd	r30, Y+4	; 0x04
    15f8:	fd 81       	ldd	r31, Y+5	; 0x05
    15fa:	80 81       	ld	r24, Z
    15fc:	89 30       	cpi	r24, 0x09	; 9
    15fe:	49 f4       	brne	.+18     	; 0x1612 <calculator_operand2_handler+0x72>
    1600:	ea 81       	ldd	r30, Y+2	; 0x02
    1602:	fb 81       	ldd	r31, Y+3	; 0x03
    1604:	8c ed       	ldi	r24, 0xDC	; 220
    1606:	94 e0       	ldi	r25, 0x04	; 4
    1608:	90 87       	std	Z+8, r25	; 0x08
    160a:	87 83       	std	Z+7, r24	; 0x07
    160c:	82 e0       	ldi	r24, 0x02	; 2
    160e:	8e 83       	std	Y+6, r24	; 0x06
    1610:	1b c0       	rjmp	.+54     	; 0x1648 <calculator_operand2_handler+0xa8>
				TRANSITION_ON(EQUALS,		UNCONDITIONALLY,			TO(result),				NO_ACTION) ;
    1612:	ec 81       	ldd	r30, Y+4	; 0x04
    1614:	fd 81       	ldd	r31, Y+5	; 0x05
    1616:	80 81       	ld	r24, Z
    1618:	8a 30       	cpi	r24, 0x0A	; 10
    161a:	49 f4       	brne	.+18     	; 0x162e <calculator_operand2_handler+0x8e>
    161c:	ea 81       	ldd	r30, Y+2	; 0x02
    161e:	fb 81       	ldd	r31, Y+3	; 0x03
    1620:	83 e1       	ldi	r24, 0x13	; 19
    1622:	94 e0       	ldi	r25, 0x04	; 4
    1624:	90 87       	std	Z+8, r25	; 0x08
    1626:	87 83       	std	Z+7, r24	; 0x07
    1628:	82 e0       	ldi	r24, 0x02	; 2
    162a:	8e 83       	std	Y+6, r24	; 0x06
    162c:	0d c0       	rjmp	.+26     	; 0x1648 <calculator_operand2_handler+0xa8>
			else
			{
				TRANSITION_TO(error, NO_ACTION) ;
			}
		}
		EVENT_HANDLED
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	8e 83       	std	Y+6, r24	; 0x06
    1632:	0a c0       	rjmp	.+20     	; 0x1648 <calculator_operand2_handler+0xa8>
				TRANSITION_ON(OPERATION,	UNCONDITIONALLY,			TO(opEntered),			NO_ACTION) ;
				TRANSITION_ON(EQUALS,		UNCONDITIONALLY,			TO(result),				NO_ACTION) ;
			}
			else
			{
				TRANSITION_TO(error, NO_ACTION) ;
    1634:	ea 81       	ldd	r30, Y+2	; 0x02
    1636:	fb 81       	ldd	r31, Y+3	; 0x03
    1638:	80 ec       	ldi	r24, 0xC0	; 192
    163a:	94 e0       	ldi	r25, 0x04	; 4
    163c:	90 87       	std	Z+8, r25	; 0x08
    163e:	87 83       	std	Z+7, r24	; 0x07
    1640:	82 e0       	ldi	r24, 0x02	; 2
    1642:	8e 83       	std	Y+6, r24	; 0x06
    1644:	01 c0       	rjmp	.+2      	; 0x1648 <calculator_operand2_handler+0xa8>
			}
		}
		EVENT_HANDLED
	}
	HANDLE_STATE_EVENTS_DONE
    1646:	1e 82       	std	Y+6, r1	; 0x06
    1648:	8e 81       	ldd	r24, Y+6	; 0x06
}
END_DEFINE_STATE()
    164a:	26 96       	adiw	r28, 0x06	; 6
    164c:	0f b6       	in	r0, 0x3f	; 63
    164e:	f8 94       	cli
    1650:	de bf       	out	0x3e, r29	; 62
    1652:	0f be       	out	0x3f, r0	; 63
    1654:	cd bf       	out	0x3d, r28	; 61
    1656:	cf 91       	pop	r28
    1658:	df 91       	pop	r29
    165a:	08 95       	ret

0000165c <calculator_zero2_handler>:


DEFINE_STATE(zero2)
    165c:	df 93       	push	r29
    165e:	cf 93       	push	r28
    1660:	00 d0       	rcall	.+0      	; 0x1662 <calculator_zero2_handler+0x6>
    1662:	00 d0       	rcall	.+0      	; 0x1664 <calculator_zero2_handler+0x8>
    1664:	0f 92       	push	r0
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
    166a:	9a 83       	std	Y+2, r25	; 0x02
    166c:	89 83       	std	Y+1, r24	; 0x01
    166e:	7c 83       	std	Y+4, r23	; 0x04
    1670:	6b 83       	std	Y+3, r22	; 0x03
{
	INITIAL_TRANSITION(TO(negated1),															NO_ACTION) ;
    1672:	eb 81       	ldd	r30, Y+3	; 0x03
    1674:	fc 81       	ldd	r31, Y+4	; 0x04
    1676:	80 81       	ld	r24, Z
    1678:	82 30       	cpi	r24, 0x02	; 2
    167a:	49 f4       	brne	.+18     	; 0x168e <calculator_zero2_handler+0x32>
    167c:	e9 81       	ldd	r30, Y+1	; 0x01
    167e:	fa 81       	ldd	r31, Y+2	; 0x02
    1680:	86 e4       	ldi	r24, 0x46	; 70
    1682:	94 e0       	ldi	r25, 0x04	; 4
    1684:	90 87       	std	Z+8, r25	; 0x08
    1686:	87 83       	std	Z+7, r24	; 0x07
    1688:	82 e0       	ldi	r24, 0x02	; 2
    168a:	8d 83       	std	Y+5, r24	; 0x05
    168c:	02 c0       	rjmp	.+4      	; 0x1692 <calculator_zero2_handler+0x36>
	CONSUME_EVENT(DIGIT_0,																		NO_ACTION) ;
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	8d 83       	std	Y+5, r24	; 0x05
    1692:	8d 81       	ldd	r24, Y+5	; 0x05
	TRANSITION_ON(DIGIT_1_9,	UNCONDITIONALLY,						TO(int2),				NO_ACTION) ;
	TRANSITION_ON(POINT,		UNCONDITIONALLY,						TO(frac2),				NO_ACTION) ;
}
END_DEFINE_STATE()
    1694:	0f 90       	pop	r0
    1696:	0f 90       	pop	r0
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	cf 91       	pop	r28
    16a0:	df 91       	pop	r29
    16a2:	08 95       	ret

000016a4 <calculator_int2_handler>:


DEFINE_STATE(int2)
    16a4:	df 93       	push	r29
    16a6:	cf 93       	push	r28
    16a8:	00 d0       	rcall	.+0      	; 0x16aa <calculator_int2_handler+0x6>
    16aa:	00 d0       	rcall	.+0      	; 0x16ac <calculator_int2_handler+0x8>
    16ac:	0f 92       	push	r0
    16ae:	cd b7       	in	r28, 0x3d	; 61
    16b0:	de b7       	in	r29, 0x3e	; 62
    16b2:	9a 83       	std	Y+2, r25	; 0x02
    16b4:	89 83       	std	Y+1, r24	; 0x01
    16b6:	7c 83       	std	Y+4, r23	; 0x04
    16b8:	6b 83       	std	Y+3, r22	; 0x03
{
	TRANSITION_ON(POINT,		UNCONDITIONALLY,						TO(frac2),				NO_ACTION) ;
    16ba:	eb 81       	ldd	r30, Y+3	; 0x03
    16bc:	fc 81       	ldd	r31, Y+4	; 0x04
    16be:	80 81       	ld	r24, Z
    16c0:	88 30       	cpi	r24, 0x08	; 8
    16c2:	49 f4       	brne	.+18     	; 0x16d6 <calculator_int2_handler+0x32>
    16c4:	e9 81       	ldd	r30, Y+1	; 0x01
    16c6:	fa 81       	ldd	r31, Y+2	; 0x02
    16c8:	89 e5       	ldi	r24, 0x59	; 89
    16ca:	95 e0       	ldi	r25, 0x05	; 5
    16cc:	90 87       	std	Z+8, r25	; 0x08
    16ce:	87 83       	std	Z+7, r24	; 0x07
    16d0:	82 e0       	ldi	r24, 0x02	; 2
    16d2:	8d 83       	std	Y+5, r24	; 0x05
    16d4:	01 c0       	rjmp	.+2      	; 0x16d8 <calculator_int2_handler+0x34>
}
END_DEFINE_STATE()
    16d6:	1d 82       	std	Y+5, r1	; 0x05
    16d8:	8d 81       	ldd	r24, Y+5	; 0x05
    16da:	0f 90       	pop	r0
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	0f 90       	pop	r0
    16e2:	0f 90       	pop	r0
    16e4:	cf 91       	pop	r28
    16e6:	df 91       	pop	r29
    16e8:	08 95       	ret

000016ea <calculator_frac2_handler>:


DEFINE_STATE(frac2)
    16ea:	df 93       	push	r29
    16ec:	cf 93       	push	r28
    16ee:	00 d0       	rcall	.+0      	; 0x16f0 <calculator_frac2_handler+0x6>
    16f0:	00 d0       	rcall	.+0      	; 0x16f2 <calculator_frac2_handler+0x8>
    16f2:	cd b7       	in	r28, 0x3d	; 61
    16f4:	de b7       	in	r29, 0x3e	; 62
    16f6:	9a 83       	std	Y+2, r25	; 0x02
    16f8:	89 83       	std	Y+1, r24	; 0x01
    16fa:	7c 83       	std	Y+4, r23	; 0x04
    16fc:	6b 83       	std	Y+3, r22	; 0x03
{
	CONSUME_EVENT(POINT,																		NO_ACTION) ;
    16fe:	81 e0       	ldi	r24, 0x01	; 1
}
END_DEFINE_STATE()
    1700:	0f 90       	pop	r0
    1702:	0f 90       	pop	r0
    1704:	0f 90       	pop	r0
    1706:	0f 90       	pop	r0
    1708:	cf 91       	pop	r28
    170a:	df 91       	pop	r29
    170c:	08 95       	ret

0000170e <createInstanceOf_timeBomb>:

END_STATE_MACHINE_DEFINITION() ;


CREATE_STATE_MACHINE_INSTANCE()
{
    170e:	df 93       	push	r29
    1710:	cf 93       	push	r28
    1712:	cd b7       	in	r28, 0x3d	; 61
    1714:	de b7       	in	r29, 0x3e	; 62
	static event_t*	eventQueue[configEVENT_QUEUE_DEPTH] ;

	initializeEventQueue(&timeBombMachine.parent.eventQueue, &eventQueue[0], configEVENT_QUEUE_DEPTH) ;
    1716:	86 e8       	ldi	r24, 0x86	; 134
    1718:	95 e0       	ldi	r25, 0x05	; 5
    171a:	2a ef       	ldi	r18, 0xFA	; 250
    171c:	35 e0       	ldi	r19, 0x05	; 5
    171e:	b9 01       	movw	r22, r18
    1720:	40 e1       	ldi	r20, 0x10	; 16
    1722:	0e 94 49 00 	call	0x92	; 0x92 <initializeEventQueue>

	timeBombMachine.parent.currentState = &timeBomb_TOP ;
    1726:	8d e6       	ldi	r24, 0x6D	; 109
    1728:	95 e0       	ldi	r25, 0x05	; 5
    172a:	90 93 83 05 	sts	0x0583, r25
    172e:	80 93 82 05 	sts	0x0582, r24

	return (stateMachine_t*)&timeBombMachine ;
    1732:	8d e7       	ldi	r24, 0x7D	; 125
    1734:	95 e0       	ldi	r25, 0x05	; 5
}
    1736:	cf 91       	pop	r28
    1738:	df 91       	pop	r29
    173a:	08 95       	ret

0000173c <destroyInstanceOf_timeBomb>:


DESTROY_STATE_MACHINE_INSTANCE()
{
    173c:	df 93       	push	r29
    173e:	cf 93       	push	r28
    1740:	00 d0       	rcall	.+0      	; 0x1742 <destroyInstanceOf_timeBomb+0x6>
    1742:	cd b7       	in	r28, 0x3d	; 61
    1744:	de b7       	in	r29, 0x3e	; 62
    1746:	9a 83       	std	Y+2, r25	; 0x02
    1748:	89 83       	std	Y+1, r24	; 0x01
	// Nothing to do here since I am only working with a static instance
}
    174a:	0f 90       	pop	r0
    174c:	0f 90       	pop	r0
    174e:	cf 91       	pop	r28
    1750:	df 91       	pop	r29
    1752:	08 95       	ret

00001754 <updateDisplay>:


void updateDisplay(	uint8_t value)
{
    1754:	df 93       	push	r29
    1756:	cf 93       	push	r28
    1758:	0f 92       	push	r0
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
    175e:	89 83       	std	Y+1, r24	; 0x01
//	printf("%d ", value) ;
}
    1760:	0f 90       	pop	r0
    1762:	cf 91       	pop	r28
    1764:	df 91       	pop	r29
    1766:	08 95       	ret

00001768 <timeBomb_TOP_handler>:


DEFINE_TOP_STATE()
    1768:	df 93       	push	r29
    176a:	cf 93       	push	r28
    176c:	00 d0       	rcall	.+0      	; 0x176e <timeBomb_TOP_handler+0x6>
    176e:	00 d0       	rcall	.+0      	; 0x1770 <timeBomb_TOP_handler+0x8>
    1770:	0f 92       	push	r0
    1772:	cd b7       	in	r28, 0x3d	; 61
    1774:	de b7       	in	r29, 0x3e	; 62
    1776:	9a 83       	std	Y+2, r25	; 0x02
    1778:	89 83       	std	Y+1, r24	; 0x01
    177a:	7c 83       	std	Y+4, r23	; 0x04
    177c:	6b 83       	std	Y+3, r22	; 0x03
{
	INITIAL_TRANSITION(TO(setting), ACTION(self->timeout = INIT_TIMEOUT)) ;
    177e:	eb 81       	ldd	r30, Y+3	; 0x03
    1780:	fc 81       	ldd	r31, Y+4	; 0x04
    1782:	80 81       	ld	r24, Z
    1784:	82 30       	cpi	r24, 0x02	; 2
    1786:	69 f4       	brne	.+26     	; 0x17a2 <timeBomb_TOP_handler+0x3a>
    1788:	e9 81       	ldd	r30, Y+1	; 0x01
    178a:	fa 81       	ldd	r31, Y+2	; 0x02
    178c:	8e e1       	ldi	r24, 0x1E	; 30
    178e:	80 8b       	std	Z+16, r24	; 0x10
    1790:	e9 81       	ldd	r30, Y+1	; 0x01
    1792:	fa 81       	ldd	r31, Y+2	; 0x02
    1794:	81 ea       	ldi	r24, 0xA1	; 161
    1796:	95 e0       	ldi	r25, 0x05	; 5
    1798:	90 87       	std	Z+8, r25	; 0x08
    179a:	87 83       	std	Z+7, r24	; 0x07
    179c:	82 e0       	ldi	r24, 0x02	; 2
    179e:	8d 83       	std	Y+5, r24	; 0x05
    17a0:	0c c0       	rjmp	.+24     	; 0x17ba <timeBomb_TOP_handler+0x52>

	HANDLE_STATE_EVENTS
    17a2:	eb 81       	ldd	r30, Y+3	; 0x03
    17a4:	fc 81       	ldd	r31, Y+4	; 0x04
    17a6:	80 81       	ld	r24, Z
    17a8:	88 2f       	mov	r24, r24
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	83 30       	cpi	r24, 0x03	; 3
    17ae:	91 05       	cpc	r25, r1
    17b0:	19 f4       	brne	.+6      	; 0x17b8 <timeBomb_TOP_handler+0x50>
	{
		EXIT
		{
			// BOOM
		}
		EXIT_HANDLED
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	8d 83       	std	Y+5, r24	; 0x05
    17b6:	01 c0       	rjmp	.+2      	; 0x17ba <timeBomb_TOP_handler+0x52>
	}
	HANDLE_STATE_EVENTS_DONE
    17b8:	1d 82       	std	Y+5, r1	; 0x05
    17ba:	8d 81       	ldd	r24, Y+5	; 0x05
}
END_DEFINE_STATE()
    17bc:	0f 90       	pop	r0
    17be:	0f 90       	pop	r0
    17c0:	0f 90       	pop	r0
    17c2:	0f 90       	pop	r0
    17c4:	0f 90       	pop	r0
    17c6:	cf 91       	pop	r28
    17c8:	df 91       	pop	r29
    17ca:	08 95       	ret

000017cc <timeBomb_setting_handler>:


DEFINE_STATE(setting)
    17cc:	df 93       	push	r29
    17ce:	cf 93       	push	r28
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
    17d4:	27 97       	sbiw	r28, 0x07	; 7
    17d6:	0f b6       	in	r0, 0x3f	; 63
    17d8:	f8 94       	cli
    17da:	de bf       	out	0x3e, r29	; 62
    17dc:	0f be       	out	0x3f, r0	; 63
    17de:	cd bf       	out	0x3d, r28	; 61
    17e0:	9a 83       	std	Y+2, r25	; 0x02
    17e2:	89 83       	std	Y+1, r24	; 0x01
    17e4:	7c 83       	std	Y+4, r23	; 0x04
    17e6:	6b 83       	std	Y+3, r22	; 0x03
{
	TRANSITION_ON(ARM, UNCONDITIONALLY, TO(timing), ACTION(self->codeBeingEntered = 0)) ;
    17e8:	eb 81       	ldd	r30, Y+3	; 0x03
    17ea:	fc 81       	ldd	r31, Y+4	; 0x04
    17ec:	80 81       	ld	r24, Z
    17ee:	86 30       	cpi	r24, 0x06	; 6
    17f0:	61 f4       	brne	.+24     	; 0x180a <timeBomb_setting_handler+0x3e>
    17f2:	e9 81       	ldd	r30, Y+1	; 0x01
    17f4:	fa 81       	ldd	r31, Y+2	; 0x02
    17f6:	11 8a       	std	Z+17, r1	; 0x11
    17f8:	e9 81       	ldd	r30, Y+1	; 0x01
    17fa:	fa 81       	ldd	r31, Y+2	; 0x02
    17fc:	88 eb       	ldi	r24, 0xB8	; 184
    17fe:	95 e0       	ldi	r25, 0x05	; 5
    1800:	90 87       	std	Z+8, r25	; 0x08
    1802:	87 83       	std	Z+7, r24	; 0x07
    1804:	22 e0       	ldi	r18, 0x02	; 2
    1806:	2f 83       	std	Y+7, r18	; 0x07
    1808:	3b c0       	rjmp	.+118    	; 0x1880 <timeBomb_setting_handler+0xb4>

	HANDLE_STATE_EVENTS
    180a:	eb 81       	ldd	r30, Y+3	; 0x03
    180c:	fc 81       	ldd	r31, Y+4	; 0x04
    180e:	80 81       	ld	r24, Z
    1810:	28 2f       	mov	r18, r24
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	3e 83       	std	Y+6, r19	; 0x06
    1816:	2d 83       	std	Y+5, r18	; 0x05
    1818:	8d 81       	ldd	r24, Y+5	; 0x05
    181a:	9e 81       	ldd	r25, Y+6	; 0x06
    181c:	84 30       	cpi	r24, 0x04	; 4
    181e:	91 05       	cpc	r25, r1
    1820:	31 f0       	breq	.+12     	; 0x182e <timeBomb_setting_handler+0x62>
    1822:	2d 81       	ldd	r18, Y+5	; 0x05
    1824:	3e 81       	ldd	r19, Y+6	; 0x06
    1826:	25 30       	cpi	r18, 0x05	; 5
    1828:	31 05       	cpc	r19, r1
    182a:	a9 f0       	breq	.+42     	; 0x1856 <timeBomb_setting_handler+0x8a>
    182c:	28 c0       	rjmp	.+80     	; 0x187e <timeBomb_setting_handler+0xb2>
	{
		EVENT(UP)
		{
			if(self->timeout < 60)
    182e:	e9 81       	ldd	r30, Y+1	; 0x01
    1830:	fa 81       	ldd	r31, Y+2	; 0x02
    1832:	80 89       	ldd	r24, Z+16	; 0x10
    1834:	8c 33       	cpi	r24, 0x3C	; 60
    1836:	60 f4       	brcc	.+24     	; 0x1850 <timeBomb_setting_handler+0x84>
			{
				self->timeout++ ;
    1838:	e9 81       	ldd	r30, Y+1	; 0x01
    183a:	fa 81       	ldd	r31, Y+2	; 0x02
    183c:	80 89       	ldd	r24, Z+16	; 0x10
    183e:	8f 5f       	subi	r24, 0xFF	; 255
    1840:	e9 81       	ldd	r30, Y+1	; 0x01
    1842:	fa 81       	ldd	r31, Y+2	; 0x02
    1844:	80 8b       	std	Z+16, r24	; 0x10

				updateDisplay(self->timeout) ;
    1846:	e9 81       	ldd	r30, Y+1	; 0x01
    1848:	fa 81       	ldd	r31, Y+2	; 0x02
    184a:	80 89       	ldd	r24, Z+16	; 0x10
    184c:	0e 94 aa 0b 	call	0x1754	; 0x1754 <updateDisplay>
			}
		}
		EVENT_HANDLED
    1850:	31 e0       	ldi	r19, 0x01	; 1
    1852:	3f 83       	std	Y+7, r19	; 0x07
    1854:	15 c0       	rjmp	.+42     	; 0x1880 <timeBomb_setting_handler+0xb4>

		EVENT(DOWN)
		{
			if(self->timeout > 1)
    1856:	e9 81       	ldd	r30, Y+1	; 0x01
    1858:	fa 81       	ldd	r31, Y+2	; 0x02
    185a:	80 89       	ldd	r24, Z+16	; 0x10
    185c:	82 30       	cpi	r24, 0x02	; 2
    185e:	60 f0       	brcs	.+24     	; 0x1878 <timeBomb_setting_handler+0xac>
			{
				self->timeout-- ;
    1860:	e9 81       	ldd	r30, Y+1	; 0x01
    1862:	fa 81       	ldd	r31, Y+2	; 0x02
    1864:	80 89       	ldd	r24, Z+16	; 0x10
    1866:	81 50       	subi	r24, 0x01	; 1
    1868:	e9 81       	ldd	r30, Y+1	; 0x01
    186a:	fa 81       	ldd	r31, Y+2	; 0x02
    186c:	80 8b       	std	Z+16, r24	; 0x10

				updateDisplay(self->timeout) ;
    186e:	e9 81       	ldd	r30, Y+1	; 0x01
    1870:	fa 81       	ldd	r31, Y+2	; 0x02
    1872:	80 89       	ldd	r24, Z+16	; 0x10
    1874:	0e 94 aa 0b 	call	0x1754	; 0x1754 <updateDisplay>
			}
		}
		EVENT_HANDLED
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	8f 83       	std	Y+7, r24	; 0x07
    187c:	01 c0       	rjmp	.+2      	; 0x1880 <timeBomb_setting_handler+0xb4>
	}
	HANDLE_STATE_EVENTS_DONE
    187e:	1f 82       	std	Y+7, r1	; 0x07
    1880:	8f 81       	ldd	r24, Y+7	; 0x07
}
END_DEFINE_STATE()
    1882:	27 96       	adiw	r28, 0x07	; 7
    1884:	0f b6       	in	r0, 0x3f	; 63
    1886:	f8 94       	cli
    1888:	de bf       	out	0x3e, r29	; 62
    188a:	0f be       	out	0x3f, r0	; 63
    188c:	cd bf       	out	0x3d, r28	; 61
    188e:	cf 91       	pop	r28
    1890:	df 91       	pop	r29
    1892:	08 95       	ret

00001894 <timeBomb_timing_handler>:


DEFINE_STATE(timing)
    1894:	df 93       	push	r29
    1896:	cf 93       	push	r28
    1898:	cd b7       	in	r28, 0x3d	; 61
    189a:	de b7       	in	r29, 0x3e	; 62
    189c:	27 97       	sbiw	r28, 0x07	; 7
    189e:	0f b6       	in	r0, 0x3f	; 63
    18a0:	f8 94       	cli
    18a2:	de bf       	out	0x3e, r29	; 62
    18a4:	0f be       	out	0x3f, r0	; 63
    18a6:	cd bf       	out	0x3d, r28	; 61
    18a8:	9a 83       	std	Y+2, r25	; 0x02
    18aa:	89 83       	std	Y+1, r24	; 0x01
    18ac:	7c 83       	std	Y+4, r23	; 0x04
    18ae:	6b 83       	std	Y+3, r22	; 0x03
{
	TRANSITION_ON(ARM, IF(self->codeBeingEntered == self->disarmCode), TO(setting), ACTION(updateDisplay(self->timeout))) ;
    18b0:	eb 81       	ldd	r30, Y+3	; 0x03
    18b2:	fc 81       	ldd	r31, Y+4	; 0x04
    18b4:	80 81       	ld	r24, Z
    18b6:	86 30       	cpi	r24, 0x06	; 6
    18b8:	b1 f4       	brne	.+44     	; 0x18e6 <timeBomb_timing_handler+0x52>
    18ba:	e9 81       	ldd	r30, Y+1	; 0x01
    18bc:	fa 81       	ldd	r31, Y+2	; 0x02
    18be:	91 89       	ldd	r25, Z+17	; 0x11
    18c0:	e9 81       	ldd	r30, Y+1	; 0x01
    18c2:	fa 81       	ldd	r31, Y+2	; 0x02
    18c4:	82 89       	ldd	r24, Z+18	; 0x12
    18c6:	98 17       	cp	r25, r24
    18c8:	71 f4       	brne	.+28     	; 0x18e6 <timeBomb_timing_handler+0x52>
    18ca:	e9 81       	ldd	r30, Y+1	; 0x01
    18cc:	fa 81       	ldd	r31, Y+2	; 0x02
    18ce:	80 89       	ldd	r24, Z+16	; 0x10
    18d0:	0e 94 aa 0b 	call	0x1754	; 0x1754 <updateDisplay>
    18d4:	e9 81       	ldd	r30, Y+1	; 0x01
    18d6:	fa 81       	ldd	r31, Y+2	; 0x02
    18d8:	81 ea       	ldi	r24, 0xA1	; 161
    18da:	95 e0       	ldi	r25, 0x05	; 5
    18dc:	90 87       	std	Z+8, r25	; 0x08
    18de:	87 83       	std	Z+7, r24	; 0x07
    18e0:	22 e0       	ldi	r18, 0x02	; 2
    18e2:	2f 83       	std	Y+7, r18	; 0x07
    18e4:	4f c0       	rjmp	.+158    	; 0x1984 <timeBomb_timing_handler+0xf0>

	HANDLE_STATE_EVENTS
    18e6:	eb 81       	ldd	r30, Y+3	; 0x03
    18e8:	fc 81       	ldd	r31, Y+4	; 0x04
    18ea:	80 81       	ld	r24, Z
    18ec:	28 2f       	mov	r18, r24
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	3e 83       	std	Y+6, r19	; 0x06
    18f2:	2d 83       	std	Y+5, r18	; 0x05
    18f4:	8d 81       	ldd	r24, Y+5	; 0x05
    18f6:	9e 81       	ldd	r25, Y+6	; 0x06
    18f8:	85 30       	cpi	r24, 0x05	; 5
    18fa:	91 05       	cpc	r25, r1
    18fc:	d9 f0       	breq	.+54     	; 0x1934 <timeBomb_timing_handler+0xa0>
    18fe:	2d 81       	ldd	r18, Y+5	; 0x05
    1900:	3e 81       	ldd	r19, Y+6	; 0x06
    1902:	27 30       	cpi	r18, 0x07	; 7
    1904:	31 05       	cpc	r19, r1
    1906:	01 f1       	breq	.+64     	; 0x1948 <timeBomb_timing_handler+0xb4>
    1908:	8d 81       	ldd	r24, Y+5	; 0x05
    190a:	9e 81       	ldd	r25, Y+6	; 0x06
    190c:	84 30       	cpi	r24, 0x04	; 4
    190e:	91 05       	cpc	r25, r1
    1910:	c1 f5       	brne	.+112    	; 0x1982 <timeBomb_timing_handler+0xee>
	{
		EVENT(UP)
		{
			self->codeBeingEntered <<= 1 ;
    1912:	e9 81       	ldd	r30, Y+1	; 0x01
    1914:	fa 81       	ldd	r31, Y+2	; 0x02
    1916:	81 89       	ldd	r24, Z+17	; 0x11
    1918:	88 0f       	add	r24, r24
    191a:	e9 81       	ldd	r30, Y+1	; 0x01
    191c:	fa 81       	ldd	r31, Y+2	; 0x02
    191e:	81 8b       	std	Z+17, r24	; 0x11
			self->codeBeingEntered |= 1 ;
    1920:	e9 81       	ldd	r30, Y+1	; 0x01
    1922:	fa 81       	ldd	r31, Y+2	; 0x02
    1924:	81 89       	ldd	r24, Z+17	; 0x11
    1926:	81 60       	ori	r24, 0x01	; 1
    1928:	e9 81       	ldd	r30, Y+1	; 0x01
    192a:	fa 81       	ldd	r31, Y+2	; 0x02
    192c:	81 8b       	std	Z+17, r24	; 0x11
		}
		EVENT_HANDLED
    192e:	91 e0       	ldi	r25, 0x01	; 1
    1930:	9f 83       	std	Y+7, r25	; 0x07
    1932:	28 c0       	rjmp	.+80     	; 0x1984 <timeBomb_timing_handler+0xf0>

		EVENT(DOWN)
		{
			self->codeBeingEntered <<= 1 ;
    1934:	e9 81       	ldd	r30, Y+1	; 0x01
    1936:	fa 81       	ldd	r31, Y+2	; 0x02
    1938:	81 89       	ldd	r24, Z+17	; 0x11
    193a:	88 0f       	add	r24, r24
    193c:	e9 81       	ldd	r30, Y+1	; 0x01
    193e:	fa 81       	ldd	r31, Y+2	; 0x02
    1940:	81 8b       	std	Z+17, r24	; 0x11
		}
		EVENT_HANDLED
    1942:	21 e0       	ldi	r18, 0x01	; 1
    1944:	2f 83       	std	Y+7, r18	; 0x07
    1946:	1e c0       	rjmp	.+60     	; 0x1984 <timeBomb_timing_handler+0xf0>

		EVENT(TICK)
		{
			self->timeout-- ;
    1948:	e9 81       	ldd	r30, Y+1	; 0x01
    194a:	fa 81       	ldd	r31, Y+2	; 0x02
    194c:	80 89       	ldd	r24, Z+16	; 0x10
    194e:	81 50       	subi	r24, 0x01	; 1
    1950:	e9 81       	ldd	r30, Y+1	; 0x01
    1952:	fa 81       	ldd	r31, Y+2	; 0x02
    1954:	80 8b       	std	Z+16, r24	; 0x10

			updateDisplay(self->timeout) ;
    1956:	e9 81       	ldd	r30, Y+1	; 0x01
    1958:	fa 81       	ldd	r31, Y+2	; 0x02
    195a:	80 89       	ldd	r24, Z+16	; 0x10
    195c:	0e 94 aa 0b 	call	0x1754	; 0x1754 <updateDisplay>

			TRANSITION_IF(self->timeout == 0, TO(BOOM), NO_ACTION)
    1960:	e9 81       	ldd	r30, Y+1	; 0x01
    1962:	fa 81       	ldd	r31, Y+2	; 0x02
    1964:	80 89       	ldd	r24, Z+16	; 0x10
    1966:	88 23       	and	r24, r24
    1968:	49 f4       	brne	.+18     	; 0x197c <timeBomb_timing_handler+0xe8>
    196a:	e9 81       	ldd	r30, Y+1	; 0x01
    196c:	fa 81       	ldd	r31, Y+2	; 0x02
    196e:	8d ec       	ldi	r24, 0xCD	; 205
    1970:	95 e0       	ldi	r25, 0x05	; 5
    1972:	90 87       	std	Z+8, r25	; 0x08
    1974:	87 83       	std	Z+7, r24	; 0x07
    1976:	32 e0       	ldi	r19, 0x02	; 2
    1978:	3f 83       	std	Y+7, r19	; 0x07
    197a:	04 c0       	rjmp	.+8      	; 0x1984 <timeBomb_timing_handler+0xf0>
		}
		EVENT_HANDLED
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	8f 83       	std	Y+7, r24	; 0x07
    1980:	01 c0       	rjmp	.+2      	; 0x1984 <timeBomb_timing_handler+0xf0>
	}
	HANDLE_STATE_EVENTS_DONE
    1982:	1f 82       	std	Y+7, r1	; 0x07
    1984:	8f 81       	ldd	r24, Y+7	; 0x07
}
END_DEFINE_STATE()
    1986:	27 96       	adiw	r28, 0x07	; 7
    1988:	0f b6       	in	r0, 0x3f	; 63
    198a:	f8 94       	cli
    198c:	de bf       	out	0x3e, r29	; 62
    198e:	0f be       	out	0x3f, r0	; 63
    1990:	cd bf       	out	0x3d, r28	; 61
    1992:	cf 91       	pop	r28
    1994:	df 91       	pop	r29
    1996:	08 95       	ret

00001998 <timeBomb_BOOM_handler>:


DEFINE_STATE(BOOM)
    1998:	df 93       	push	r29
    199a:	cf 93       	push	r28
    199c:	00 d0       	rcall	.+0      	; 0x199e <timeBomb_BOOM_handler+0x6>
    199e:	00 d0       	rcall	.+0      	; 0x19a0 <timeBomb_BOOM_handler+0x8>
    19a0:	0f 92       	push	r0
    19a2:	cd b7       	in	r28, 0x3d	; 61
    19a4:	de b7       	in	r29, 0x3e	; 62
    19a6:	9a 83       	std	Y+2, r25	; 0x02
    19a8:	89 83       	std	Y+1, r24	; 0x01
    19aa:	7c 83       	std	Y+4, r23	; 0x04
    19ac:	6b 83       	std	Y+3, r22	; 0x03
{
	HANDLE_STATE_EVENTS
    19ae:	eb 81       	ldd	r30, Y+3	; 0x03
    19b0:	fc 81       	ldd	r31, Y+4	; 0x04
    19b2:	80 81       	ld	r24, Z
    19b4:	88 2f       	mov	r24, r24
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	81 30       	cpi	r24, 0x01	; 1
    19ba:	91 05       	cpc	r25, r1
    19bc:	49 f4       	brne	.+18     	; 0x19d0 <timeBomb_BOOM_handler+0x38>
	{
		ENTER
		{
			// BOOM

			TRANSITION_TO(STATE_MACHINE_EXIT, NO_ACTION) ;
    19be:	e9 81       	ldd	r30, Y+1	; 0x01
    19c0:	fa 81       	ldd	r31, Y+2	; 0x02
    19c2:	8d e6       	ldi	r24, 0x6D	; 109
    19c4:	95 e0       	ldi	r25, 0x05	; 5
    19c6:	90 87       	std	Z+8, r25	; 0x08
    19c8:	87 83       	std	Z+7, r24	; 0x07
    19ca:	82 e0       	ldi	r24, 0x02	; 2
    19cc:	8d 83       	std	Y+5, r24	; 0x05
    19ce:	01 c0       	rjmp	.+2      	; 0x19d2 <timeBomb_BOOM_handler+0x3a>
		}
		ENTER_HANDLED
	}
	HANDLE_STATE_EVENTS_DONE
    19d0:	1d 82       	std	Y+5, r1	; 0x05
    19d2:	8d 81       	ldd	r24, Y+5	; 0x05
}
END_DEFINE_STATE()
    19d4:	0f 90       	pop	r0
    19d6:	0f 90       	pop	r0
    19d8:	0f 90       	pop	r0
    19da:	0f 90       	pop	r0
    19dc:	0f 90       	pop	r0
    19de:	cf 91       	pop	r28
    19e0:	df 91       	pop	r29
    19e2:	08 95       	ret

000019e4 <malloc>:
    19e4:	cf 93       	push	r28
    19e6:	df 93       	push	r29
    19e8:	bc 01       	movw	r22, r24
    19ea:	82 30       	cpi	r24, 0x02	; 2
    19ec:	91 05       	cpc	r25, r1
    19ee:	10 f4       	brcc	.+4      	; 0x19f4 <malloc+0x10>
    19f0:	62 e0       	ldi	r22, 0x02	; 2
    19f2:	70 e0       	ldi	r23, 0x00	; 0
    19f4:	a0 91 80 06 	lds	r26, 0x0680
    19f8:	b0 91 81 06 	lds	r27, 0x0681
    19fc:	ed 01       	movw	r28, r26
    19fe:	e0 e0       	ldi	r30, 0x00	; 0
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	40 e0       	ldi	r20, 0x00	; 0
    1a04:	50 e0       	ldi	r21, 0x00	; 0
    1a06:	21 c0       	rjmp	.+66     	; 0x1a4a <malloc+0x66>
    1a08:	88 81       	ld	r24, Y
    1a0a:	99 81       	ldd	r25, Y+1	; 0x01
    1a0c:	86 17       	cp	r24, r22
    1a0e:	97 07       	cpc	r25, r23
    1a10:	69 f4       	brne	.+26     	; 0x1a2c <malloc+0x48>
    1a12:	8a 81       	ldd	r24, Y+2	; 0x02
    1a14:	9b 81       	ldd	r25, Y+3	; 0x03
    1a16:	30 97       	sbiw	r30, 0x00	; 0
    1a18:	19 f0       	breq	.+6      	; 0x1a20 <malloc+0x3c>
    1a1a:	93 83       	std	Z+3, r25	; 0x03
    1a1c:	82 83       	std	Z+2, r24	; 0x02
    1a1e:	04 c0       	rjmp	.+8      	; 0x1a28 <malloc+0x44>
    1a20:	90 93 81 06 	sts	0x0681, r25
    1a24:	80 93 80 06 	sts	0x0680, r24
    1a28:	fe 01       	movw	r30, r28
    1a2a:	34 c0       	rjmp	.+104    	; 0x1a94 <malloc+0xb0>
    1a2c:	68 17       	cp	r22, r24
    1a2e:	79 07       	cpc	r23, r25
    1a30:	38 f4       	brcc	.+14     	; 0x1a40 <malloc+0x5c>
    1a32:	41 15       	cp	r20, r1
    1a34:	51 05       	cpc	r21, r1
    1a36:	19 f0       	breq	.+6      	; 0x1a3e <malloc+0x5a>
    1a38:	84 17       	cp	r24, r20
    1a3a:	95 07       	cpc	r25, r21
    1a3c:	08 f4       	brcc	.+2      	; 0x1a40 <malloc+0x5c>
    1a3e:	ac 01       	movw	r20, r24
    1a40:	fe 01       	movw	r30, r28
    1a42:	8a 81       	ldd	r24, Y+2	; 0x02
    1a44:	9b 81       	ldd	r25, Y+3	; 0x03
    1a46:	9c 01       	movw	r18, r24
    1a48:	e9 01       	movw	r28, r18
    1a4a:	20 97       	sbiw	r28, 0x00	; 0
    1a4c:	e9 f6       	brne	.-70     	; 0x1a08 <malloc+0x24>
    1a4e:	41 15       	cp	r20, r1
    1a50:	51 05       	cpc	r21, r1
    1a52:	a9 f1       	breq	.+106    	; 0x1abe <malloc+0xda>
    1a54:	ca 01       	movw	r24, r20
    1a56:	86 1b       	sub	r24, r22
    1a58:	97 0b       	sbc	r25, r23
    1a5a:	04 97       	sbiw	r24, 0x04	; 4
    1a5c:	08 f4       	brcc	.+2      	; 0x1a60 <malloc+0x7c>
    1a5e:	ba 01       	movw	r22, r20
    1a60:	e0 e0       	ldi	r30, 0x00	; 0
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	2a c0       	rjmp	.+84     	; 0x1aba <malloc+0xd6>
    1a66:	8d 91       	ld	r24, X+
    1a68:	9c 91       	ld	r25, X
    1a6a:	11 97       	sbiw	r26, 0x01	; 1
    1a6c:	84 17       	cp	r24, r20
    1a6e:	95 07       	cpc	r25, r21
    1a70:	f9 f4       	brne	.+62     	; 0x1ab0 <malloc+0xcc>
    1a72:	64 17       	cp	r22, r20
    1a74:	75 07       	cpc	r23, r21
    1a76:	81 f4       	brne	.+32     	; 0x1a98 <malloc+0xb4>
    1a78:	12 96       	adiw	r26, 0x02	; 2
    1a7a:	8d 91       	ld	r24, X+
    1a7c:	9c 91       	ld	r25, X
    1a7e:	13 97       	sbiw	r26, 0x03	; 3
    1a80:	30 97       	sbiw	r30, 0x00	; 0
    1a82:	19 f0       	breq	.+6      	; 0x1a8a <malloc+0xa6>
    1a84:	93 83       	std	Z+3, r25	; 0x03
    1a86:	82 83       	std	Z+2, r24	; 0x02
    1a88:	04 c0       	rjmp	.+8      	; 0x1a92 <malloc+0xae>
    1a8a:	90 93 81 06 	sts	0x0681, r25
    1a8e:	80 93 80 06 	sts	0x0680, r24
    1a92:	fd 01       	movw	r30, r26
    1a94:	32 96       	adiw	r30, 0x02	; 2
    1a96:	4f c0       	rjmp	.+158    	; 0x1b36 <malloc+0x152>
    1a98:	ca 01       	movw	r24, r20
    1a9a:	86 1b       	sub	r24, r22
    1a9c:	97 0b       	sbc	r25, r23
    1a9e:	fd 01       	movw	r30, r26
    1aa0:	e8 0f       	add	r30, r24
    1aa2:	f9 1f       	adc	r31, r25
    1aa4:	61 93       	st	Z+, r22
    1aa6:	71 93       	st	Z+, r23
    1aa8:	02 97       	sbiw	r24, 0x02	; 2
    1aaa:	8d 93       	st	X+, r24
    1aac:	9c 93       	st	X, r25
    1aae:	43 c0       	rjmp	.+134    	; 0x1b36 <malloc+0x152>
    1ab0:	fd 01       	movw	r30, r26
    1ab2:	82 81       	ldd	r24, Z+2	; 0x02
    1ab4:	93 81       	ldd	r25, Z+3	; 0x03
    1ab6:	9c 01       	movw	r18, r24
    1ab8:	d9 01       	movw	r26, r18
    1aba:	10 97       	sbiw	r26, 0x00	; 0
    1abc:	a1 f6       	brne	.-88     	; 0x1a66 <malloc+0x82>
    1abe:	80 91 7e 06 	lds	r24, 0x067E
    1ac2:	90 91 7f 06 	lds	r25, 0x067F
    1ac6:	89 2b       	or	r24, r25
    1ac8:	41 f4       	brne	.+16     	; 0x1ada <malloc+0xf6>
    1aca:	80 91 d6 05 	lds	r24, 0x05D6
    1ace:	90 91 d7 05 	lds	r25, 0x05D7
    1ad2:	90 93 7f 06 	sts	0x067F, r25
    1ad6:	80 93 7e 06 	sts	0x067E, r24
    1ada:	40 91 d8 05 	lds	r20, 0x05D8
    1ade:	50 91 d9 05 	lds	r21, 0x05D9
    1ae2:	41 15       	cp	r20, r1
    1ae4:	51 05       	cpc	r21, r1
    1ae6:	41 f4       	brne	.+16     	; 0x1af8 <malloc+0x114>
    1ae8:	4d b7       	in	r20, 0x3d	; 61
    1aea:	5e b7       	in	r21, 0x3e	; 62
    1aec:	80 91 d4 05 	lds	r24, 0x05D4
    1af0:	90 91 d5 05 	lds	r25, 0x05D5
    1af4:	48 1b       	sub	r20, r24
    1af6:	59 0b       	sbc	r21, r25
    1af8:	20 91 7e 06 	lds	r18, 0x067E
    1afc:	30 91 7f 06 	lds	r19, 0x067F
    1b00:	24 17       	cp	r18, r20
    1b02:	35 07       	cpc	r19, r21
    1b04:	b0 f4       	brcc	.+44     	; 0x1b32 <malloc+0x14e>
    1b06:	ca 01       	movw	r24, r20
    1b08:	82 1b       	sub	r24, r18
    1b0a:	93 0b       	sbc	r25, r19
    1b0c:	86 17       	cp	r24, r22
    1b0e:	97 07       	cpc	r25, r23
    1b10:	80 f0       	brcs	.+32     	; 0x1b32 <malloc+0x14e>
    1b12:	ab 01       	movw	r20, r22
    1b14:	4e 5f       	subi	r20, 0xFE	; 254
    1b16:	5f 4f       	sbci	r21, 0xFF	; 255
    1b18:	84 17       	cp	r24, r20
    1b1a:	95 07       	cpc	r25, r21
    1b1c:	50 f0       	brcs	.+20     	; 0x1b32 <malloc+0x14e>
    1b1e:	42 0f       	add	r20, r18
    1b20:	53 1f       	adc	r21, r19
    1b22:	50 93 7f 06 	sts	0x067F, r21
    1b26:	40 93 7e 06 	sts	0x067E, r20
    1b2a:	f9 01       	movw	r30, r18
    1b2c:	61 93       	st	Z+, r22
    1b2e:	71 93       	st	Z+, r23
    1b30:	02 c0       	rjmp	.+4      	; 0x1b36 <malloc+0x152>
    1b32:	e0 e0       	ldi	r30, 0x00	; 0
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	cf 01       	movw	r24, r30
    1b38:	df 91       	pop	r29
    1b3a:	cf 91       	pop	r28
    1b3c:	08 95       	ret

00001b3e <free>:
    1b3e:	cf 93       	push	r28
    1b40:	df 93       	push	r29
    1b42:	00 97       	sbiw	r24, 0x00	; 0
    1b44:	09 f4       	brne	.+2      	; 0x1b48 <free+0xa>
    1b46:	50 c0       	rjmp	.+160    	; 0x1be8 <free+0xaa>
    1b48:	ec 01       	movw	r28, r24
    1b4a:	22 97       	sbiw	r28, 0x02	; 2
    1b4c:	1b 82       	std	Y+3, r1	; 0x03
    1b4e:	1a 82       	std	Y+2, r1	; 0x02
    1b50:	a0 91 80 06 	lds	r26, 0x0680
    1b54:	b0 91 81 06 	lds	r27, 0x0681
    1b58:	10 97       	sbiw	r26, 0x00	; 0
    1b5a:	09 f1       	breq	.+66     	; 0x1b9e <free+0x60>
    1b5c:	40 e0       	ldi	r20, 0x00	; 0
    1b5e:	50 e0       	ldi	r21, 0x00	; 0
    1b60:	ac 17       	cp	r26, r28
    1b62:	bd 07       	cpc	r27, r29
    1b64:	08 f1       	brcs	.+66     	; 0x1ba8 <free+0x6a>
    1b66:	bb 83       	std	Y+3, r27	; 0x03
    1b68:	aa 83       	std	Y+2, r26	; 0x02
    1b6a:	fe 01       	movw	r30, r28
    1b6c:	21 91       	ld	r18, Z+
    1b6e:	31 91       	ld	r19, Z+
    1b70:	e2 0f       	add	r30, r18
    1b72:	f3 1f       	adc	r31, r19
    1b74:	ae 17       	cp	r26, r30
    1b76:	bf 07       	cpc	r27, r31
    1b78:	79 f4       	brne	.+30     	; 0x1b98 <free+0x5a>
    1b7a:	8d 91       	ld	r24, X+
    1b7c:	9c 91       	ld	r25, X
    1b7e:	11 97       	sbiw	r26, 0x01	; 1
    1b80:	28 0f       	add	r18, r24
    1b82:	39 1f       	adc	r19, r25
    1b84:	2e 5f       	subi	r18, 0xFE	; 254
    1b86:	3f 4f       	sbci	r19, 0xFF	; 255
    1b88:	39 83       	std	Y+1, r19	; 0x01
    1b8a:	28 83       	st	Y, r18
    1b8c:	12 96       	adiw	r26, 0x02	; 2
    1b8e:	8d 91       	ld	r24, X+
    1b90:	9c 91       	ld	r25, X
    1b92:	13 97       	sbiw	r26, 0x03	; 3
    1b94:	9b 83       	std	Y+3, r25	; 0x03
    1b96:	8a 83       	std	Y+2, r24	; 0x02
    1b98:	41 15       	cp	r20, r1
    1b9a:	51 05       	cpc	r21, r1
    1b9c:	71 f4       	brne	.+28     	; 0x1bba <free+0x7c>
    1b9e:	d0 93 81 06 	sts	0x0681, r29
    1ba2:	c0 93 80 06 	sts	0x0680, r28
    1ba6:	20 c0       	rjmp	.+64     	; 0x1be8 <free+0xaa>
    1ba8:	12 96       	adiw	r26, 0x02	; 2
    1baa:	8d 91       	ld	r24, X+
    1bac:	9c 91       	ld	r25, X
    1bae:	13 97       	sbiw	r26, 0x03	; 3
    1bb0:	ad 01       	movw	r20, r26
    1bb2:	00 97       	sbiw	r24, 0x00	; 0
    1bb4:	11 f0       	breq	.+4      	; 0x1bba <free+0x7c>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	d3 cf       	rjmp	.-90     	; 0x1b60 <free+0x22>
    1bba:	fa 01       	movw	r30, r20
    1bbc:	d3 83       	std	Z+3, r29	; 0x03
    1bbe:	c2 83       	std	Z+2, r28	; 0x02
    1bc0:	21 91       	ld	r18, Z+
    1bc2:	31 91       	ld	r19, Z+
    1bc4:	e2 0f       	add	r30, r18
    1bc6:	f3 1f       	adc	r31, r19
    1bc8:	ce 17       	cp	r28, r30
    1bca:	df 07       	cpc	r29, r31
    1bcc:	69 f4       	brne	.+26     	; 0x1be8 <free+0xaa>
    1bce:	88 81       	ld	r24, Y
    1bd0:	99 81       	ldd	r25, Y+1	; 0x01
    1bd2:	28 0f       	add	r18, r24
    1bd4:	39 1f       	adc	r19, r25
    1bd6:	2e 5f       	subi	r18, 0xFE	; 254
    1bd8:	3f 4f       	sbci	r19, 0xFF	; 255
    1bda:	fa 01       	movw	r30, r20
    1bdc:	31 83       	std	Z+1, r19	; 0x01
    1bde:	20 83       	st	Z, r18
    1be0:	8a 81       	ldd	r24, Y+2	; 0x02
    1be2:	9b 81       	ldd	r25, Y+3	; 0x03
    1be4:	93 83       	std	Z+3, r25	; 0x03
    1be6:	82 83       	std	Z+2, r24	; 0x02
    1be8:	df 91       	pop	r29
    1bea:	cf 91       	pop	r28
    1bec:	08 95       	ret

00001bee <memset>:
    1bee:	dc 01       	movw	r26, r24
    1bf0:	01 c0       	rjmp	.+2      	; 0x1bf4 <memset+0x6>
    1bf2:	6d 93       	st	X+, r22
    1bf4:	41 50       	subi	r20, 0x01	; 1
    1bf6:	50 40       	sbci	r21, 0x00	; 0
    1bf8:	e0 f7       	brcc	.-8      	; 0x1bf2 <memset+0x4>
    1bfa:	08 95       	ret

00001bfc <printf>:
    1bfc:	a0 e0       	ldi	r26, 0x00	; 0
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	e4 e0       	ldi	r30, 0x04	; 4
    1c02:	fe e0       	ldi	r31, 0x0E	; 14
    1c04:	0c 94 dc 10 	jmp	0x21b8	; 0x21b8 <__prologue_saves__+0x20>
    1c08:	fe 01       	movw	r30, r28
    1c0a:	35 96       	adiw	r30, 0x05	; 5
    1c0c:	61 91       	ld	r22, Z+
    1c0e:	71 91       	ld	r23, Z+
    1c10:	80 91 84 06 	lds	r24, 0x0684
    1c14:	90 91 85 06 	lds	r25, 0x0685
    1c18:	af 01       	movw	r20, r30
    1c1a:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <vfprintf>
    1c1e:	20 96       	adiw	r28, 0x00	; 0
    1c20:	e2 e0       	ldi	r30, 0x02	; 2
    1c22:	0c 94 f8 10 	jmp	0x21f0	; 0x21f0 <__epilogue_restores__+0x20>

00001c26 <putchar>:
    1c26:	60 91 84 06 	lds	r22, 0x0684
    1c2a:	70 91 85 06 	lds	r23, 0x0685
    1c2e:	0e 94 42 10 	call	0x2084	; 0x2084 <fputc>
    1c32:	08 95       	ret

00001c34 <puts>:
    1c34:	0f 93       	push	r16
    1c36:	1f 93       	push	r17
    1c38:	cf 93       	push	r28
    1c3a:	df 93       	push	r29
    1c3c:	8c 01       	movw	r16, r24
    1c3e:	e0 91 84 06 	lds	r30, 0x0684
    1c42:	f0 91 85 06 	lds	r31, 0x0685
    1c46:	83 81       	ldd	r24, Z+3	; 0x03
    1c48:	81 ff       	sbrs	r24, 1
    1c4a:	21 c0       	rjmp	.+66     	; 0x1c8e <puts+0x5a>
    1c4c:	c0 e0       	ldi	r28, 0x00	; 0
    1c4e:	d0 e0       	ldi	r29, 0x00	; 0
    1c50:	0d c0       	rjmp	.+26     	; 0x1c6c <puts+0x38>
    1c52:	e0 91 84 06 	lds	r30, 0x0684
    1c56:	f0 91 85 06 	lds	r31, 0x0685
    1c5a:	20 85       	ldd	r18, Z+8	; 0x08
    1c5c:	31 85       	ldd	r19, Z+9	; 0x09
    1c5e:	bf 01       	movw	r22, r30
    1c60:	f9 01       	movw	r30, r18
    1c62:	09 95       	icall
    1c64:	89 2b       	or	r24, r25
    1c66:	11 f0       	breq	.+4      	; 0x1c6c <puts+0x38>
    1c68:	cf ef       	ldi	r28, 0xFF	; 255
    1c6a:	df ef       	ldi	r29, 0xFF	; 255
    1c6c:	f8 01       	movw	r30, r16
    1c6e:	81 91       	ld	r24, Z+
    1c70:	8f 01       	movw	r16, r30
    1c72:	88 23       	and	r24, r24
    1c74:	71 f7       	brne	.-36     	; 0x1c52 <puts+0x1e>
    1c76:	e0 91 84 06 	lds	r30, 0x0684
    1c7a:	f0 91 85 06 	lds	r31, 0x0685
    1c7e:	20 85       	ldd	r18, Z+8	; 0x08
    1c80:	31 85       	ldd	r19, Z+9	; 0x09
    1c82:	8a e0       	ldi	r24, 0x0A	; 10
    1c84:	bf 01       	movw	r22, r30
    1c86:	f9 01       	movw	r30, r18
    1c88:	09 95       	icall
    1c8a:	89 2b       	or	r24, r25
    1c8c:	11 f0       	breq	.+4      	; 0x1c92 <puts+0x5e>
    1c8e:	cf ef       	ldi	r28, 0xFF	; 255
    1c90:	df ef       	ldi	r29, 0xFF	; 255
    1c92:	ce 01       	movw	r24, r28
    1c94:	df 91       	pop	r29
    1c96:	cf 91       	pop	r28
    1c98:	1f 91       	pop	r17
    1c9a:	0f 91       	pop	r16
    1c9c:	08 95       	ret

00001c9e <vfprintf>:
    1c9e:	ab e0       	ldi	r26, 0x0B	; 11
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	e5 e5       	ldi	r30, 0x55	; 85
    1ca4:	fe e0       	ldi	r31, 0x0E	; 14
    1ca6:	0c 94 cc 10 	jmp	0x2198	; 0x2198 <__prologue_saves__>
    1caa:	3c 01       	movw	r6, r24
    1cac:	2b 01       	movw	r4, r22
    1cae:	5a 01       	movw	r10, r20
    1cb0:	fc 01       	movw	r30, r24
    1cb2:	17 82       	std	Z+7, r1	; 0x07
    1cb4:	16 82       	std	Z+6, r1	; 0x06
    1cb6:	83 81       	ldd	r24, Z+3	; 0x03
    1cb8:	81 fd       	sbrc	r24, 1
    1cba:	03 c0       	rjmp	.+6      	; 0x1cc2 <vfprintf+0x24>
    1cbc:	6f ef       	ldi	r22, 0xFF	; 255
    1cbe:	7f ef       	ldi	r23, 0xFF	; 255
    1cc0:	c6 c1       	rjmp	.+908    	; 0x204e <vfprintf+0x3b0>
    1cc2:	9a e0       	ldi	r25, 0x0A	; 10
    1cc4:	89 2e       	mov	r8, r25
    1cc6:	1e 01       	movw	r2, r28
    1cc8:	08 94       	sec
    1cca:	21 1c       	adc	r2, r1
    1ccc:	31 1c       	adc	r3, r1
    1cce:	f3 01       	movw	r30, r6
    1cd0:	23 81       	ldd	r18, Z+3	; 0x03
    1cd2:	f2 01       	movw	r30, r4
    1cd4:	23 fd       	sbrc	r18, 3
    1cd6:	85 91       	lpm	r24, Z+
    1cd8:	23 ff       	sbrs	r18, 3
    1cda:	81 91       	ld	r24, Z+
    1cdc:	2f 01       	movw	r4, r30
    1cde:	88 23       	and	r24, r24
    1ce0:	09 f4       	brne	.+2      	; 0x1ce4 <vfprintf+0x46>
    1ce2:	b2 c1       	rjmp	.+868    	; 0x2048 <vfprintf+0x3aa>
    1ce4:	85 32       	cpi	r24, 0x25	; 37
    1ce6:	39 f4       	brne	.+14     	; 0x1cf6 <vfprintf+0x58>
    1ce8:	23 fd       	sbrc	r18, 3
    1cea:	85 91       	lpm	r24, Z+
    1cec:	23 ff       	sbrs	r18, 3
    1cee:	81 91       	ld	r24, Z+
    1cf0:	2f 01       	movw	r4, r30
    1cf2:	85 32       	cpi	r24, 0x25	; 37
    1cf4:	29 f4       	brne	.+10     	; 0x1d00 <vfprintf+0x62>
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	b3 01       	movw	r22, r6
    1cfa:	0e 94 42 10 	call	0x2084	; 0x2084 <fputc>
    1cfe:	e7 cf       	rjmp	.-50     	; 0x1cce <vfprintf+0x30>
    1d00:	98 2f       	mov	r25, r24
    1d02:	ff 24       	eor	r15, r15
    1d04:	ee 24       	eor	r14, r14
    1d06:	99 24       	eor	r9, r9
    1d08:	ff e1       	ldi	r31, 0x1F	; 31
    1d0a:	ff 15       	cp	r31, r15
    1d0c:	d0 f0       	brcs	.+52     	; 0x1d42 <vfprintf+0xa4>
    1d0e:	9b 32       	cpi	r25, 0x2B	; 43
    1d10:	69 f0       	breq	.+26     	; 0x1d2c <vfprintf+0x8e>
    1d12:	9c 32       	cpi	r25, 0x2C	; 44
    1d14:	28 f4       	brcc	.+10     	; 0x1d20 <vfprintf+0x82>
    1d16:	90 32       	cpi	r25, 0x20	; 32
    1d18:	59 f0       	breq	.+22     	; 0x1d30 <vfprintf+0x92>
    1d1a:	93 32       	cpi	r25, 0x23	; 35
    1d1c:	91 f4       	brne	.+36     	; 0x1d42 <vfprintf+0xa4>
    1d1e:	0e c0       	rjmp	.+28     	; 0x1d3c <vfprintf+0x9e>
    1d20:	9d 32       	cpi	r25, 0x2D	; 45
    1d22:	49 f0       	breq	.+18     	; 0x1d36 <vfprintf+0x98>
    1d24:	90 33       	cpi	r25, 0x30	; 48
    1d26:	69 f4       	brne	.+26     	; 0x1d42 <vfprintf+0xa4>
    1d28:	41 e0       	ldi	r20, 0x01	; 1
    1d2a:	24 c0       	rjmp	.+72     	; 0x1d74 <vfprintf+0xd6>
    1d2c:	52 e0       	ldi	r21, 0x02	; 2
    1d2e:	f5 2a       	or	r15, r21
    1d30:	84 e0       	ldi	r24, 0x04	; 4
    1d32:	f8 2a       	or	r15, r24
    1d34:	28 c0       	rjmp	.+80     	; 0x1d86 <vfprintf+0xe8>
    1d36:	98 e0       	ldi	r25, 0x08	; 8
    1d38:	f9 2a       	or	r15, r25
    1d3a:	25 c0       	rjmp	.+74     	; 0x1d86 <vfprintf+0xe8>
    1d3c:	e0 e1       	ldi	r30, 0x10	; 16
    1d3e:	fe 2a       	or	r15, r30
    1d40:	22 c0       	rjmp	.+68     	; 0x1d86 <vfprintf+0xe8>
    1d42:	f7 fc       	sbrc	r15, 7
    1d44:	29 c0       	rjmp	.+82     	; 0x1d98 <vfprintf+0xfa>
    1d46:	89 2f       	mov	r24, r25
    1d48:	80 53       	subi	r24, 0x30	; 48
    1d4a:	8a 30       	cpi	r24, 0x0A	; 10
    1d4c:	70 f4       	brcc	.+28     	; 0x1d6a <vfprintf+0xcc>
    1d4e:	f6 fe       	sbrs	r15, 6
    1d50:	05 c0       	rjmp	.+10     	; 0x1d5c <vfprintf+0xbe>
    1d52:	98 9c       	mul	r9, r8
    1d54:	90 2c       	mov	r9, r0
    1d56:	11 24       	eor	r1, r1
    1d58:	98 0e       	add	r9, r24
    1d5a:	15 c0       	rjmp	.+42     	; 0x1d86 <vfprintf+0xe8>
    1d5c:	e8 9c       	mul	r14, r8
    1d5e:	e0 2c       	mov	r14, r0
    1d60:	11 24       	eor	r1, r1
    1d62:	e8 0e       	add	r14, r24
    1d64:	f0 e2       	ldi	r31, 0x20	; 32
    1d66:	ff 2a       	or	r15, r31
    1d68:	0e c0       	rjmp	.+28     	; 0x1d86 <vfprintf+0xe8>
    1d6a:	9e 32       	cpi	r25, 0x2E	; 46
    1d6c:	29 f4       	brne	.+10     	; 0x1d78 <vfprintf+0xda>
    1d6e:	f6 fc       	sbrc	r15, 6
    1d70:	6b c1       	rjmp	.+726    	; 0x2048 <vfprintf+0x3aa>
    1d72:	40 e4       	ldi	r20, 0x40	; 64
    1d74:	f4 2a       	or	r15, r20
    1d76:	07 c0       	rjmp	.+14     	; 0x1d86 <vfprintf+0xe8>
    1d78:	9c 36       	cpi	r25, 0x6C	; 108
    1d7a:	19 f4       	brne	.+6      	; 0x1d82 <vfprintf+0xe4>
    1d7c:	50 e8       	ldi	r21, 0x80	; 128
    1d7e:	f5 2a       	or	r15, r21
    1d80:	02 c0       	rjmp	.+4      	; 0x1d86 <vfprintf+0xe8>
    1d82:	98 36       	cpi	r25, 0x68	; 104
    1d84:	49 f4       	brne	.+18     	; 0x1d98 <vfprintf+0xfa>
    1d86:	f2 01       	movw	r30, r4
    1d88:	23 fd       	sbrc	r18, 3
    1d8a:	95 91       	lpm	r25, Z+
    1d8c:	23 ff       	sbrs	r18, 3
    1d8e:	91 91       	ld	r25, Z+
    1d90:	2f 01       	movw	r4, r30
    1d92:	99 23       	and	r25, r25
    1d94:	09 f0       	breq	.+2      	; 0x1d98 <vfprintf+0xfa>
    1d96:	b8 cf       	rjmp	.-144    	; 0x1d08 <vfprintf+0x6a>
    1d98:	89 2f       	mov	r24, r25
    1d9a:	85 54       	subi	r24, 0x45	; 69
    1d9c:	83 30       	cpi	r24, 0x03	; 3
    1d9e:	18 f0       	brcs	.+6      	; 0x1da6 <vfprintf+0x108>
    1da0:	80 52       	subi	r24, 0x20	; 32
    1da2:	83 30       	cpi	r24, 0x03	; 3
    1da4:	38 f4       	brcc	.+14     	; 0x1db4 <vfprintf+0x116>
    1da6:	44 e0       	ldi	r20, 0x04	; 4
    1da8:	50 e0       	ldi	r21, 0x00	; 0
    1daa:	a4 0e       	add	r10, r20
    1dac:	b5 1e       	adc	r11, r21
    1dae:	5f e3       	ldi	r21, 0x3F	; 63
    1db0:	59 83       	std	Y+1, r21	; 0x01
    1db2:	0f c0       	rjmp	.+30     	; 0x1dd2 <vfprintf+0x134>
    1db4:	93 36       	cpi	r25, 0x63	; 99
    1db6:	31 f0       	breq	.+12     	; 0x1dc4 <vfprintf+0x126>
    1db8:	93 37       	cpi	r25, 0x73	; 115
    1dba:	79 f0       	breq	.+30     	; 0x1dda <vfprintf+0x13c>
    1dbc:	93 35       	cpi	r25, 0x53	; 83
    1dbe:	09 f0       	breq	.+2      	; 0x1dc2 <vfprintf+0x124>
    1dc0:	56 c0       	rjmp	.+172    	; 0x1e6e <vfprintf+0x1d0>
    1dc2:	20 c0       	rjmp	.+64     	; 0x1e04 <vfprintf+0x166>
    1dc4:	f5 01       	movw	r30, r10
    1dc6:	80 81       	ld	r24, Z
    1dc8:	89 83       	std	Y+1, r24	; 0x01
    1dca:	42 e0       	ldi	r20, 0x02	; 2
    1dcc:	50 e0       	ldi	r21, 0x00	; 0
    1dce:	a4 0e       	add	r10, r20
    1dd0:	b5 1e       	adc	r11, r21
    1dd2:	61 01       	movw	r12, r2
    1dd4:	01 e0       	ldi	r16, 0x01	; 1
    1dd6:	10 e0       	ldi	r17, 0x00	; 0
    1dd8:	12 c0       	rjmp	.+36     	; 0x1dfe <vfprintf+0x160>
    1dda:	f5 01       	movw	r30, r10
    1ddc:	c0 80       	ld	r12, Z
    1dde:	d1 80       	ldd	r13, Z+1	; 0x01
    1de0:	f6 fc       	sbrc	r15, 6
    1de2:	03 c0       	rjmp	.+6      	; 0x1dea <vfprintf+0x14c>
    1de4:	6f ef       	ldi	r22, 0xFF	; 255
    1de6:	7f ef       	ldi	r23, 0xFF	; 255
    1de8:	02 c0       	rjmp	.+4      	; 0x1dee <vfprintf+0x150>
    1dea:	69 2d       	mov	r22, r9
    1dec:	70 e0       	ldi	r23, 0x00	; 0
    1dee:	42 e0       	ldi	r20, 0x02	; 2
    1df0:	50 e0       	ldi	r21, 0x00	; 0
    1df2:	a4 0e       	add	r10, r20
    1df4:	b5 1e       	adc	r11, r21
    1df6:	c6 01       	movw	r24, r12
    1df8:	0e 94 37 10 	call	0x206e	; 0x206e <strnlen>
    1dfc:	8c 01       	movw	r16, r24
    1dfe:	5f e7       	ldi	r21, 0x7F	; 127
    1e00:	f5 22       	and	r15, r21
    1e02:	14 c0       	rjmp	.+40     	; 0x1e2c <vfprintf+0x18e>
    1e04:	f5 01       	movw	r30, r10
    1e06:	c0 80       	ld	r12, Z
    1e08:	d1 80       	ldd	r13, Z+1	; 0x01
    1e0a:	f6 fc       	sbrc	r15, 6
    1e0c:	03 c0       	rjmp	.+6      	; 0x1e14 <vfprintf+0x176>
    1e0e:	6f ef       	ldi	r22, 0xFF	; 255
    1e10:	7f ef       	ldi	r23, 0xFF	; 255
    1e12:	02 c0       	rjmp	.+4      	; 0x1e18 <vfprintf+0x17a>
    1e14:	69 2d       	mov	r22, r9
    1e16:	70 e0       	ldi	r23, 0x00	; 0
    1e18:	42 e0       	ldi	r20, 0x02	; 2
    1e1a:	50 e0       	ldi	r21, 0x00	; 0
    1e1c:	a4 0e       	add	r10, r20
    1e1e:	b5 1e       	adc	r11, r21
    1e20:	c6 01       	movw	r24, r12
    1e22:	0e 94 2c 10 	call	0x2058	; 0x2058 <strnlen_P>
    1e26:	8c 01       	movw	r16, r24
    1e28:	50 e8       	ldi	r21, 0x80	; 128
    1e2a:	f5 2a       	or	r15, r21
    1e2c:	f3 fe       	sbrs	r15, 3
    1e2e:	07 c0       	rjmp	.+14     	; 0x1e3e <vfprintf+0x1a0>
    1e30:	1a c0       	rjmp	.+52     	; 0x1e66 <vfprintf+0x1c8>
    1e32:	80 e2       	ldi	r24, 0x20	; 32
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	b3 01       	movw	r22, r6
    1e38:	0e 94 42 10 	call	0x2084	; 0x2084 <fputc>
    1e3c:	ea 94       	dec	r14
    1e3e:	8e 2d       	mov	r24, r14
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	08 17       	cp	r16, r24
    1e44:	19 07       	cpc	r17, r25
    1e46:	a8 f3       	brcs	.-22     	; 0x1e32 <vfprintf+0x194>
    1e48:	0e c0       	rjmp	.+28     	; 0x1e66 <vfprintf+0x1c8>
    1e4a:	f6 01       	movw	r30, r12
    1e4c:	f7 fc       	sbrc	r15, 7
    1e4e:	85 91       	lpm	r24, Z+
    1e50:	f7 fe       	sbrs	r15, 7
    1e52:	81 91       	ld	r24, Z+
    1e54:	6f 01       	movw	r12, r30
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	b3 01       	movw	r22, r6
    1e5a:	0e 94 42 10 	call	0x2084	; 0x2084 <fputc>
    1e5e:	e1 10       	cpse	r14, r1
    1e60:	ea 94       	dec	r14
    1e62:	01 50       	subi	r16, 0x01	; 1
    1e64:	10 40       	sbci	r17, 0x00	; 0
    1e66:	01 15       	cp	r16, r1
    1e68:	11 05       	cpc	r17, r1
    1e6a:	79 f7       	brne	.-34     	; 0x1e4a <vfprintf+0x1ac>
    1e6c:	ea c0       	rjmp	.+468    	; 0x2042 <vfprintf+0x3a4>
    1e6e:	94 36       	cpi	r25, 0x64	; 100
    1e70:	11 f0       	breq	.+4      	; 0x1e76 <vfprintf+0x1d8>
    1e72:	99 36       	cpi	r25, 0x69	; 105
    1e74:	69 f5       	brne	.+90     	; 0x1ed0 <vfprintf+0x232>
    1e76:	f7 fe       	sbrs	r15, 7
    1e78:	08 c0       	rjmp	.+16     	; 0x1e8a <vfprintf+0x1ec>
    1e7a:	f5 01       	movw	r30, r10
    1e7c:	20 81       	ld	r18, Z
    1e7e:	31 81       	ldd	r19, Z+1	; 0x01
    1e80:	42 81       	ldd	r20, Z+2	; 0x02
    1e82:	53 81       	ldd	r21, Z+3	; 0x03
    1e84:	84 e0       	ldi	r24, 0x04	; 4
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	0a c0       	rjmp	.+20     	; 0x1e9e <vfprintf+0x200>
    1e8a:	f5 01       	movw	r30, r10
    1e8c:	80 81       	ld	r24, Z
    1e8e:	91 81       	ldd	r25, Z+1	; 0x01
    1e90:	9c 01       	movw	r18, r24
    1e92:	44 27       	eor	r20, r20
    1e94:	37 fd       	sbrc	r19, 7
    1e96:	40 95       	com	r20
    1e98:	54 2f       	mov	r21, r20
    1e9a:	82 e0       	ldi	r24, 0x02	; 2
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	a8 0e       	add	r10, r24
    1ea0:	b9 1e       	adc	r11, r25
    1ea2:	9f e6       	ldi	r25, 0x6F	; 111
    1ea4:	f9 22       	and	r15, r25
    1ea6:	57 ff       	sbrs	r21, 7
    1ea8:	09 c0       	rjmp	.+18     	; 0x1ebc <vfprintf+0x21e>
    1eaa:	50 95       	com	r21
    1eac:	40 95       	com	r20
    1eae:	30 95       	com	r19
    1eb0:	21 95       	neg	r18
    1eb2:	3f 4f       	sbci	r19, 0xFF	; 255
    1eb4:	4f 4f       	sbci	r20, 0xFF	; 255
    1eb6:	5f 4f       	sbci	r21, 0xFF	; 255
    1eb8:	e0 e8       	ldi	r30, 0x80	; 128
    1eba:	fe 2a       	or	r15, r30
    1ebc:	ca 01       	movw	r24, r20
    1ebe:	b9 01       	movw	r22, r18
    1ec0:	a1 01       	movw	r20, r2
    1ec2:	2a e0       	ldi	r18, 0x0A	; 10
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__ultoa_invert>
    1eca:	d8 2e       	mov	r13, r24
    1ecc:	d2 18       	sub	r13, r2
    1ece:	40 c0       	rjmp	.+128    	; 0x1f50 <vfprintf+0x2b2>
    1ed0:	95 37       	cpi	r25, 0x75	; 117
    1ed2:	29 f4       	brne	.+10     	; 0x1ede <vfprintf+0x240>
    1ed4:	1f 2d       	mov	r17, r15
    1ed6:	1f 7e       	andi	r17, 0xEF	; 239
    1ed8:	2a e0       	ldi	r18, 0x0A	; 10
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	1d c0       	rjmp	.+58     	; 0x1f18 <vfprintf+0x27a>
    1ede:	1f 2d       	mov	r17, r15
    1ee0:	19 7f       	andi	r17, 0xF9	; 249
    1ee2:	9f 36       	cpi	r25, 0x6F	; 111
    1ee4:	61 f0       	breq	.+24     	; 0x1efe <vfprintf+0x260>
    1ee6:	90 37       	cpi	r25, 0x70	; 112
    1ee8:	20 f4       	brcc	.+8      	; 0x1ef2 <vfprintf+0x254>
    1eea:	98 35       	cpi	r25, 0x58	; 88
    1eec:	09 f0       	breq	.+2      	; 0x1ef0 <vfprintf+0x252>
    1eee:	ac c0       	rjmp	.+344    	; 0x2048 <vfprintf+0x3aa>
    1ef0:	0f c0       	rjmp	.+30     	; 0x1f10 <vfprintf+0x272>
    1ef2:	90 37       	cpi	r25, 0x70	; 112
    1ef4:	39 f0       	breq	.+14     	; 0x1f04 <vfprintf+0x266>
    1ef6:	98 37       	cpi	r25, 0x78	; 120
    1ef8:	09 f0       	breq	.+2      	; 0x1efc <vfprintf+0x25e>
    1efa:	a6 c0       	rjmp	.+332    	; 0x2048 <vfprintf+0x3aa>
    1efc:	04 c0       	rjmp	.+8      	; 0x1f06 <vfprintf+0x268>
    1efe:	28 e0       	ldi	r18, 0x08	; 8
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	0a c0       	rjmp	.+20     	; 0x1f18 <vfprintf+0x27a>
    1f04:	10 61       	ori	r17, 0x10	; 16
    1f06:	14 fd       	sbrc	r17, 4
    1f08:	14 60       	ori	r17, 0x04	; 4
    1f0a:	20 e1       	ldi	r18, 0x10	; 16
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	04 c0       	rjmp	.+8      	; 0x1f18 <vfprintf+0x27a>
    1f10:	14 fd       	sbrc	r17, 4
    1f12:	16 60       	ori	r17, 0x06	; 6
    1f14:	20 e1       	ldi	r18, 0x10	; 16
    1f16:	32 e0       	ldi	r19, 0x02	; 2
    1f18:	17 ff       	sbrs	r17, 7
    1f1a:	08 c0       	rjmp	.+16     	; 0x1f2c <vfprintf+0x28e>
    1f1c:	f5 01       	movw	r30, r10
    1f1e:	60 81       	ld	r22, Z
    1f20:	71 81       	ldd	r23, Z+1	; 0x01
    1f22:	82 81       	ldd	r24, Z+2	; 0x02
    1f24:	93 81       	ldd	r25, Z+3	; 0x03
    1f26:	44 e0       	ldi	r20, 0x04	; 4
    1f28:	50 e0       	ldi	r21, 0x00	; 0
    1f2a:	08 c0       	rjmp	.+16     	; 0x1f3c <vfprintf+0x29e>
    1f2c:	f5 01       	movw	r30, r10
    1f2e:	80 81       	ld	r24, Z
    1f30:	91 81       	ldd	r25, Z+1	; 0x01
    1f32:	bc 01       	movw	r22, r24
    1f34:	80 e0       	ldi	r24, 0x00	; 0
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	42 e0       	ldi	r20, 0x02	; 2
    1f3a:	50 e0       	ldi	r21, 0x00	; 0
    1f3c:	a4 0e       	add	r10, r20
    1f3e:	b5 1e       	adc	r11, r21
    1f40:	a1 01       	movw	r20, r2
    1f42:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__ultoa_invert>
    1f46:	d8 2e       	mov	r13, r24
    1f48:	d2 18       	sub	r13, r2
    1f4a:	8f e7       	ldi	r24, 0x7F	; 127
    1f4c:	f8 2e       	mov	r15, r24
    1f4e:	f1 22       	and	r15, r17
    1f50:	f6 fe       	sbrs	r15, 6
    1f52:	0b c0       	rjmp	.+22     	; 0x1f6a <vfprintf+0x2cc>
    1f54:	5e ef       	ldi	r21, 0xFE	; 254
    1f56:	f5 22       	and	r15, r21
    1f58:	d9 14       	cp	r13, r9
    1f5a:	38 f4       	brcc	.+14     	; 0x1f6a <vfprintf+0x2cc>
    1f5c:	f4 fe       	sbrs	r15, 4
    1f5e:	07 c0       	rjmp	.+14     	; 0x1f6e <vfprintf+0x2d0>
    1f60:	f2 fc       	sbrc	r15, 2
    1f62:	05 c0       	rjmp	.+10     	; 0x1f6e <vfprintf+0x2d0>
    1f64:	8f ee       	ldi	r24, 0xEF	; 239
    1f66:	f8 22       	and	r15, r24
    1f68:	02 c0       	rjmp	.+4      	; 0x1f6e <vfprintf+0x2d0>
    1f6a:	1d 2d       	mov	r17, r13
    1f6c:	01 c0       	rjmp	.+2      	; 0x1f70 <vfprintf+0x2d2>
    1f6e:	19 2d       	mov	r17, r9
    1f70:	f4 fe       	sbrs	r15, 4
    1f72:	0d c0       	rjmp	.+26     	; 0x1f8e <vfprintf+0x2f0>
    1f74:	fe 01       	movw	r30, r28
    1f76:	ed 0d       	add	r30, r13
    1f78:	f1 1d       	adc	r31, r1
    1f7a:	80 81       	ld	r24, Z
    1f7c:	80 33       	cpi	r24, 0x30	; 48
    1f7e:	19 f4       	brne	.+6      	; 0x1f86 <vfprintf+0x2e8>
    1f80:	99 ee       	ldi	r25, 0xE9	; 233
    1f82:	f9 22       	and	r15, r25
    1f84:	08 c0       	rjmp	.+16     	; 0x1f96 <vfprintf+0x2f8>
    1f86:	1f 5f       	subi	r17, 0xFF	; 255
    1f88:	f2 fe       	sbrs	r15, 2
    1f8a:	05 c0       	rjmp	.+10     	; 0x1f96 <vfprintf+0x2f8>
    1f8c:	03 c0       	rjmp	.+6      	; 0x1f94 <vfprintf+0x2f6>
    1f8e:	8f 2d       	mov	r24, r15
    1f90:	86 78       	andi	r24, 0x86	; 134
    1f92:	09 f0       	breq	.+2      	; 0x1f96 <vfprintf+0x2f8>
    1f94:	1f 5f       	subi	r17, 0xFF	; 255
    1f96:	0f 2d       	mov	r16, r15
    1f98:	f3 fc       	sbrc	r15, 3
    1f9a:	14 c0       	rjmp	.+40     	; 0x1fc4 <vfprintf+0x326>
    1f9c:	f0 fe       	sbrs	r15, 0
    1f9e:	0f c0       	rjmp	.+30     	; 0x1fbe <vfprintf+0x320>
    1fa0:	1e 15       	cp	r17, r14
    1fa2:	10 f0       	brcs	.+4      	; 0x1fa8 <vfprintf+0x30a>
    1fa4:	9d 2c       	mov	r9, r13
    1fa6:	0b c0       	rjmp	.+22     	; 0x1fbe <vfprintf+0x320>
    1fa8:	9d 2c       	mov	r9, r13
    1faa:	9e 0c       	add	r9, r14
    1fac:	91 1a       	sub	r9, r17
    1fae:	1e 2d       	mov	r17, r14
    1fb0:	06 c0       	rjmp	.+12     	; 0x1fbe <vfprintf+0x320>
    1fb2:	80 e2       	ldi	r24, 0x20	; 32
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	b3 01       	movw	r22, r6
    1fb8:	0e 94 42 10 	call	0x2084	; 0x2084 <fputc>
    1fbc:	1f 5f       	subi	r17, 0xFF	; 255
    1fbe:	1e 15       	cp	r17, r14
    1fc0:	c0 f3       	brcs	.-16     	; 0x1fb2 <vfprintf+0x314>
    1fc2:	04 c0       	rjmp	.+8      	; 0x1fcc <vfprintf+0x32e>
    1fc4:	1e 15       	cp	r17, r14
    1fc6:	10 f4       	brcc	.+4      	; 0x1fcc <vfprintf+0x32e>
    1fc8:	e1 1a       	sub	r14, r17
    1fca:	01 c0       	rjmp	.+2      	; 0x1fce <vfprintf+0x330>
    1fcc:	ee 24       	eor	r14, r14
    1fce:	04 ff       	sbrs	r16, 4
    1fd0:	0f c0       	rjmp	.+30     	; 0x1ff0 <vfprintf+0x352>
    1fd2:	80 e3       	ldi	r24, 0x30	; 48
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	b3 01       	movw	r22, r6
    1fd8:	0e 94 42 10 	call	0x2084	; 0x2084 <fputc>
    1fdc:	02 ff       	sbrs	r16, 2
    1fde:	1d c0       	rjmp	.+58     	; 0x201a <vfprintf+0x37c>
    1fe0:	01 fd       	sbrc	r16, 1
    1fe2:	03 c0       	rjmp	.+6      	; 0x1fea <vfprintf+0x34c>
    1fe4:	88 e7       	ldi	r24, 0x78	; 120
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	0e c0       	rjmp	.+28     	; 0x2006 <vfprintf+0x368>
    1fea:	88 e5       	ldi	r24, 0x58	; 88
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	0b c0       	rjmp	.+22     	; 0x2006 <vfprintf+0x368>
    1ff0:	80 2f       	mov	r24, r16
    1ff2:	86 78       	andi	r24, 0x86	; 134
    1ff4:	91 f0       	breq	.+36     	; 0x201a <vfprintf+0x37c>
    1ff6:	01 ff       	sbrs	r16, 1
    1ff8:	02 c0       	rjmp	.+4      	; 0x1ffe <vfprintf+0x360>
    1ffa:	8b e2       	ldi	r24, 0x2B	; 43
    1ffc:	01 c0       	rjmp	.+2      	; 0x2000 <vfprintf+0x362>
    1ffe:	80 e2       	ldi	r24, 0x20	; 32
    2000:	f7 fc       	sbrc	r15, 7
    2002:	8d e2       	ldi	r24, 0x2D	; 45
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	b3 01       	movw	r22, r6
    2008:	0e 94 42 10 	call	0x2084	; 0x2084 <fputc>
    200c:	06 c0       	rjmp	.+12     	; 0x201a <vfprintf+0x37c>
    200e:	80 e3       	ldi	r24, 0x30	; 48
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	b3 01       	movw	r22, r6
    2014:	0e 94 42 10 	call	0x2084	; 0x2084 <fputc>
    2018:	9a 94       	dec	r9
    201a:	d9 14       	cp	r13, r9
    201c:	c0 f3       	brcs	.-16     	; 0x200e <vfprintf+0x370>
    201e:	da 94       	dec	r13
    2020:	f1 01       	movw	r30, r2
    2022:	ed 0d       	add	r30, r13
    2024:	f1 1d       	adc	r31, r1
    2026:	80 81       	ld	r24, Z
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	b3 01       	movw	r22, r6
    202c:	0e 94 42 10 	call	0x2084	; 0x2084 <fputc>
    2030:	dd 20       	and	r13, r13
    2032:	a9 f7       	brne	.-22     	; 0x201e <vfprintf+0x380>
    2034:	06 c0       	rjmp	.+12     	; 0x2042 <vfprintf+0x3a4>
    2036:	80 e2       	ldi	r24, 0x20	; 32
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	b3 01       	movw	r22, r6
    203c:	0e 94 42 10 	call	0x2084	; 0x2084 <fputc>
    2040:	ea 94       	dec	r14
    2042:	ee 20       	and	r14, r14
    2044:	c1 f7       	brne	.-16     	; 0x2036 <vfprintf+0x398>
    2046:	43 ce       	rjmp	.-890    	; 0x1cce <vfprintf+0x30>
    2048:	f3 01       	movw	r30, r6
    204a:	66 81       	ldd	r22, Z+6	; 0x06
    204c:	77 81       	ldd	r23, Z+7	; 0x07
    204e:	cb 01       	movw	r24, r22
    2050:	2b 96       	adiw	r28, 0x0b	; 11
    2052:	e2 e1       	ldi	r30, 0x12	; 18
    2054:	0c 94 e8 10 	jmp	0x21d0	; 0x21d0 <__epilogue_restores__>

00002058 <strnlen_P>:
    2058:	fc 01       	movw	r30, r24
    205a:	05 90       	lpm	r0, Z+
    205c:	61 50       	subi	r22, 0x01	; 1
    205e:	70 40       	sbci	r23, 0x00	; 0
    2060:	01 10       	cpse	r0, r1
    2062:	d8 f7       	brcc	.-10     	; 0x205a <strnlen_P+0x2>
    2064:	80 95       	com	r24
    2066:	90 95       	com	r25
    2068:	8e 0f       	add	r24, r30
    206a:	9f 1f       	adc	r25, r31
    206c:	08 95       	ret

0000206e <strnlen>:
    206e:	fc 01       	movw	r30, r24
    2070:	61 50       	subi	r22, 0x01	; 1
    2072:	70 40       	sbci	r23, 0x00	; 0
    2074:	01 90       	ld	r0, Z+
    2076:	01 10       	cpse	r0, r1
    2078:	d8 f7       	brcc	.-10     	; 0x2070 <strnlen+0x2>
    207a:	80 95       	com	r24
    207c:	90 95       	com	r25
    207e:	8e 0f       	add	r24, r30
    2080:	9f 1f       	adc	r25, r31
    2082:	08 95       	ret

00002084 <fputc>:
    2084:	0f 93       	push	r16
    2086:	1f 93       	push	r17
    2088:	cf 93       	push	r28
    208a:	df 93       	push	r29
    208c:	8c 01       	movw	r16, r24
    208e:	eb 01       	movw	r28, r22
    2090:	8b 81       	ldd	r24, Y+3	; 0x03
    2092:	81 ff       	sbrs	r24, 1
    2094:	1b c0       	rjmp	.+54     	; 0x20cc <fputc+0x48>
    2096:	82 ff       	sbrs	r24, 2
    2098:	0d c0       	rjmp	.+26     	; 0x20b4 <fputc+0x30>
    209a:	2e 81       	ldd	r18, Y+6	; 0x06
    209c:	3f 81       	ldd	r19, Y+7	; 0x07
    209e:	8c 81       	ldd	r24, Y+4	; 0x04
    20a0:	9d 81       	ldd	r25, Y+5	; 0x05
    20a2:	28 17       	cp	r18, r24
    20a4:	39 07       	cpc	r19, r25
    20a6:	64 f4       	brge	.+24     	; 0x20c0 <fputc+0x3c>
    20a8:	e8 81       	ld	r30, Y
    20aa:	f9 81       	ldd	r31, Y+1	; 0x01
    20ac:	01 93       	st	Z+, r16
    20ae:	f9 83       	std	Y+1, r31	; 0x01
    20b0:	e8 83       	st	Y, r30
    20b2:	06 c0       	rjmp	.+12     	; 0x20c0 <fputc+0x3c>
    20b4:	e8 85       	ldd	r30, Y+8	; 0x08
    20b6:	f9 85       	ldd	r31, Y+9	; 0x09
    20b8:	80 2f       	mov	r24, r16
    20ba:	09 95       	icall
    20bc:	89 2b       	or	r24, r25
    20be:	31 f4       	brne	.+12     	; 0x20cc <fputc+0x48>
    20c0:	8e 81       	ldd	r24, Y+6	; 0x06
    20c2:	9f 81       	ldd	r25, Y+7	; 0x07
    20c4:	01 96       	adiw	r24, 0x01	; 1
    20c6:	9f 83       	std	Y+7, r25	; 0x07
    20c8:	8e 83       	std	Y+6, r24	; 0x06
    20ca:	02 c0       	rjmp	.+4      	; 0x20d0 <fputc+0x4c>
    20cc:	0f ef       	ldi	r16, 0xFF	; 255
    20ce:	1f ef       	ldi	r17, 0xFF	; 255
    20d0:	c8 01       	movw	r24, r16
    20d2:	df 91       	pop	r29
    20d4:	cf 91       	pop	r28
    20d6:	1f 91       	pop	r17
    20d8:	0f 91       	pop	r16
    20da:	08 95       	ret

000020dc <__ultoa_invert>:
    20dc:	fa 01       	movw	r30, r20
    20de:	aa 27       	eor	r26, r26
    20e0:	28 30       	cpi	r18, 0x08	; 8
    20e2:	51 f1       	breq	.+84     	; 0x2138 <__ultoa_invert+0x5c>
    20e4:	20 31       	cpi	r18, 0x10	; 16
    20e6:	81 f1       	breq	.+96     	; 0x2148 <__ultoa_invert+0x6c>
    20e8:	e8 94       	clt
    20ea:	6f 93       	push	r22
    20ec:	6e 7f       	andi	r22, 0xFE	; 254
    20ee:	6e 5f       	subi	r22, 0xFE	; 254
    20f0:	7f 4f       	sbci	r23, 0xFF	; 255
    20f2:	8f 4f       	sbci	r24, 0xFF	; 255
    20f4:	9f 4f       	sbci	r25, 0xFF	; 255
    20f6:	af 4f       	sbci	r26, 0xFF	; 255
    20f8:	b1 e0       	ldi	r27, 0x01	; 1
    20fa:	3e d0       	rcall	.+124    	; 0x2178 <__ultoa_invert+0x9c>
    20fc:	b4 e0       	ldi	r27, 0x04	; 4
    20fe:	3c d0       	rcall	.+120    	; 0x2178 <__ultoa_invert+0x9c>
    2100:	67 0f       	add	r22, r23
    2102:	78 1f       	adc	r23, r24
    2104:	89 1f       	adc	r24, r25
    2106:	9a 1f       	adc	r25, r26
    2108:	a1 1d       	adc	r26, r1
    210a:	68 0f       	add	r22, r24
    210c:	79 1f       	adc	r23, r25
    210e:	8a 1f       	adc	r24, r26
    2110:	91 1d       	adc	r25, r1
    2112:	a1 1d       	adc	r26, r1
    2114:	6a 0f       	add	r22, r26
    2116:	71 1d       	adc	r23, r1
    2118:	81 1d       	adc	r24, r1
    211a:	91 1d       	adc	r25, r1
    211c:	a1 1d       	adc	r26, r1
    211e:	20 d0       	rcall	.+64     	; 0x2160 <__ultoa_invert+0x84>
    2120:	09 f4       	brne	.+2      	; 0x2124 <__ultoa_invert+0x48>
    2122:	68 94       	set
    2124:	3f 91       	pop	r19
    2126:	2a e0       	ldi	r18, 0x0A	; 10
    2128:	26 9f       	mul	r18, r22
    212a:	11 24       	eor	r1, r1
    212c:	30 19       	sub	r19, r0
    212e:	30 5d       	subi	r19, 0xD0	; 208
    2130:	31 93       	st	Z+, r19
    2132:	de f6       	brtc	.-74     	; 0x20ea <__ultoa_invert+0xe>
    2134:	cf 01       	movw	r24, r30
    2136:	08 95       	ret
    2138:	46 2f       	mov	r20, r22
    213a:	47 70       	andi	r20, 0x07	; 7
    213c:	40 5d       	subi	r20, 0xD0	; 208
    213e:	41 93       	st	Z+, r20
    2140:	b3 e0       	ldi	r27, 0x03	; 3
    2142:	0f d0       	rcall	.+30     	; 0x2162 <__ultoa_invert+0x86>
    2144:	c9 f7       	brne	.-14     	; 0x2138 <__ultoa_invert+0x5c>
    2146:	f6 cf       	rjmp	.-20     	; 0x2134 <__ultoa_invert+0x58>
    2148:	46 2f       	mov	r20, r22
    214a:	4f 70       	andi	r20, 0x0F	; 15
    214c:	40 5d       	subi	r20, 0xD0	; 208
    214e:	4a 33       	cpi	r20, 0x3A	; 58
    2150:	18 f0       	brcs	.+6      	; 0x2158 <__ultoa_invert+0x7c>
    2152:	49 5d       	subi	r20, 0xD9	; 217
    2154:	31 fd       	sbrc	r19, 1
    2156:	40 52       	subi	r20, 0x20	; 32
    2158:	41 93       	st	Z+, r20
    215a:	02 d0       	rcall	.+4      	; 0x2160 <__ultoa_invert+0x84>
    215c:	a9 f7       	brne	.-22     	; 0x2148 <__ultoa_invert+0x6c>
    215e:	ea cf       	rjmp	.-44     	; 0x2134 <__ultoa_invert+0x58>
    2160:	b4 e0       	ldi	r27, 0x04	; 4
    2162:	a6 95       	lsr	r26
    2164:	97 95       	ror	r25
    2166:	87 95       	ror	r24
    2168:	77 95       	ror	r23
    216a:	67 95       	ror	r22
    216c:	ba 95       	dec	r27
    216e:	c9 f7       	brne	.-14     	; 0x2162 <__ultoa_invert+0x86>
    2170:	00 97       	sbiw	r24, 0x00	; 0
    2172:	61 05       	cpc	r22, r1
    2174:	71 05       	cpc	r23, r1
    2176:	08 95       	ret
    2178:	9b 01       	movw	r18, r22
    217a:	ac 01       	movw	r20, r24
    217c:	0a 2e       	mov	r0, r26
    217e:	06 94       	lsr	r0
    2180:	57 95       	ror	r21
    2182:	47 95       	ror	r20
    2184:	37 95       	ror	r19
    2186:	27 95       	ror	r18
    2188:	ba 95       	dec	r27
    218a:	c9 f7       	brne	.-14     	; 0x217e <__ultoa_invert+0xa2>
    218c:	62 0f       	add	r22, r18
    218e:	73 1f       	adc	r23, r19
    2190:	84 1f       	adc	r24, r20
    2192:	95 1f       	adc	r25, r21
    2194:	a0 1d       	adc	r26, r0
    2196:	08 95       	ret

00002198 <__prologue_saves__>:
    2198:	2f 92       	push	r2
    219a:	3f 92       	push	r3
    219c:	4f 92       	push	r4
    219e:	5f 92       	push	r5
    21a0:	6f 92       	push	r6
    21a2:	7f 92       	push	r7
    21a4:	8f 92       	push	r8
    21a6:	9f 92       	push	r9
    21a8:	af 92       	push	r10
    21aa:	bf 92       	push	r11
    21ac:	cf 92       	push	r12
    21ae:	df 92       	push	r13
    21b0:	ef 92       	push	r14
    21b2:	ff 92       	push	r15
    21b4:	0f 93       	push	r16
    21b6:	1f 93       	push	r17
    21b8:	cf 93       	push	r28
    21ba:	df 93       	push	r29
    21bc:	cd b7       	in	r28, 0x3d	; 61
    21be:	de b7       	in	r29, 0x3e	; 62
    21c0:	ca 1b       	sub	r28, r26
    21c2:	db 0b       	sbc	r29, r27
    21c4:	0f b6       	in	r0, 0x3f	; 63
    21c6:	f8 94       	cli
    21c8:	de bf       	out	0x3e, r29	; 62
    21ca:	0f be       	out	0x3f, r0	; 63
    21cc:	cd bf       	out	0x3d, r28	; 61
    21ce:	09 94       	ijmp

000021d0 <__epilogue_restores__>:
    21d0:	2a 88       	ldd	r2, Y+18	; 0x12
    21d2:	39 88       	ldd	r3, Y+17	; 0x11
    21d4:	48 88       	ldd	r4, Y+16	; 0x10
    21d6:	5f 84       	ldd	r5, Y+15	; 0x0f
    21d8:	6e 84       	ldd	r6, Y+14	; 0x0e
    21da:	7d 84       	ldd	r7, Y+13	; 0x0d
    21dc:	8c 84       	ldd	r8, Y+12	; 0x0c
    21de:	9b 84       	ldd	r9, Y+11	; 0x0b
    21e0:	aa 84       	ldd	r10, Y+10	; 0x0a
    21e2:	b9 84       	ldd	r11, Y+9	; 0x09
    21e4:	c8 84       	ldd	r12, Y+8	; 0x08
    21e6:	df 80       	ldd	r13, Y+7	; 0x07
    21e8:	ee 80       	ldd	r14, Y+6	; 0x06
    21ea:	fd 80       	ldd	r15, Y+5	; 0x05
    21ec:	0c 81       	ldd	r16, Y+4	; 0x04
    21ee:	1b 81       	ldd	r17, Y+3	; 0x03
    21f0:	aa 81       	ldd	r26, Y+2	; 0x02
    21f2:	b9 81       	ldd	r27, Y+1	; 0x01
    21f4:	ce 0f       	add	r28, r30
    21f6:	d1 1d       	adc	r29, r1
    21f8:	0f b6       	in	r0, 0x3f	; 63
    21fa:	f8 94       	cli
    21fc:	de bf       	out	0x3e, r29	; 62
    21fe:	0f be       	out	0x3f, r0	; 63
    2200:	cd bf       	out	0x3d, r28	; 61
    2202:	ed 01       	movw	r28, r26
    2204:	08 95       	ret

00002206 <_exit>:
    2206:	f8 94       	cli

00002208 <__stop_program>:
    2208:	ff cf       	rjmp	.-2      	; 0x2208 <__stop_program>
